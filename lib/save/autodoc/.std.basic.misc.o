#/secure/handlers/autodoc/autodoc_file.c
public_functions (["set_value_info":({({"void",}),({({"string",}),"word",({"int",}),"number",}),(["main":({"This method sets the value information for a type ofspecial object.  This is the extra value information associatedwith the \"artifact\", \"enchantment\" or \"material\" of the object.",}),"see":({"query_value_at()","remove_value_info()","set_value()",}),"param":({"word the type of value information","number the amount to set it to",}),]),}),"adjust_weight":({({"void",}),({({"int",}),"w",}),(["main":({"This method adjusts the weight by the given amount.",}),"see":({"set_weight()","query_weight()",}),"param":({"w the amount to change the weight by",}),]),}),"adjust_money":({({"varargs","int",}),({({"mixed",}),"amt",({"string",}),"coin",}),(["main":({"This method changes the value of the object by a certain number ofcoins.  The coins can be any type.",}),"see":({"/handlers/money_handler->query_total_value()","adjust_value()","query_money_array()","set_value()",}),"return":({"the new value",}),]),}),"query_money":({({"int",}),({({"string",}),"type",}),(["main":({"This method returns the number of coins of a certaintype that are in the value of the object.  This is nota good estimate of value or anything, no idea why it ishere really.  I am sure I had a good reasonat the time :)",}),"see":({"/handlers/money_handlers->create_money_array()","set_value()","adjust_value()","adjust money()","query_money_array()","query_value()",}),"param":({"type the type of coin to look for",}),"return":({"the number of coins of that type",}),]),}),"adjust_value":({({"int",}),({({"int",}),"i",}),(["main":({"This method changes the current value of the object.",}),"param":({"i the amount to change the value by",}),"return":({"the new value of the object",}),]),}),"query_money_array":({({"mixed",}),({}),(["main":({"This method returns the value of the object as a money array.  Themoney array is a list oif coinages followed by a number of coins.Eg: <code>({ \"copper\", 10, \"silver\", 12 }).</code>",}),"see":({"/handlers/money_handlers->create_money_array()","set_value()","adjust_value()","adjust_money()","query_value()",}),]),}),"query_value":({({"int",}),({}),(["main":({"This method returns the current value of the object.",}),"return":({"the current value of the object",}),]),}),"query_value_real":({({"int",}),({({"string",}),"place",}),(["main":({"This method always returns the most expensive value of an item.This should be used for things like theif quotas and anything whichrequires the real actual value of an item.",}),"param":({"place the place to find the values in",}),]),}),"query_weight":({({"int",}),({}),(["main":({"This method returns the current weight of the object.",}),"see":({"set_weight()","adjust_weight()",}),"return":({"the current weight of the object",}),]),}),"query_base_value":({({"int",}),({}),(["main":({"This method returns the vase value of the object.  This is beforeany scaling from things like condition occurs.",}),"return":({"the base value",}),]),}),"set_weight":({({"void",}),({({"int",}),"w",}),(["main":({"This method sets the weight of the object.  One weight unitis 50 grams.<p>When setting the weights of weapons use the following guide:<p>o===================o=====================o================o<br>| Weapon            | Approx. Weight (kg) |  Weight Units  |<br>o===================o=====================o================o<br>| Dagger            |        0.5          |       10       |<br>| War Hammer        |        1.1          |       22       |<br>| Mace              |        1.3          |       26       |<br>| Flail             |        1.5          |       30       |<br>| Pole Axe          |        2.3          |       46       |<br>| Short Sword       |        0.8          |       16       |<br>| Broad Sword       |        1.1          |       22       |<br>| Long Sword        |        1.4          |       28       |<br>| Bastard Sword     |        1.9          |       38       |<br>| Two-handed Sword  |        2.7          |       42       |<br>o===================o=====================o================o<br>",}),"see":({"adjust_weight()","query_weight()",}),"param":({"w the amount to change the weight by",}),]),}),"query_value_at":({({"int",}),({({"object",}),"place",}),(["main":({"This method figures out how much an object will cost in a certainplace.  For instance at a shop that does not handle artifcacts anartifact will be bought and sold cheaply.  The current typesof \"artifact\", \"enchantment\" and \"material\" are recognised.A property in the shop of the type \"artifact valued\" willcause the values of that type to be taken into account.",}),"see":({"query_value()","set_value_info()","adjust_value()",}),"param":({"place the object to find the value at",}),"return":({"the value in the shop",}),]),}),"query_value_info":({({"mapping",}),({}),(["main":({"This method returns the information associated for all the specialbits of the object.  The value infor maping ihas keys which arethe type of value info and the value is the value of it.",}),"see":({"set_value_info()","query_value_at()","remove_value_info()",}),"return":({"the value info mapping",}),]),}),"remove_value_info":({({"void",}),({({"string",}),"word",}),(["main":({"This method removes the value information for a type ofspecial object.  This is the extra value information associatedwith the \"artifact\", \"enchantment\" or \"material\" of the object.",}),"see":({"query_value_at()","set_value_info()","set_value()",}),"param":({"word the type of value information to remove",}),]),}),"query_complete_weight":({({"int",}),({}),(["main":({"This method returns the current weight of the object. It does basiclythe same thing as the previous call.  NB: TO->query_weight()is pretty much the same as query_weight(), except it takes shadows intoaccount.",}),"see":({"set_weight()","adjust_weight()","query_weight()",}),"return":({"the current weight of the object",}),]),}),"set_value":({({"void",}),({({"int",}),"number",}),(["main":({"This method sets the value of the object.  The actual value incoins and so forth is worked out by the money handler based on thevalue.",}),"see":({"query_value()","adjust_value()","query_money_array()",}),"param":({"number the new value of the object",}),]),}),])
protected_functions ([])
inherits (["/std/basic/light":({}),"/std/basic/move":({}),])
main_docs (["main":({"This class contains information relating to the value and the weightof the object.",}),"author":({"Pinkfish",}),])
define_docs (["PRICE_INDEX":([]),"WATCH_DEFINE":([]),])
includes (["/include/move_failures.h":962428284,"/include/money.h":1049974076,])
class_docs ([])
file_name "/std/basic/misc.c"
last_changed 1005174430
