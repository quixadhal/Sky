#/secure/handlers/autodoc/autodoc_file.c
public_functions (["uudecode":({({"string",}),({({"string",}),"bufcoded",}),([]),}),"escape_html":({({"string",}),({({"string",}),"s",}),([]),}),"hex_to_decimal":({({"int",}),({({"string",}),"str",}),([]),}),"query_status_line":({({"string",}),({({"int",}),"err",}),(["main":({"This method returns extra information about a http error.",}),"param":({"err the error to get more info on",}),]),}),"query_current_file":({({"string",}),({}),([]),}),"parse_uri":({({"void",}),({({"class","http_request",}),"req",({"string",}),"uri",}),([]),}),"parse_date":({({"int",}),({({"string",}),"date",}),([]),}),"handle_body":({({"int",}),({({"class","http_request",}),"req",}),([]),}),"find_last_token":({({"int",}),({({"string",}),"line",({"string",}),"token",}),([]),}),"query_files_read":({({"int",}),({}),([]),}),"tidy_files_read":({({"void",}),({}),([]),}),"format_date":({({"string",}),({({"int",}),"x",}),([]),}),"find_token":({({"int",}),({({"string",}),"line",({"string",}),"token",}),([]),}),"ltime2sec":({({"int",}),({({"mixed","*",}),"ltime",}),([]),}),"unmime":({({"int",}),({({"string","ref",}),"url",({"int",}),"is_path",}),([]),}),"query_current_no_reads":({({"int",}),({({"string",}),"file",}),([]),}),"query_server_ip":({({"string",}),({}),([]),}),"next_token":({({"string",}),({({"string","ref",}),"line",}),([]),}),"mime":({({"string",}),({({"string",}),"str",}),([]),}),])
protected_functions (["clean_sockets":({({"void",}),({}),([]),}),"www_resolve":({({"int",}),({({"class","http_request",}),"req",}),([]),}),"set_byterange":({({"int",}),({({"class","http_request",}),"req",}),([]),}),"eventNewConnection":({({"void",}),({({"int",}),"fd",}),([]),}),"eventRead":({({"void",}),({({"int",}),"fd",({"string",}),"str",}),([]),}),"www_authenticate":({({"int",}),({({"class","http_request",}),"req",}),([]),}),"close_connection":({({"varargs","void",}),({({"int",}),"fd",({"int",}),"persist",}),([]),}),"auth_failure":({({"void",}),({({"class","http_request",}),"req",}),([]),}),"auth_name":({({"string",}),({({"class","http_request",}),"req",}),([]),}),"internal_byterange":({({"int",}),({({"int",}),"realreq",({"int","ref",}),"tlength",({"class","http_request",}),"req",({"string","ref",}),"r_range",({"int","ref",}),"offset",({"int","ref",}),"length",}),([]),}),"http_header":({({"void",}),({({"class","http_request",}),"req",}),([]),}),"parse_byterange":({({"int",}),({({"string",}),"range",({"int",}),"clength",({"int","ref",}),"start",({"int","ref",}),"end",}),([]),}),"send_string_array":({({"void",}),({({"int",}),"fd",({"string","*",}),"str",({"int",}),"mod_date",({"string",}),"location",({"int",}),"no_length",}),([]),}),"eventSocketClosed":({({"void",}),({({"int",}),"fd",}),([]),}),"each_byterange":({({"int",}),({({"class","http_request",}),"req",({"int","ref",}),"offset",({"int","ref",}),"length",}),([]),}),"check_fulluri":({({"string",}),({({"class","http_request",}),"req",({"string",}),"uri",}),([]),}),"send_string":({({"void",}),({({"int",}),"fd",({"string",}),"str",({"int",}),"mod_date",({"string",}),"location",({"int",}),"no_length",}),([]),}),"internal_redirect":({({"void",}),({({"class","http_request",}),"req",({"string",}),"new_uri",}),([]),}),"parse_headers":({({"void",}),({({"class","http_request",}),"req",({"int",}),"i",}),([]),}),"send_file":({({"void",}),({({"int",}),"fd",({"string",}),"str",}),([]),}),"resolve_callback":({({"void",}),({({"string",}),"name",({"string",}),"addr",({"int",}),"key",}),([]),}),"handle_request":({({"void",}),({({"class","http_request",}),"req",}),([]),}),"use_range_x":({({"int",}),({({"class","http_request",}),"req",}),([]),}),"set_last_modified":({({"int",}),({({"class","http_request",}),"req",({"int",}),"mtime",}),([]),}),"basic_header":({({"void",}),({({"class","http_request",}),"req",}),([]),}),"send_headers":({({"void",}),({({"class","http_request",}),"req",({"mapping",}),"headers",({"mixed","*","args",}),"...",}),([]),}),"set_persist":({({"int",}),({({"class","http_request",}),"req",}),([]),}),])
inherits (["/net/inherit/server":({}),])
main_docs (["main":({"This method will return either the host name, or IP,if it has been successfully resolved.",}),"return":({"either the host name or IP of the host",}),])
define_docs (["LOGGING":([]),"NOT_PATH":([]),"IS_PATH":([]),])
includes (["/secure/include/socket_errors.h":1200761934,"/secure/include/http.h":1028340047,"/include/localtime.h":962428284,"/secure/include/config.h":1121841204,"/include/runtime_config.h":1200761933,"/include/mime.h":962428284,"/secure/include/network.h":1027443840,])
class_docs ([])
file_name "/secure/handlers/http.c"
last_changed 1057773238
