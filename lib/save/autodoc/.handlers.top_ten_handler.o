#/secure/handlers/autodoc/autodoc_file.c
public_functions (["check_family_and_club_info":({({"void",}),({}),(["main":({"Stuff to make sure that all the clubs still exist.",}),]),}),"add_guild_top_ten":({({"void",}),({({"string",}),"word",}),(["main":({"Add in a new table.  This should be used when a new guild is createdand their table needs to be defined.",}),"param":({"word the name of the table to create",}),]),}),"inform_of_club":({({"void",}),({({"string",}),"club",({"int",}),"family",({"int",}),"type",({"mixed",}),"num",}),([]),}),"query_average":({({"int",}),({}),(["main":({"Some sort of weight average used in the rating calulation.",}),"return":({"the weighted average",}),]),}),"query_skills":({({"mixed","*",}),({}),(["main":({"The skils list with weights.  This is used to help generate therating.",}),"return":({"the skils list with ratings",}),]),}),"query_family_info":({({"mixed","*",}),({}),([]),}),"calculate_rating":({({"int",}),({({"object",}),"thing",}),(["main":({"Figure out the rating for the player.",}),"param":({"thing the object to get the ratingof",}),"return":({"the current rating",}),]),}),"query_ordered_table":({({"mixed","*",}),({({"string",}),"table_name",}),(["main":({"Returns the ordered list of people on the top ten list.  If the tablename is 0 or it is \"main\" the main table is checked.  If thetable name is \"archive\" then the archive is used.",}),"see":({"/include/top_ten_tables.h",}),"param":({"table_name the name of the tanble to check",}),"return":({"the array of arrays of the top ten information",}),]),}),"player_skill_advance":({({"varargs","void",}),({({"mixed",}),"word",({"object",}),"thing",}),(["main":({"Called when a player advances their skills.",}),"param":({"word the skill being advanced","thing the player which advanced their skils",}),]),}),"check_tables":({({"void",}),({}),(["main":({"Wander over the top ten tables checking to see if everyonestill exists.",}),]),}),"query_archive":({({"mixed","*",}),({}),(["main":({"The complete archived top ten table.",}),"return":({"the archived top ten table",}),]),}),"excise_name":({({"varargs","void",}),({({"string",}),"word1",({"string",}),"word2",}),(["main":({"Remove the named player from the named table.",}),"param":({"word1 the name of the player","word2 the name of the table, 0 for the main table",}),]),}),"query_club_info":({({"mixed","*",}),({}),([]),}),"query_top_ten":({({"mixed","*",}),({}),(["main":({"Return the complete list of top ten tables.",}),"return":({"the array of arrays being the top ten tab;les",}),]),}),"query_guild_top_tens":({({"mapping",}),({}),(["main":({"The mapping which is the guild top ten tables.",}),"return":({"the guild top ten mapping",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"Top ten player lists - overall and for each guild.<p>archive and top_ten is of the format:<code><p>      ({ ({ name (guild), rating, level, age }), ... })</code><p>guild_top_tens is of the format:<code><p>      ([ guild: ({ ({ name, rating, level, age }), ... }), ... ])</code>",}),"author":({"Deutha",}),])
define_docs (["TOP_TEN_SIZE":([]),"AGE_DIVIDER":([]),"SAVE_FILE":([]),"ARCHIVE_RATING":([]),"GUILD_TOP_TEN_SIZE":([]),"ARCHIVE_TIME":([]),"AGE":([]),"APEX_LIMIT":([]),])
includes (["/include/top_ten_tables.h":962428284,"/include/time.h":1049465667,"/include/clubs.h":1050407666,"/secure/include/skills.h":1118932470,])
class_docs ([])
file_name "/handlers/top_ten_handler.c"
last_changed 1056493629
