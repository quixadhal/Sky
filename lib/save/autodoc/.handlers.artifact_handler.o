#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_artifact":({({"int",}),({({"string",}),"name",}),(["main":({"Returns the information about the named artificats.",}),"param":({"name the artificant name to get information on",}),"return":({"the informatioj on the artificant, 0 if the artifact does not exist",}),]),}),"remove_artifact":({({"void",}),({({"string",}),"name",}),(["main":({"Remove the artifact of the given name.",}),"param":({"name the name of the artifiact to remove",}),]),}),"query_artifact_value":({({"int",}),({({"string",}),"name",({"int",}),"bonus",}),(["main":({"Determine the value of the artificant.  The value is determined bythe following equation:<br><code><pre>value = (value * max) / query_artifiact_level(name, bonus)</code></pre>",}),"param":({"name the name of the artifact","bonus the bonus modifier",}),"return":({"the value of the artifact",}),]),}),"diagnose_artifact":({({"void",}),({({"object",}),"thing",({"object",}),"person",({}),"object",}),(["main":({"Let a player attempt to find out what type of artifact thething is.",}),"param":({"thing the item to diagnose","person the person doing the diagnosis",}),]),}),"zap":({({"void",}),({({"object",}),"thing",({"object",}),"person",({"object",}),"wand",}),(["main":({"Zap the wand!",}),"param":({"thing the thing to zap with the wand","person the person doing the zapping","wand the wand being zapped",}),]),}),"query_artifacts":({({"mapping",}),({}),(["main":({"This method returns the artifacts mapping.The artifacts mapping has elements of the form:<br><pre><code>   name : ({ file, max level, min level, bonus to make, value info })e.g. \"wand of eternal light\" :       ({ \"/obj/wands/eternal_light\", 85, 65, 250, 10000 })</code></pre>",}),"return":({"the artificats mapping",}),]),}),"add_known":({({"void",}),({({"string",}),"person",({"string",}),"artifact",}),(["main":({"Place an artifact into a players known artifact list.",}),"param":({"person the name of the person knowing the artifact","artifact the name of the artifact being know",}),]),}),"add_artifact":({({"void",}),({({"string",}),"name",({"string",}),"file",({"int",}),"max",({"int",}),"min",({"int",}),"bonus",({"int",}),"value",}),(["main":({"Add a new artifact into the artificat mapping.",}),"param":({"name the name of the artifact","file the file name of the artifact","max the maximum level","min the minimum level","bonus the bonus required to make","value the value of the artifact",}),"see":({"query_artificats()",}),]),}),"query_artifact_file":({({"string",}),({({"string",}),"name",}),(["main":({"Find the file associated with the artifact.",}),"param":({"name the name of the artifact",}),"return":({"the file associated with the artifact",}),]),}),"query_artifact_value_info":({({"int",}),({({"string",}),"name",}),(["main":({"Find the value associated with the artifact.",}),"param":({"name the name of the artifact",}),"return":({"the value associated with the artifact",}),]),}),"query_artifact_level":({({"int",}),({({"string",}),"name",({"int",}),"bonus",}),(["main":({"Find the level of the artifact.  The level is determined as thedifference between the minimum and maximum artifact level squareddivided by the bonus passed in minus the bonus to create  plus the differencebetween the maximum and minimum levels plus the maximum level.<br>ie:<pre><code>level = (((max-min) * (max-min)) / (bonus - make_bonus + max - min)) + min</pre></code>",}),"param":({"name the name of the artifact","bonus the bonus modifier",}),"return":({"the level of the artifact",}),]),}),"query_wand_name":({({"string",}),({}),(["main":({"The name of the wand.",}),"return":({"the wand name",}),]),}),"query_known":({({"int",}),({({"string",}),"person",({"string",}),"artifact",}),(["main":({"A person will not forget how to recognise an artifact (unless they    refresh, in which case all of them are forgotten, i.e. the file    is wiped) so to let a person learn to recognise an artifact, add    a new line to their file consisting of its name and to see if    they know an artifact, check in their file for its name. This    method doesn't require a library handler.",}),"param":({"person the person check to see if they know the artifact","artifact the artifact being checked",}),"return":({"1 if they know it, 0 if they do not",}),]),}),"query_artifact_max":({({"int",}),({({"string",}),"name",}),(["main":({"Find the maximum level associated with the artifact.",}),"param":({"name the name of the artifact",}),"return":({"the maximum level associated with the artifact",}),]),}),"save_me":({({"void",}),({}),(["main":({"Saves the current state to disk. ",}),]),}),"query_artifact_min":({({"int",}),({({"string",}),"name",}),(["main":({"Find the minimum level associated with the artifact.",}),"param":({"name the name of the artifact",}),"return":({"the minimum level associated with the artifact",}),]),}),"query_artifact_bonus":({({"int",}),({({"string",}),"name",}),(["main":({"Find the bonus to make associated with the artifact.",}),"param":({"name the name of the artifact",}),"return":({"the bonus to make associated with the artifact",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"Keeps track of all the artifacts and the players known artifactsarrays.",}),])
define_docs (["SAVE_FILE":([]),"A_SAVE_DIR":([]),])
includes ([])
class_docs ([])
file_name "/handlers/artifact_handler.c"
last_changed 1032763768
