#/secure/handlers/autodoc/autodoc_file.c
public_functions (["get_direc_dist":({({"mixed",}),({({"int","*",}),"co_ord1",({"int","*",}),"co_ord2",}),(["main":({"This method returns the square distance, the name of the directionthe sound comes from and the up down offset.  It is used by the shoutcode and by various other things that require this inofmraiont.The return array is formated as:<br>({ square_distance, name_of_direction, z_offset })",}),"param":({"co_ord1 the first co-ordinate","co_ord2 the co-ordinate to compare against",}),"return":({"the array as described above",}),]),}),"broadcast_to_channel":({({"void",}),({({"mixed",}),"ob",({"string",}),"channel",({"mixed",}),"message",}),(["main":({"Inform channel of message.  The message will get sent to all the objectsadded to the list to the method event_channel_message.  The methodwill be called with three arguements, first is the object that startedthe event, the second the channel it is being send to and the last is themessage being sent to the channel.",}),"param":({"ob the object creating the channel event","channel the channel to inform people about","message the message to tell the channel about",}),]),}),"broadcast_event":({({"void",}),({({"object","*",}),"things",({"int","*",}),"centre",({"mixed",}),"msg",({"int",}),"range",({"int",}),"inside",({"int",}),"underwater",}),(["main":({"Sends an event out to all the things.  It checks to make sure theycan hear the event and all that stuff.",}),"param":({"things things that get told about it","centre coords where event occurs","msg the message to broadcast, ifthe message is an array, then the first elementof the array will be the message told to peopleoutdoors and the second for people indoors,if it's a string, it will be used for all areas.","range range of telling in room units","inside tell things if indoors","underwater tell things if underwater",}),]),}),"query_channel_history":({({"mixed",}),({({"string",}),"channel",}),(["main":({"This message returns the current history list for the channel.  Thearray is:<br>({ ({ person, message }), ... })",}),"see":({"broadcast_to_channel()",}),"param":({"channel the channel to get the history of",}),"return":({"the history of the channel",}),]),}),"remove_object_from_channel":({({"int",}),({({"string",}),"channel_name",({"object",}),"ob",}),(["main":({"This method removes an object from the list of objects to be told about thespecified channel.",}),"param":({"channel_name the name of the channel","ob the object to add to the channel",}),]),}),"init_dynamic_arg":({({"void",}),({({"mapping",}),"arg",}),([]),}),"npc_hear_shouts":({({"void",}),({({"object",}),"newlistener",}),(["main":({"Adds an NPC to the list of NPC's who are to receive shout events.The NPC need not be removed from this list when he dies -- destingthe NPC object has the same effect as calling npc_unhear_shouts().event_person_shout() is activated on the NPC for all shouts.NPC's do not normally detect shouts.event_person_shout() on the NPC should be replaced with similar codeto that in the broadcaster to determine if the shouter is withinrange and to generate the desired response.",}),"see":({"/global/events->event_person_shout()","npc_unhear_shouts()",}),"param":({"newlistener NPC object to be added to the list",}),]),}),"query_channel_members":({({"object","*",}),({({"string",}),"channel",}),(["main":({"This method must only be used for debugging purposes.",}),"see":({"is_channel()",}),"param":({"channel the channel which has all these things on it",}),"return":({"the array of objects in the channel",}),]),}),"add_object_to_channel":({({"void",}),({({"string",}),"channel_name",({"object",}),"ob",}),(["main":({"This method adds an object to the list of objects to be told about thespecfied channel.  The method called on the object for the channelwill be event_channel_message.  The method will be called withthree arguements, the first is the object generating the eventthe second is the channel the event is generated on and thethird is the message being sent to the channel.",}),"param":({"channel_name the name of the channel","ob the object to add to the list",}),]),}),"query_next_channel_number":({({"int",}),({({"string",}),"channel",}),(["main":({"This method keeps track of an ever increasing number for a specifiedchannel type.  THis is used in the wizards spell (for instance) tokeep track of unique ids for wizard channels.",}),"param":({"channel the name of the channel",}),"return":({"the next number in the series",}),]),}),"is_channel":({({"int",}),({({"string",}),"channel",}),(["main":({"This method checks to see if the channel exists.",}),"see":({"query_channel_members()",}),"param":({"channel the channel name to check for",}),"return":({"1 if the channel eixsts, 0 if not",}),]),}),"npc_shout_event":({({"void",}),({({"object",}),"shouter",({"string",}),"start",({"string",}),"message",({"string",}),"lang",({"int","*",}),"coord",({"int",}),"range",}),(["main":({"This method is called by the shout command to filter the shouts ontothe npcs that are listening.",}),"param":({"shouter the person who shouted","start the start of the message","message the message shouted","lang the language the message is in","coord the co-ordinate it was shouted from","range the range of the shout",}),]),}),"npc_unhear_shouts":({({"int",}),({({"object",}),"oldlistener",}),(["main":({"Removes an NPC from the list of NPC's who are to receive shout events.The NPC need not be removed from this list when he dies -- destingthe NPC object has the same effect as calling npc_unhear_shouts().",}),"see":({"/global/events->event_person_shout()","npc_hear_shouts()",}),"param":({"oldlistener NPC object to be removed from the list",}),"return":({"1 if successfully removed",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"Basic sight and sound broadcaster.",}),])
define_docs (["SAVE_FILE":([]),"BROADCAST_HISTORY_LENGTH":([]),"DIR_ARRAY":([]),])
includes ([])
class_docs ([])
file_name "/handlers/broadcaster.c"
last_changed 1029054059
