#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_no_limbs":({({"int",}),({}),(["main":({"This method returns the number of limbs that the object uses.",}),"return":({"the number of limbs the object uses when held",}),]),}),"query_holder":({({"object",}),({}),(["main":({"This method returns the person who is holding the object.",}),"return":({"the person holding the object",}),]),}),"move":({({"int",}),({({"mixed",}),"ob",}),(["main":({"This method should be called by the upper level moves.  The resultneeds to be check, if it is not MOVE_OK then the move should bestopped.",}),"param":({"ob the object to move",}),]),}),"set_no_limbs":({({"void",}),({({"int",}),"num",}),(["main":({"This method sets the number of limbs the object uses when held.",}),"param":({"num the number of limbs",}),]),}),"held_this_item":({({"int",}),({({"int",}),"held",({"object",}),"holder",({"mixed",}),"arg",}),(["main":({"This method is called by the inheritable when the object is change frombeing held to unheld, or vica versa.  This should be used to turn onand off light sources and so on.  The method will also be called witha 2 if the object was held and we are doing an initialisation sequence.",}),"param":({"held 1 if the item is held, 0 if not, 2 if held on init","holder this is person already holding it when removed, new holder when held","arg an argument use in the autoloading, passed into init_dynamic_arg",}),"return":({"1 if the hold/remove was successful",}),]),}),"hold_item":({({"varargs","int","*",}),({({"object",}),"who",({"int",}),"pos",}),(["main":({"Attempts to free up enough limbs for this_object to be held.  Ifitems are dropped to make this possible, who is notified.  Ifenough limbs are freed, attempts to hold this_object.  If the positionis undefined (ie: not specified) then it will try and choose a limbby itself.<p>The return numbers are the limb numbers that were used by holding theitem.<p>hold_item: As designed by Tannah!",}),"param":({"who The living object trying to hold this one.","pos the position to hold the item in",}),"return":({"the an (int *) if successful or ({ }) if not enough limbs are freed",}),]),}),"set_holder":({({"int",}),({({"object",}),"ob",({"int",}),"limb",}),(["main":({"This method is called from the living object when we are held orunheld.",}),"param":({"ob the person holding us","limb the limb we are being held in",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"A nice file to allow you to setup an object as being holdable.  To dealwith this inheritable you only need to define the method held_this_itemif you wish to do anything when the item is held.",}),"started":({"Wed Feb  2 15:38:10 PST 2000",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/include/move_failures.h":962428284,])
class_docs ([])
file_name "/std/basic/holdable.c"
last_changed 1029422327
