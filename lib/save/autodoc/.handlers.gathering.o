#/secure/handlers/autodoc/autodoc_file.c
public_functions (["gather_item":({({"object","*",}),({({"string",}),"word",({"object",}),"player",}),(["main":({"This method attempts to gather some items in the environment ofthe specified player.",}),"see":({"query_item()","add_item()",}),"param":({"word the item to try and gather","player the player doing the gathering",}),"return":({"an array of gathered objects",}),]),}),"query_items":({({"mapping",}),({}),(["main":({"This method returns all of the current gatherable items.  It returnsthis as a mapping of a class, so probably not overly useful exceptfor debugging.",}),"see":({"query_item()","add_item()",}),"return":({"mapping of a locally defined class",}),]),}),"add_item":({({"void",}),({({"string",}),"name",({"string",}),"skill",({"int",}),"diff",({"int",}),"upper",({"mixed",}),"extra",({"string","*",}),"season",({"mixed",}),"quant",({"string",}),"ob",}),(["main":({"This method adds an item into the current list of gatherable items.",}),"see":({"query_item()","gather_item()",}),"param":({"name the name of the item to add","skill skill needed to find this item","diff taskmaster difficulty","upper taskmaster \"upper\" parameter","extra taskmaster \"extra\" parameter","season available season(s)","quant quantity (int or function pointer returning an int)","ob filename of object to be created",}),]),}),"query_item":({({"mixed",}),({({"string",}),"name",}),(["main":({"This method will return an array of the information associated withthe item.  The array consists of:<pre>  ({     skill,       // skill needed to find this item   (string)     difficulty,  // taskmaster difficulty            (int)     upper,       // taskmaster \"upper\" parameter     (int)     extra,       // taskmaster \"extra\" parameter     (mixed)     season,      // available season(s)              (string *)     quant,       // quantity (int or (int)(:\\<code\\>:)) (mixed)     ob           // filename of object to be created (string)   })</pre>",}),"see":({"add_item()",}),"param":({"name the name of the item to query",}),"return":({"the item array as detailed above.",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"Handler to handle the gathering of implicitly existingobjects that require some skill to find, such as herbs.Recognition (ie, knowing what it is once you've found it) may beadded later.<p>The data used for gathering comes from two places: the handler'sdatabase of gatherable items, and the room's local information.<p>The handler's database contains a class entry for each gatherable:<br><dl><dt> skill (string)<dd> The skill needed to find the item.<dt> difficulty (int)<dd> The taskmaster difficulty.<dt> upper (int)<dd> The taskmaster \"upper\" parameter.<dt> extra (mixed)<dd> The taskmaster \"extra\" parameter.<dt> season (string *)<dd> The seasons during which the gatherable is available (eg, plants).If this is unset, the default is all seasons.Note that, currently, it is the same season everywhere on the Disc.<dt> quant (int or function pointer returning an int)<dd> The quantity that will be gathered.  The function pointer ispassed three parameters: the room, the player, and the name of thegathered item.  This allows, for example, a function to be calledon the room to calculate the quantity, such as:<pre><br>    <code>(: $1->room_func($2, $3) :)</code></pre><dt> ob (string)<dd> The pathname of the object to be created.  If the object iscontinuous, the <i>amount</i> of ob is set to <i>quant</i>; otherwise,<i>quant</i> copies of the object are cloned.</dl><p>The room's local information is set when the gatherable is addedvia add_item(), and consists of:<p><dl><dt> item name (string or function pointer returning a string)<dd> The name that will be used to look up the gatherable in thehandler's database.  The function pointer is passed two parameterswhen evaluated: the room, and the player.<dt> scarcity (int or function pointer returning an int)<dd> The percent chance of finding any quantity of the gatherable.This is an additionalconstraint on finding the gatherable, in addition to any skillrequirements and quantity calculations.  A scarcity of 100 (the default)indicates no scarcity constraint.  A scarcity of 0 means that thegatherable will never be found.</dl>",}),"author":({"Jeremy",}),])
define_docs (["INIT_FILE":([]),])
includes (["/include/tasks.h":1059677152,"/include/weather.h":986801087,])
class_docs (["item_data":({0,({({"skill",({"string",}),}),({"difficulty",({"int",}),}),({"upper",({"int",}),}),({"extra",({"mixed",}),}),({"season",({"string","*",}),}),({"quant",({"mixed",}),}),({"ob",({"string",}),}),}),([]),}),])
file_name "/handlers/gathering.c"
last_changed 1000618210
