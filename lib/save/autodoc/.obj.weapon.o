#/secure/handlers/autodoc/autodoc_file.c
public_functions (["add_immune":({({"int",}),({({"string",}),"name",}),([]),}),"query_weapon":({({"int",}),({}),(["main":({"This method return true if it is a weapon.",}),"return":({"always returns 1",}),]),}),"set_wield_func":({({"void",}),({({"string",}),"func",({"mixed",}),"ob",}),(["main":({"This method sets the wield function of the object.  This will becalled when the object is wielded and unwielded.",}),"param":({"func the function to call","ob the object to call the method on",}),]),}),"query_money":({({"int",}),({({"string",}),"type",}),([]),}),"query_full_value":({({"int",}),({}),([]),}),"remove_immune":({({"int",}),({({"string",}),"name",}),([]),}),"query_money_array":({({"mixed","*",}),({}),([]),}),"new_weapon":({({"void",}),({({"int",}),"new_condition",}),(["main":({"This method setups the weapon with the new condition.  It sets themaximum and lowest conditions to the specified condition.",}),"param":({"new_condition the condition value of the weapon",}),]),}),"query_value":({({"int",}),({}),([]),}),"hit_weapon":({({"void",}),({({"int",}),"amount",({"string",}),"type",}),([]),}),"modify_damage":({({"int",}),({({"int",}),"val",({"string",}),"name",}),([]),}),"query_hilt":({({"string",}),({}),(["main":({"This method returns the hilt name of the weapon.This is used by some of the attack messages.Feel free to overwrite this in your weapon files.",}),"return":({"the short description of the hilt - defaults to \"hilt\"",}),]),}),])
protected_functions ([])
inherits (["/std/basic/holdable":({}),"/std/basic/condition":({}),"/std/weapon_logic":({}),"/std/object":({}),])
main_docs (["main":({"ok.... now we start thinking about the strange things...  We have several points we want to implement...  1)  A much wider range of damages.  2)  A \"To hit\" and \"damage\" rolls being seperate things         But are still related.  ie a good hit will do more damage Implementation...   Ok, here goes.   The being hit players ac is taken based on the   attack type, the ac will be returned as a base (not randomised)   and a randomised amount...  This will be used to calculate the   cute number we need.  Once we have the number we create the   \"To hit\" roll for the weapon.  Subtracting of this from our   ac number tells us weather or not we hit...  If we have hit   We take the amount we hit by (after subtracting off the   \"To hit bonus\") and add it too the extra damge that is done   All this is kept in an array, there can be more than one   attack in the array.  They can be connected together in   several ways, 1) follow on after attack one did more that x   points of damage.  2) have a percentage chance of working   each attack.   A standard set of attacks are defined in /std/weapon_handler   please see that file for more detailsModified 18/5/93 by Piecemaker to remove octarine descriptions for non                               wizards.",}),])
define_docs ([])
includes (["/include/weapon.h":962428284,"/include/move_failures.h":962428284,])
class_docs ([])
file_name "/obj/weapon.c"
last_changed 1056736567
