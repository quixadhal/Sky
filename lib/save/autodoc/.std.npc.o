#/secure/handlers/autodoc/autodoc_file.c
public_functions (["remove_chat_string":({({"void",}),({({"mixed",}),"chat",}),(["main":({"This method attempts to remove the given chat string from thecurrent list of chat strings.  The chat message is checkedto see if it exists in the array, the weighting of thestring is ignored.",}),"see":({"add_chat_string()","load_chat()",}),"param":({"chat the chat string to remove",}),]),}),"set_aggressive":({({"void",}),({({"int",}),"level",}),(["main":({"This method sets the current aggressive level of the NPC.If the aggressive is set to 1, then the NPC will attack all playersthat enter its environment.  If the aggressive is set to 2 thenthe NPC will attack everything (including other NPCs).<p>See the function start_attack() for information about things youcan do to stop an aggressive NPC from attacking things.",}),"param":({"level the new aggressive level",}),"see":({"query_aggressive()","start_attack()","set_join_fights()","set_throw_out()",}),]),}),"set_home_location":({({"void",}),({({"string",}),"loc",}),(["main":({"This method will set up a 'home' location for the NPC.This is the file name of the room the NPCshould return to whenever it is moved.It can be used to make unique NPCs returnsto their default location etc.",}),"param":({"loc the filename of the room to set as home",}),]),}),"do_follow_move":({({"void",}),({({"object",}),"who",({"string",}),"dir",}),(["main":({"This method is used to make the NPC follow after attackerswhen they leave the room.",}),"param":({"who the person we are chasing","dir the direction to follow them in",}),]),}),"query_chat_chance":({({"int",}),({}),(["main":({"This method returns the current chat chance for the NPC.",}),"see":({"set_chat_chance()","load_chat()",}),"return":({"the current chat chance",}),]),}),"get_item":({({"object",}),({({"string",}),"item",({"int",}),"cond",}),(["main":({"This method will fetch an item from the armoury and move it into the NPC.",}),"param":({"the item to get","the condition of the item",}),"return":({"the object of the new item",}),]),}),"query_fight_type":({({"int",}),({}),(["main":({"This method returns the flag which allows the NPC to join into fights.",}),"see":({"set_join_fights()","query_join_fight_type()",}),"return":({"1 if the NPC is to join fights, 0 if not",}),]),}),"add_language":({({"void",}),({({"string",}),"lang",}),(["main":({"This method adds a language to the NPC.",}),"param":({"lang the language to add",}),]),}),"query_chats_off":({({"int",}),({}),(["main":({"This method queries whether or not the chats of the NPChave been turned off.",}),"return":({"1 if the chats are off, 0 if chats are on",}),]),}),"run_away":({({"int",}),({}),(["main":({"This method is used to make the NPC run away.  This will becalled by the combat code for wimpy when the NPC is bellow thenumber of points used to trigger the wimpy action.",}),"return":({"1 if successfuly ran away",}),]),}),"query_home_location":({({"string",}),({}),(["main":({"This method will return the NPC's home location.",}),"return":({"the home location",}),]),}),"query_level":({({"int",}),({}),(["main":({"This method returns the level of the NPC.",}),"see":({"basic_setup()",}),"return":({"the level of the NPC",}),]),}),"delete_queued_commands":({({"void",}),({}),(["main":({"This method throws away any queued commands.It doesn't remove the call_out, however if nonew commands are added there will be no effect.",}),"see":({"init_equip()","init_command()","delay_command()","do_command()","queue_command()",}),]),}),"set_greeting":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method sets up the greeting strings to use whensomeone enters the room the NPC is in.This is useful for shopkeepers and more unique NPCs.$ob$ in greeting strings will be replaced withthe people that are being greeted.To use a greeting in form of a soul command, pleaseuse an \"@\" in front of the greeting string. Soul greetingswill be called on each person individually, and it ispossible to set up random souls by separating differentsoul commands by a \":\" in the greeting string (see example).It is also possible to use a function instead of a stringgreeting.  The function can either be a functionpointer or a string of the following format -\"#file_name:function\", and will then be called withthe following arguments - the thing (object) doingthe greeting, and the array of objects to greet.NOTE : The NPC will only greet those livings he can see,and that are not ghosts or otherwise dead.",}),"param":({"str the greeting or array of greetings to use",}),"example":({"set_greeting( ({\"Greetings, $ob$!\", (: do_greet :) }) );","set_greeting( ({\"'Hello $ob$!\", \"#\"+PUB+\"pub:do_greet\"}) );","set_greeting(\"@salute $ob$:bow $ob$:bing $ob$\");",}),]),}),"load_chat":({({"void",}),({({"int",}),"chance",({"mixed",}),"data",}),(["main":({"This method loads up the chat strings for the NPC.  This will bean array containing pairs of elements, the first pair is theweighting of the chat and the second is the chat to use.<p>All the weights in the array are added up and then a randomnumber is chosen in the weighting.  Then that element is lookedup in the array.  This way you can control a chat and make itrare.<p>If the chat string is an array then this a story, the story will beexecuted one after another and no other chats will be executedin between.  The chat chance is still used to determine when thechats will occur. Special strings can be used which will replace withobject names, see expand_mon_string() for further information.<p>The chat chance is a chance (in 1000) of the chat occuring.  Youwill need to play with this yourself to see which frequency ofchatting you wish for your NPC.",}),"param":({"chance the chance in 1000 of a chat working every 2 seconds","data the chats and chat weights to use",}),"see":({"expand_mon_string()","load_a_chat()","query_chat_chance()","query_chat_string()",}),"example":({"load_chat(60,   ({      1, \"'I am a chicken!\",      // Make this one more likely to occur.      2, \":clucks like a chicken.\"      1, \":pecks at $lpossshort$ foot.\"    }));","load_chat(100,   ({      1, \"'I am a simple farmer.\"      1, \":waves $mposs$ pitchfork around.\"      // A story, they will always occur in this order      1, ({           \"'Once upon a time there was a rabbit.\",           \"'It was a nice rabbit and hung around in bars.\",           \"'It sung little songs about fruit.\",          }),     }));",}),]),}),"event_fight_in_progress":({({"void",}),({({"object",}),"me",({"object",}),"him",}),(["main":({"This event is called when a fight is in progress.  It willbe used for things like joining into currently runningfights and initiating combat with spell casters.",}),"param":({"me the person initiating the attack","him the person being attacked",}),]),}),"query_join_fights":({({"string",}),({}),(["main":({"This method returns the message to use when joining into fights.",}),"see":({"set_join_fights()","set_join_fight_type()",}),"return":({"the message to print when joining a fight",}),]),}),"do_move":({({"void",}),({({"string",}),"move",}),(["main":({"This method causes the NPC to move in the given direction.",}),"param":({"move the direction to move in",}),]),}),"query_achat_string":({({"mixed",}),({}),(["main":({"This method queries the current aggressive chat strings for the NPC.The return value is an array of three elements where thefirst member is the sum of the weights of all chats, thesecond member contains the weights of chats, and the thirdmember contains the chat strings.chat string is formatted.",}),"see":({"load_chat()","query_chat_string()",}),"return":({"the current chat strings",}),]),}),"set_chat_chance":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the current chat chance for the NPC.",}),"see":({"load_chat()","query_chat_chance()",}),"param":({"i the chat chance",}),]),}),"query_enter_commands":({({"string","*",}),({}),(["main":({"This method returns the current array of enter commands.",}),"see":({"reset_enter_commands()","add_enter_commands()",}),"return":({"the current array of enter commands",}),]),}),"add_chat_string":({({"varargs","void",}),({({"mixed",}),"weight",({"mixed",}),"chat",}),(["main":({"This method adds an array of chats or a single chat string intothe current list of chat strings.  See load_chat() for a longerdescription of the chat string.",}),"see":({"load_chat()","remove_chat_string()",}),"param":({"weight the weight of the chat, or an array of weights and chats","chat the new chat string",}),]),}),"set_follow_speed":({({"void",}),({({"int",}),"speed",}),(["main":({"This method sets the speed at which the NPC will followafter a player, when they leave combat.",}),"see":({"query_follow_speed()",}),"param":({"speed the new follow speed",}),]),}),"check_env":({({"int",}),({}),(["main":({"This method checks to see if there are any players in the environmentof the NPC.  This should be used to determine if chats shouldbe turned off and other things which should only work in thepresence of players.",}),"return":({"1 if there is a player in the room, 0 if not",}),]),}),"set_join_fight_type":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the flag which allows the NPC to join into fights.If this is set to a non-zero value then the NPC will join intofights in progress using the fight joining message.",}),"see":({"set_join_fights()","query_join_fight_type()",}),"param":({"i 1 if the npc is to join fights, 0 if not",}),]),}),"event_disarm":({({"void",}),({({"object",}),"disarmer",({"object",}),"weapon",}),(["main":({"This function makes the more intelligent NPCs pick up theirweapons after being disarmed.It can be overwritten if you don't want the default disarmresponse to work for your NPC.",}),"param":({"disarmer the person who disarmed us","weapon the weapon that was disarmed",}),]),}),"query_following_route":({({"string","*",}),({}),(["main":({"This method returns the current array of directions we are followingas a route.",}),"see":({"get_next_route_direction()","do_route_move()",}),]),}),"query_combat_actions":({({"mixed",}),({}),(["main":({"This method returns the current array of combat actions on theNPC.<p>The array will have the format of:<pre>   ({       total_chance,       action1_chance,       action1_name,       action1_action,       ...    })</pre>",}),"see":({"add_combat_action()","remove_combat_actions()","/std/effects/fighting/combat.c",}),"return":({"the combat action array",}),]),}),"do_route_move":({({"void",}),({}),(["main":({"This method moves the NPC one more location along the route itis following.",}),"see":({"query_following_route()","get_next_route_direction()",}),]),}),"set_join_fights":({({"void",}),({({"string",}),"str",}),(["main":({"This method sets the message to use when joining into fights.",}),"see":({"query_join_fights()","set_join_fight_type()",}),"param":({"str the message to print when joining a fight",}),]),}),"init_command":({({"varargs","void",}),({({"string",}),"str",({"int",}),"tim",}),(["main":({"This method allows you submit delayed commands to the NPC via a call_out.",}),"see":({"do_command()","queue_command()","delay_command()",}),"param":({"str the action to perform","tim the time delay after which to perform the action",}),]),}),"add_move_zone":({({"void",}),({({"mixed",}),"zone",}),(["main":({"This method adds a move zone onto the NPC.  The move zones controlwhich areas the NPC will wander into, a move zone is set on theroom and the NPC will only enter rooms which have a matchingmove zone.  If there is no move zone, then the NPC will enterany room.<p>If the parameter is an array each of the elements of the arraywill be added as a move zone.",}),"see":({"remove_move_zone()","query_move_zones()","set_move_after()","do_not_wander()",}),"param":({"zone the zone(s) to add",}),]),}),"query_cannot_change_position":({({"int",}),({}),(["main":({"This method returns the current value of the unable to changeposition flag.",}),"see":({"/std/living/living->set_default_position()",}),"return":({"the unable to change position flag",}),]),}),"do_command":({({"int",}),({({"string",}),"words",}),(["main":({"This method allows you to control the NPC and get it to doactions.  This can be used for NPC control and intelligence.",}),"see":({"init_equip()","init_command()",}),"param":({"words the action to preform",}),"example":({"ob = clone_object(NICE_HAIRY_APE);ob->do_command(\"'I am a hairy ape!\");ob->do_command(\"emote apes around the room.\");",}),]),}),"add_enter_commands":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds a command to be called whenever the npc entersa room.  If the command is a string, then it will be executedas if they had typed it.  If it is a function then the functionwill be evaluated and one argument (the NPC itself) will be passedin.",}),"see":({"reset_enter_commands()","query_enter_commands()",}),"param":({"str the enter commands to add",}),]),}),"set_unique":({({"void",}),({}),(["main":({"This method sets the unique propety on the NPC.Unique NPCs give no xp when killed and will generateinforms when dying amongst other things.",}),]),}),"delay_command":({({"int",}),({({"string",}),"words",({"int",}),"interval",}),(["main":({"This method allows you to control the NPC and get it to doactions where they are queued as for players.   The commandis always delayed by delay even if there are no commands pendingunlike queue_command(). This functionis 100% compatible with queue_command() and init_command().",}),"see":({"queue_command()","query_queued_commands()","init_command()","do_command()",}),"param":({"words the action to perform","interval to wait before the command.",}),"example":({"ob = clone_object(NICE_HAIRY_APE);ob->delay_command(\"'I am a hairy ape!\", 10 );ob->delay_command(\"emote apes around the room.\", 2 );ob->queue_command(\"emote get banana.\", 3 );ob->queue_command(\"emote get apple.\");After 10 seconds it says \"I am a hariy ape\",2 seconds after that it apes around the room,immediately following that it gets a bananaand 3 seconds after that it gets an apple.",}),]),}),"query_follow_speed":({({"int",}),({}),(["main":({"This method queries the speed at which the NPC will followafter a player, when they leave combat.",}),"see":({"set_follow_speed()",}),"return":({"the current follow speed",}),]),}),"get_next_route_direction":({({"string",}),({}),(["main":({"This method gets the next direction to go in the route whichis currently being followed and will remove this directionfrom the array.",}),"see":({"query_following_route()","do_route_move()",}),"return":({"the next direction to go to",}),]),}),"load_a_chat":({({"void",}),({({"int",}),"chance",({"mixed",}),"data",}),(["main":({"This method loads up the set of chat strings to use while in combat.",}),"see":({"load_chat()","query_achat_chance()","query_achat_string()",}),"param":({"chance the chance of the chat occuring","data the chat strings and weights to use",}),]),}),"query_chat_string":({({"mixed",}),({}),(["main":({"This method queries the current chat strings for the NPC.The return value is an array of three elements where thefirst member is the sum of the weights of all chats, thesecond member contains the weights of chats, and the thirdmember contains the chat strings.chat string is formatted.",}),"see":({"load_chat()","query_chat_string()",}),"return":({"the current chat strings",}),]),}),"heart_beat":({({"void",}),({}),(["main":({"The main heart beat function.  This is called by the driverevery 2 seconds.  Does all the maintenance stuff like fixingup hps, greeting people and stuff like that.",}),]),}),"query_current_language":({({"string",}),({}),(["main":({"This method returns the current language of the NPC.",}),"return":({"the current language",}),]),}),"remove_move_zone":({({"void",}),({({"mixed",}),"zone",}),(["main":({"This method removes a move zone from the NPC.",}),"see":({"add_move_zone()","query_move_zones()","set_move_after()",}),"param":({"zone the zone(s) to remove",}),]),}),"set_random_stats":({({"void",}),({({"int",}),"min",({"int",}),"max",}),(["main":({"This method sets the stats for the NPC to some exciting randomvalues.",}),"param":({"min the minimum value of stats","max the maximum value of stats",}),]),}),"set_chats_off":({({"void",}),({({"int",}),"i",}),(["main":({"This method can be used to turn the chats of the NPC on/off.",}),"param":({"i 1 to turn the chats off, 0 to turn them on",}),]),}),"add_combat_action":({({"void",}),({({"int",}),"chance",({"string",}),"name",({"mixed",}),"action",}),(["main":({"This method adds a combat action to the NPC.  This is an action whichhas a chance of occuring during combat.  The name is an identifierwhich can be used to remove the action with later.  The actionitself can be a string, then that command will be executed.  Ifthe action is a function pointer then it will be evaluated withtwo arguments, the first being the attacker, the second being thetarget.<p>If the action is an array, if it is one element then the functionspecified will be called on the attacked with the same argumentsas above.  If the size of the array is two then the function willbe called on the specified object with the arguments as above.",}),"see":({"remove_combat_action()","query_combat_actions()","/std/effects/fighting/combat.c",}),]),}),"add_achat_string":({({"varargs","void",}),({({"mixed",}),"weight",({"mixed",}),"chat",}),(["main":({"This method adds an array of attack chats or a single attack chatstring into the current list of achat strings.See load_chat() for a longer description of the chat string.",}),"see":({"load_chat()","load_a_chat()","remove_achat_string()",}),"param":({"weight the weight of the chat, or an array of weights and chats","chat the new chat string",}),]),}),"query_always_return_to_default_position":({({"int",}),({}),(["main":({"This method returns the status of the flag that makes the NPC returnto the default position if its position is changed.  The flagspecifies the length of time to wait before causing thedefault position to be restored.",}),"see":({"/std/living/living->return_to_default_position()","set_always_return_to_default_position()",}),"return":({"the time to wait before the position is restored",}),]),}),"query_queued_commands":({({"mixed",}),({}),(["main":({"This method returns the queued command list.",}),"see":({"init_equip()","init_command()","delay_command()","do_command()","queue_command()",}),]),}),"init_equip":({({"void",}),({}),(["main":({"This method makes the NPC to equip whatever they have.",}),"see":({"do_command()",}),]),}),"query_death_xp":({({"int",}),({}),(["main":({"This method returns the amount of death experiecne that would begained by killing the NPC.",}),"return":({"the amount of death experience for the npc",}),]),}),"set_achat_chance":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the current aggressive chat chance the NPC.",}),"see":({"load_chat()","load_achat()","query_achat_chance()",}),"param":({"i the attack message chat chance",}),]),}),"expand_string":({({"string",}),({({"string",}),"in_str",({"object",}),"on",}),(["main":({"This method is used to expand the message strings used in thenpc messages.  It is used for chat strings and such things likethat.  The strings it expands are of the form:<br>$lname$, $mname$, $aname$, $itheshort$ ...<br>The first letter determines the type of object being referenced.They are:<dl><dt>m<dd>Me!  The NPC itself.<dt>l<dt>A random living object in the NPC's environment.<dt>i<dt>A random interactive object (player) in the NPC's environment.<dt>a<dd>Chooses a random attacker from those attacking the NPC.<dt>o<dd>Choose a random object in the inventory of the NPC.</dl>After the first letter is a type of information being request.<dl><dt>name<dd>The name of the selected object.<dt>cname<dd>The capitalised name of the selected object.<dt>gender<dd>The gender string of the selected object (male, female, neuter).<dt>poss<dd>The possessive string of the selected object.<dt>obj<dd>The objective string of the selected object.<dt>pronoun<dd>The pronoun string of the selected object.<dt>gtitle<dd>The guild title of the selected object (only useful on livings).<dt>ashort<dd>The a_short() call.<dt>possshort<dd>The poss_short() call.<dt>theshort<dd>The the_short() call.<dt>oneshort<dd>The one_short() call.</dl>",}),"param":({"in_str the input string","on the object to use for the 'o' matching",}),"see":({"set_chat_string()","expand_mon_string()",}),]),}),"reset_enter_commands":({({"void",}),({}),(["main":({"This method resets the array of enter commands back to nothing.",}),"see":({"add_enter_commands()","query_enter_commands()",}),]),}),"query_move_after":({({"int","*",}),({}),(["main":({"This method returns the current move after values.It returns an array of the form:<pre>   ({     after,     rand,    })</pre>",}),"see":({"set_move_after()",}),"return":({"the move after values",}),]),}),"set_move_after":({({"void",}),({({"int",}),"after",({"int",}),"rand",}),(["main":({"This method sets the speed at which the NPC will randomlywander around.  The NPC will wander at the speed:<pre>speed = after + random(rand)</pre>This is called every time the NPC sets up for its next move.<p>The move zones control which areas the NPC will wander into,a move zone is set on the room and the NPC will only enterrooms which have a matching move zone.  If there is no movezone, then the NPC will enter any room.",}),"see":({"remove_move_zone()","query_move_zones()","add_move_zone()","do_not_wander()",}),"param":({"after the fixed amount of time","rand the random amount of time",}),]),}),"query_greetings":({({"string","*",}),({}),(["main":({"This method queries the greetings of the NPC,if there are any set.",}),"return":({"the greetings array",}),]),}),"remove_achat_string":({({"void",}),({({"mixed",}),"chat",}),(["main":({"This method attempts to remove the given chat string from thecurrent list of attack message chat strings.  The chat messageis checked to see if it exists in the array, the weighting ofthe string is ignored.",}),"see":({"add_achat_string()","load_chat()","load_achat()",}),"param":({"chat the chat string to remove",}),]),}),"queue_command":({({"varargs","int",}),({({"string",}),"words",({"int",}),"interval",}),(["main":({"This method allows you to control the NPC and get it to doactions where they are queued as for players.  If there are nocommands pending the command is executed immediately.  This functionis 100% compatible with delay_command() and init_command().",}),"see":({"delay_command()","query_queued_commands()","init_command()","do_command()",}),"param":({"words the action to perform","interval the time to wait before processing another commandIf omitted defaults to 2 seconds as per players",}),"example":({"ob = clone_object(NICE_HAIRY_APE);ob->queue_command(\"'I am a hairy ape!\");ob->queue_command(\"emote apes around the room.\", 5 );ob->queue_command(\"get banana\", 10 );ob->delay_command(\"emote get apple.\", 3 );Right away it says \"I am a hairy ape\",2 seconds later it apes around the room,5 seconds after that it gets a bananaand 13 seconds (10+3) after that it gets an apple.",}),]),}),"move_me_to":({({"varargs","void",}),({({"string",}),"dest",({"int",}),"delay",}),(["main":({"This method will move the NPC to the specified destination.  TheNPC will walk from where they currently are to the destination usingthe time delay specified between the movements.<p>If the location is reached then the function \"stopped_route\" willbe called on the npc.  The first argument to the function willbe 0 if the npc did not reach its destination and 1 if it did.",}),"see":({"get_next_route_direction()","got_the_route()","query_following_route()","do_route_move()",}),"param":({"dest the destination to go to","delay the time delay between each move",}),"example":({"inherit \"/std/npc\";void go_home() {   move_me_to(HOME_LOCATION, 2);} /* go_home() */void stopped_route(int success) {   if (success) {      do_command(\"emote jumps for joy.\");   } else {      do_command(\"emote looks sad and lost.\");   }} /* stopped_route() */",}),]),}),"query_move_zones":({({"string","*",}),({}),(["main":({"This method returns the current list of move zones on the NPC",}),"see":({"add_move_zone()","remove_move_zones()","set_move_after()",}),"return":({"the current list of move zones",}),]),}),"start_attack":({({"void",}),({({"object",}),"who",}),(["main":({"This method check to see if the NPC should start attacking someonewhen they enter the NPC's environment.  It is called from insideinit().  The NPC will only attack if the agressive is set and theperson is visible to be attacked.  The property<pre>\"no attack\"</pre> can be set on the npc (or player) tostop them being attacked.",}),"see":({"set_aggressive()",}),"param":({"who the person to potentially start attacking",}),]),}),"query_achat_chance":({({"int",}),({}),(["main":({"This method returns the current attack chat chance for the NPC.",}),"see":({"set_achat_chance()","load_chat()","load_a_chat()",}),"return":({"the current chat chance",}),]),}),"query_ok_turn_off_heart_beat":({({"int",}),({}),(["main":({"This method returns 1 if it is ok to turn of the NPC's heart beat.This can be overridden for times when the heart beat needs to bekept on for some reason.",}),"return":({"1 if the heart beat should go off, 0 if it should stay on",}),]),}),"set_language":({({"int",}),({({"string",}),"lang",}),(["main":({"This method sets the current language of the NPC.",}),"param":({"lang the language to set as current",}),]),}),"set_death_xp":({({"int",}),({({"int",}),"amount",}),(["main":({"This method sets the amount of death experience that would begained by killing the NPC.",}),]),}),"do_not_wander":({({"int",}),({}),(["main":({"This method can be temporarily overwritten in NPCs to stop themwandering under certain circumstances.  For example if someone isfighting in the room with the NPC, and we want the NPC to watch.Alternatively to overwriting the function, you can set a \"no wander\"property on the NPC.",}),"return":({"should return 1 if we don't want to wander",}),]),}),"basic_setup":({({"void",}),({({"string",}),"race",({"int",}),"level",({"mixed",}),"gender",}),(["main":({"This method sets up the basic abilities and race of the critter.",}),"param":({"race this is the race of the character.  It should bea race that's understood by the /std/race.c","level this is the level of the NPC.  The number is usedby the race object to set ability scores.","gender this is the gender of the NPC.  It can be either anumber ( 0 - neuter, 1 - male or 2 - female ) or a string (\"neuter\",\"male\", \"female\")",}),"see":({"query_race()","query_level()","query_gender()",}),"example":({"basic_setup(\"human\", 200, \"male\");",}),]),}),"remove_combat_action":({({"int",}),({({"string",}),"name",}),(["main":({"This method will remove the combat action with the specified name.",}),"see":({"add_combat_action()","query_combat_actions()","/std/effects/fighting/combat.c",}),"return":({"1 if it is found and removed, 0 if not",}),]),}),"set_cannot_change_position":({({"void",}),({({"int",}),"flag",}),(["main":({"This method sets the value of the unable to change position flag.This flag will be checked by the soul, and by anything else whichdeliberatly changes someones position.",}),"see":({"/std/living/living->set_default_position()",}),"param":({"flag the unable to change position flag",}),]),}),"expand_mon_string":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method executes the string passed in.  It handles all thestuff which is needed from the chat_string stuff.If the input is a function pointer then it is evaluated with oneparameter, being the NPC.If the input is a string then the first letter determines what willbe done with it.  All these are passed through expand_stringso that exciting things can be done.<ul><li># - A call_other will be generated.  The parameters are separated by':'s, so \"#bing:fred:chicken\" would call<pre>TO->bing(\"fred\", \"chicken\");</pre>.<ul>', \", : - These will generate a 'say', 'lsay' or 'emote'.<ul>@ - This will run the passed in command.  Eg: \"@frog\" would cause the    soul command frog to be used.<ul>Anything else will be used as a message to be sent to everyone in the    room.</ul>",}),"see":({"expand_string()",}),"param":({"str the thing to execute",}),]),}),"do_move_after":({({"void",}),({({"int",}),"running_away",}),(["main":({"This is called when the NPC decides it must continue downa certain route.  This will be called by the wander handlerand can be used to force the NPC to wander along a routefaster.",}),"see":({"set_move_after()","do_not_wander()",}),"param":({"running_away this is 1 if the npc is running away",}),]),}),"set_always_return_to_default_position":({({"void",}),({({"int",}),"tim",}),(["main":({"This method sets the status of the flag that makes the NPC returnto the default position if its position is changed.  The flagspecifies the length of time to wait before causing thedefault position to be restored.",}),"see":({"/std/living/living->return_to_default_position()","query_always_return_to_default_position()",}),"param":({"tim the time to wait before the position is restored",}),]),}),"query_aggressive":({({"int",}),({}),(["main":({"This method returns the current aggressive level of the NPC.If the aggressive is set to 1, then the NPC will attack all playersthat enter its environment.  If the aggressive is set to 2 thenthe NPC will attack everything (including other NPCs).<p>See the function start_attack() for information about things youcan do to stop an aggressive NPC from attacking things.",}),"see":({"set_aggressive()","start_attack()",}),"return":({"the aggressive level of the NPC",}),]),}),])
protected_functions (["got_the_route":({({"void",}),({({"string","*",}),"route",({"int",}),"delay",({"string",}),"dest",}),(["main":({"This method is called by the move_me_to function after theroute handler has successfuly discovered the route to follow.",}),"see":({"move_me_to()",}),"param":({"route the route to follow","delay the delay to follow it with","dest route destination",}),]),}),])
inherits (["/global/player/new_parse":({}),"/std/living/living":({}),"/std/living/response_mon":({}),"/global/player/guild-race":({}),])
main_docs (["main":({"This is the main NPC inheritable.",}),"author":({"Pinkfish",}),"change":({"Modified to properly work on Divided Sky andfixed skills/stats - Sandoz, 20th July 2001.",}),"see":({"/std/npc/npc_base",}),])
define_docs ([])
includes (["/include/top_ten_tables.h":962428284,"/include/player.h":1036911799,"/include/route.h":962428284,"/secure/include/skills.h":1118932470,"/include/playtesters.h":1020949410,])
class_docs (["chat_data":({0,({({"chance",({"int",}),}),({"total_w",({"int",}),}),({"weight",({"int","*",}),}),({"chats",({"mixed",}),}),({"last_chat",({"int",}),}),}),([]),}),])
file_name "/std/npc.c"
last_changed 1098174880
