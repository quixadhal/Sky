#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_language_written_skill":({({"string",}),({({"string",}),"lang",}),(["main":({"The skill for the written language.  This gets the skill name in the skilltree for the written part of the language.",}),"param":({"lang the language to get the skill of",}),"return":({"the skill name",}),]),}),"query_language_size":({({"int",}),({({"string",}),"lang",}),(["main":({"This method returns the size of the language (used by add_read_mess()).Some languages have bigger letters and stuff than others.",}),"see":({"/std/basic/read_desc->add_read_mess()",}),"param":({"lang the language to get the size of",}),"return":({"the size of each letter in standard handwriting",}),]),}),"query_flags":({({"int",}),({({"string",}),"name",}),(["main":({"Return all the flags for the language.",}),"see":({"/include/language.h",}),"param":({"name the language to get the flags of",}),"return":({"all the flags",}),]),}),"garble_say":({({"mixed",}),({({"string",}),"lang",({"string",}),"start",({"string",}),"mess",({"object",}),"player",({"object",}),"from",({"string",}),"type",}),(["main":({"This garbles a say.  Called from the events class to garble the textthat players see.  This looks up the garble object and calls thecorrect function on it.  The returned array contains thegarbled start and message.",}),"param":({"lang the language spoken in","start the start bit","mess the message itself","player the player hearing","from the player speaking","type 'say', 'tell', 'shout' etc",}),"return":({"an array <code>({ start, mess })</code>",}),]),}),"query_language_spoken":({({"int",}),({({"string",}),"str",}),(["main":({"Determine if the language is spoken.",}),"param":({"str the language name to test",}),"return":({"1 if the language is spoken, 0 if it is not",}),]),}),"query_language_magic":({({"int",}),({({"string",}),"str",}),(["main":({"Determine if it is a magical language.A magical langage gets a function called on it's object whenever itis read even if the person knows the language.  It is also the languagespells are written in.",}),"param":({"str the language to test",}),"return":({"1 if it is magical, 0 if it is not",}),]),}),"test_language":({({"int",}),({({"string",}),"str",}),(["main":({"Determine if this is a language.",}),"param":({"str the language to check",}),"return":({"1 if it is a language, 0 if it s not",}),]),}),"query_language_distance":({({"int",}),({({"string",}),"str",}),(["main":({"Determine if the language is spoken.Distance languages can be used with tell and shout.",}),"param":({"str the language name to test",}),"return":({"1 if it is distance language, 0 if it is not",}),]),}),"query_languages":({({"string","*",}),({}),(["main":({"Names of all the languages.",}),"return":({"the names of all the languages",}),]),}),"query_language_spoken_skill":({({"string",}),({({"string",}),"lang",}),(["main":({"The skill for the spoken language.  This gets the skill name in the skilltree for the spoken part of the language.",}),"param":({"lang the language to get the skill of",}),"return":({"the skill name",}),]),}),"garble_text":({({"string",}),({({"string",}),"lang",({"mixed",}),"text",({"object",}),"thing",({"object",}),"player",}),(["main":({"Garble written text.  This is the same as garble_say, but it works on writtentext.",}),"param":({"lang the language written in","text the text which has been written","thing the thing which is written on","player the player doing the reading",}),"return":({"the garbled text as a string",}),]),}),"query_language_written":({({"int",}),({({"string",}),"str",}),(["main":({"Determine if the language is written.",}),"param":({"str the language name to test",}),"return":({"1 if the language is written, 0 if it is not",}),]),}),"query_garble_object":({({"string",}),({({"string",}),"name",}),(["main":({"Figure out the garble object.  This returns the garble object for thelanguage.  The garble object is used to modify the text so thatplayer does not see plain text if they do not know the language.",}),"param":({"name the language to get the garble object for",}),"return":({"the garble object",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"The language handler.  This will keep track of the info on languagesEach language can be a written language or a spoken language and havea garble object.<p>The function garble_say, garble_tell, garble_shout andgarble_written shoud be defined on the garbling object.They should return the entire string to print.  So if theroutine returns 0 nothing is printed.",}),"author":({"Pinkfish",}),])
define_docs (["REPLACEMENTS":([]),"L_NEW":([]),])
includes (["/include/language.h":980398293,])
class_docs ([])
file_name "/handlers/languages.c"
last_changed 1059916039
