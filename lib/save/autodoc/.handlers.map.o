#/secure/handlers/autodoc/autodoc_file.c
public_functions (["change_co_ords":({({"void",}),({({"string",}),"dir",({"string",}),"room",({"int","*",}),"coord",}),(["main":({"This method changes the coordinates of the room.",}),"param":({"dir the directory to change the coordinates in","room the room to change the coordinates for","coord the new coordinates for the room",}),]),}),"query_short":({({"string",}),({({"string",}),"room",}),(["main":({"This method returns the short description of the room.  This will returnthe short description of named cloned objects as well as attempting toforce the room to load if it is not found in the internalcache.",}),"param":({"room the room to return the short description of",}),]),}),"set_cluster":({({"void",}),({({"string",}),"room",({"int",}),"cluster",}),(["main":({"This method sets the cluster number for the specified room.",}),"see":({"query_cluster()",}),"param":({"room the room to set the cluster number for","cluster the new cluster number",}),]),}),"change_shorts":({({"void",}),({({"string",}),"dir",({"string",}),"room",({"string",}),"sh",}),(["main":({"This method changes the short description for the room and directory.",}),"see":({"query_shorts()",}),"param":({"dir the directory to change the short in","room the room to change the short in","sh the short description for the room",}),]),}),"static_query_co_ord":({({"int","*",}),({({"string",}),"room",}),(["main":({"This method will return the coordinates of the room only using theinternal map information.",}),"param":({"room the room to get the coordinates of",}),"return":({"the coordinates of the room, 0 on failure",}),]),}),"query_queue":({({"string","*",}),({}),(["main":({"This method returns the current quere stores in the map handler.  Thequeue is a list of rooms waiting to be processed into the maphandler.",}),"return":({"the current queue",}),]),}),"queue_room":({({"varargs","void",}),({({"string",}),"room",({"int",}),"force",({"string",}),"reason",}),(["main":({"This method will queue the room without doing any tests.This should only be used by people who know what they are doingas it bypasses several checks.",}),"param":({"room the room to queue","force if it is forced to queue","reason the reason it was queued",}),]),}),"query_co_ord":({({"int","*",}),({({"string",}),"room",}),(["main":({"This method returns the coordinates for the specified room.  This willcause the room to load if possible to extract the coordinates.",}),"param":({"room the room the get the coordinates of",}),"return":({"the coordinates of the room, 0 on failure",}),]),}),"query_known":({({"int",}),({({"string",}),"room",}),(["main":({"This method returns true if the room is known of to the map handler.",}),"param":({"room the room to test for existance",}),"return":({"1 if it exists, 0 if it does not",}),]),}),"query_clusters":({({"mapping",}),({({"string",}),"dir",}),(["main":({"This method returns the current clusters for the specified dir.The returned mapping has keys of the room and the values arethe cluster number.",}),"see":({"change_clusters()",}),"param":({"dir the directory to return the clusters for",}),"return":({"the clusters mapping",}),]),}),"set_co_ord":({({"void",}),({({"string",}),"room",({"int","*",}),"coord",}),(["main":({"This method sets the coordinates for the specified room.",}),"see":({"query_co_ord()",}),"param":({"room the room to set the coordinates for","coord the coordinates to set the room to",}),]),}),"query_cache":({({"string","*",}),({}),(["main":({"This method returns the current cache stores in the map handler.",}),"see":({"update_cache()","clear_cache()",}),"return":({"the list of directories currently loaded",}),]),}),"query_movezones":({({"mapping",}),({({"string",}),"dir",}),(["main":({"This method returns all the move zones for the specified directory.This method returns a mapping whose keys are the rooms and thevalues are the movezones for that room.",}),"see":({"change_movezones()",}),"param":({"dir the directory to return the move zones for",}),"return":({"the movezones mapping",}),]),}),"query_changetimes":({({"mapping",}),({({"string",}),"dir",}),(["main":({"This method returns all the change times for the specified directory.The change times are the time at which the file was last changed.This method returns a mapping, the key of the mapping is theroom and the index of the mapping is the time at which it changed(an integer).",}),"see":({"change_changetimes()",}),"param":({"dir the directory to return the change times for",}),"return":({"the change times mapping",}),]),}),"compare_arrays":({({"int",}),({({"mixed","*",}),"ar1",({"mixed","*",}),"ar2",}),(["main":({"This method compares too arrays to see if they are the same.",}),"param":({"ar1 the first array to compare","ar2 the second array to compare",}),"return":({"1 if they are not the same, 0 if they are",}),]),}),"check_map":({({"void",}),({({"string",}),"room",}),([]),}),"query_destination":({({"string",}),({({"string",}),"exit",({"string",}),"room",}),(["main":({"This method returns the destination associated with the exit in theroom.",}),"see":({"query_dest_dir()",}),"param":({"exit the exit in the room to check","room the room in which to check for the exit",}),"return":({"the destination for the exit",}),]),}),"query_map":({({"mapping",}),({({"string",}),"dir",}),(["main":({"This method attempts to return the map for the current directory.  Thisreturns a mapping which contains an index being the room and theindicies are direction, destination pairs.<pre>([   file : ({             direction1,             destination1,             ...           }), ])</pre>",}),"see":({"update_cache()","change_map()",}),"param":({"dir the directory to load the information for",}),"return":({"the directions mapping",}),]),}),"clear_cache":({({"void",}),({}),(["main":({"This method completely clears the cache of all information.  This methodis used for debugging purposes.",}),"see":({"update_cache()",}),]),}),"change_clusters":({({"void",}),({({"string",}),"dir",({"string",}),"room",({"int",}),"cluster",}),(["main":({"This method change sthe current cluster for the given room.",}),"see":({"quert_clusters()",}),"param":({"dir the directory in which to change the room","room the room to change the cluster in","cluster the new value for the cluster of the room",}),]),}),"test_room":({({"int",}),({({"string",}),"room",}),(["main":({"This method tests to see if the specified room exists and is loadable.",}),"param":({"room the room to test for existance",}),"return":({"1 if it exists and 0 if it does not",}),]),}),"change_movezones":({({"void",}),({({"string",}),"dir",({"string",}),"room",({"string","*",}),"zones",}),(["main":({"This method changes the value of the move zones for the specifiedroom and directory.",}),"see":({"query_movezones()",}),"param":({"dir the directory to change the values in","room the room the change the values in","zones the new set of move zones",}),]),}),"query_sizes":({({"mapping",}),({({"string",}),"dir",}),(["main":({"This method will return the sizes for all the rooms in the directory.",}),"see":({"change_sizes()",}),"param":({"dir the directory to return the sizes mapping for",}),"return":({"the sizes mapping",}),]),}),"check_save_files":({({"void",}),({}),(["main":({"This method checks the save files in the directory to check to makesure all the rooms still exist in the game.",}),]),}),"change_changetimes":({({"void",}),({({"string",}),"dir",({"string",}),"room",({"int",}),"time",}),(["main":({"This method changes the current change time for the room in thedirctory.",}),"see":({"query_changetimes()",}),"param":({"dir the directory to change the room in","room the room to change","time the new change time for the room",}),]),}),"del":({({"void",}),({({"string",}),"dir",({"string",}),"room",}),(["main":({"This method deletes a room from the specified directory.",}),"param":({"dir the directory to delete the room from","room the room to delete",}),]),}),"query_room_size":({({"int","*",}),({({"string",}),"room",}),(["main":({"This method returns the size of the room, it will attempt to loadthe room if it is not in map handlers current rooms.",}),"param":({"room the room to find the size of",}),]),}),"do_room":({({"void",}),({({"string",}),"room",}),(["main":({"This method will decide if room should be checked, using the checks thatcan be done without loading the room, queue the check of this room.The callout is to alleviate a problem of too deep recursion errorseg. when the room to be checked it loaded because of a command like dragThis functions should NOT be private, since it's the fundamental interfacetoorooms.",}),"see":({"queue_room()",}),"param":({"room the room to check",}),]),}),"query_cluster":({({"int",}),({({"string",}),"room",}),(["main":({"This method returns the cluster number for the specified room.",}),"see":({"set_cluster()",}),"param":({"room the room to find the cluster for",}),"return":({"the cluster number for the room",}),]),}),"change_map":({({"void",}),({({"string",}),"dir",({"string",}),"room",({"string","*",}),"dd",}),(["main":({"This method changes the current values of the map values for thespecified room.",}),"see":({"query_map()",}),"param":({"dir the directory to change the values in","room the room to change the directory for","dd the array containing the direction, destination pairs",}),]),}),"set_stopped":({({"void",}),({({"int",}),"s",}),(["main":({"This method sets the stopped attribute of the map handler.If the stopped attribute is non-zero then the map handler willstop processing the currently queued rooms.",}),"param":({"s the new value of the stopped flag",}),]),}),"query_co_ords":({({"mapping",}),({({"string",}),"dir",}),(["main":({"This method returns the coordinates for the specified directory.The mapping containers keys of the room and the values are thecoordinates of the room.",}),"see":({"change_co_ords()",}),"param":({"dir the directory to return the coordinates for",}),"return":({"the coordinates mapping",}),]),}),"query_zones":({({"string","*",}),({({"string",}),"room",}),(["main":({"This method returns the move zones for the specified room.  It willload the room if it is not available in the map handlers cache.",}),"see":({"query_short()",}),"param":({"room the room to get the zones for",}),"return":({"the array of move zones for the room",}),]),}),"static_query_short":({({"string",}),({({"string",}),"room",}),(["main":({"This method returns the short description of the room only fromwithin the map handlers files.  This will not cause the roomto load and will not work on cloned file names.",}),"see":({"query_short()",}),"param":({"room the room to return the short description of",}),]),}),"query_shorts":({({"mapping",}),({({"string",}),"dir",}),(["main":({"This method will return all the shorts for the specified directory.The mapping returned has keys of the room names and values of theshort description of the room.",}),"see":({"change_shorts()",}),"param":({"dir the directory to return the shorts for",}),"return":({"the shorts descriptions mapping",}),]),}),"query_dest_dir":({({"string","*",}),({({"string",}),"room",}),(["main":({"This method returns the destination directory array for the specifiedroom.  This is equivilant to the method of the same name on /std/room.cReturns an array of ({ direction, destination, ... })",}),"param":({"room the room to return the destination direction array for",}),"see":({"/std/room->query_dest_dir()","query_destination()",}),"return":({"an array of direction, destination pairs",}),]),}),"change_sizes":({({"void",}),({({"string",}),"dir",({"string",}),"room",({"int","*",}),"size",}),(["main":({"This method changes the currently stored sizes for the room",}),"see":({"query_sizes()",}),"param":({"dir the direct to change the size in","room the room to change the size in","size the new size for the room",}),]),}),])
protected_functions (["update_cache":({({"void",}),({({"string",}),"directory",({"int",}),"load",}),(["main":({"This method goes through the cahce on the directory andremoves all the current references to the directory.  If theload parameter is non-zero then the directory is forced tobe reloaded even if it already exists.  If this parameter isnot set then the directory will only be loaded if it is notalready in the cache.<p>This method uses the functions in the map helper to set thevalues in all the internal variables.  It also swaps thespecified directory onto the end of the cache list, so itwill be removed later.",}),"see":({"clear_cache()","/obj/handlers/map_helper.c",}),"param":({"directory the directory to update","load should we force this to reload",}),]),}),])
inherits ([])
main_docs (["main":({"This contains information about all the rooms in the mud.  It is usedby things like the route handler to determine routes between twolocations.<p>As coded by Wodan and overhauled by Olorin and overhauled again by Wodan.and rewritten by OlorinThe thing is somehow improving though :)",}),"author":({"Wodan",}),])
define_docs ([])
includes (["/secure/include/config.h":1121841204,"/include/map_handler.h":1103288155,])
class_docs ([])
file_name "/handlers/map.c"
last_changed 1200761933
