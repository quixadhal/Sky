#/secure/handlers/autodoc/autodoc_file.c
public_functions (["set_silenced":({({"int",}),({}),(["main":({"This method silences the player.",}),"return":({"1 upon success, 0 upon failure",}),]),}),"query_creator":({({"int",}),({}),(["main":({"This method returns if the object is a creator or not.",}),"return":({"1 if the object is a creator, 0 if not",}),]),}),"query_activity_counter":({({"int",}),({}),(["main":({"Return the current value of this players activity_counter(used for debugging)",}),]),}),"save_with_auto_load":({({"void",}),({({"mixed",}),"al",}),([]),}),"adjust_max_deaths":({({"int",}),({({"int",}),"i",}),(["main":({"Changes the current number of maxium deaths.  This adjustthe number of times a player can die before they are totally dead.",}),"return":({"the current total maximum deaths",}),]),}),"query_title":({({"string",}),({}),(["main":({"This method returns the list of titles associated with this player.",}),"see":({"query_titles()","set_title()","remove_title()",}),"return":({"the list of titles",}),]),}),"restart_heart_beat":({({"int",}),({}),(["main":({"Restarts their heartbeat if it has been turned off for some reason.",}),"return":({"always returns 1",}),]),}),"query_last_log_on":({({"int",}),({}),(["main":({"This method returns the time at which the player last logged on.",}),"return":({"the last logged on time",}),]),}),"query_titles":({({"mapping",}),({}),(["main":({"This method returns the mapping of all the title associated with thisplayer.",}),"see":({"query_title()","set_title()","remove_title()",}),"return":({"the current mapping of titles",}),]),}),"query_old_enough_to_save":({({"nomask","int",}),({}),(["main":({"This method queries whether or not we are old enough to be saved.",}),"return":({"1 if we are old enough to save, 0 if too young",}),]),}),"query_monitor":({({"int",}),({}),(["main":({"Is the monitor turned on?  The hit point monitor which isdisplyed during combat...",}),"return":({"1 if it is on, 0 if not",}),]),}),"extra_score":({({"string",}),({}),(["main":({"This method returns any extra information associated with the score.  Thismethod will mostly be overridden by shadows which wish to place moreinformation into the score command.",}),"return":({"the extra information to place in the score",}),]),}),"quit_alt":({({"int",}),({}),(["main":({"This is the quit code called by the command 'quit'",}),"see":({"quit()","do_quit()",}),"return":({"1 if successful, 0 if failed",}),]),}),"query_max_deaths":({({"int",}),({}),(["main":({"Returns the maxium number of deaths.  This is the maxiumnumber of times they can die before they are totally dead.",}),"return":({"the maxium number fo deaths",}),]),}),"query_deaths":({({"int",}),({}),(["main":({"This method returns the number of times the player has died.",}),"see":({"adjust_deaths()","adjust_max_deaths()",}),"return":({"the number of times the player has died",}),]),}),"run_away":({({"int",}),({}),(["main":({"Called when the player wimpies out of a place.  This does all the runaway stuff and things like that.",}),"return":({"1 if succeeded in running away, 0 if not",}),]),}),"query_level":({({"int",}),({}),(["main":({"This method returns the players level.",}),"return":({"their level",}),]),}),"set_max_deaths":({({"void",}),({({"int",}),"i",}),(["main":({"Sets the maximum number of deaths.  This sets the maximumnumber of times a player can die.",}),"see":({"adjust_max_deaths()",}),"param":({"i the number of deaths to set it to",}),]),}),"save_me":({({"void",}),({}),(["main":({"Saves the player.  Saves the player to disc, doing all the autoloadstuff and such like.",}),"see":({"save()",}),]),}),"save":({({"nomask","int",}),({}),(["main":({"This method is called to save the player to disc.  It will printa message to the player to inform them of the face they havebeen saved.",}),"see":({"save_me()",}),"return":({"always returns 1",}),]),}),"toggle_wimpy":({({"int",}),({({"string",}),"str",}),(["main":({"This method changes the current value of the wimpy variables.",}),"param":({"str the new value of the wimpy variable",}),"return":({"0 on failure and 1 on success",}),]),}),"query_my_ident":({({"string",}),({}),(["main":({"This method returns the ident of the player.  The ident isdetermined using the authentication protocol.",}),"return":({"the ident of the player",}),]),}),"look_me":({({"int",}),({({"string",}),"str",}),(["main":({"Force the player to look.  Forces the player to look at somethingor just around.  If the input is set to \"\" then they look around.",}),"see":({"efun::command()",}),"param":({"str what to look at",}),"return":({"0 if it failed, non zero on success",}),]),}),"query_start_time":({({"int",}),({}),(["main":({"This is the date on which the character was started.  The very firsttime the player ever logged on.",}),"return":({"the time at which the player first logged on",}),]),}),"query_channel_silenced":({({"int",}),({}),([]),}),"net_dead":({({"void",}),({}),(["main":({"Called when the player goes net dead.  This is calledby the driver when a player goes net dead.  Turns them intoa statue and stuff.",}),]),}),"query_refresh_time":({({"int",}),({}),(["main":({"This method returns the time at which the player last refreshed.",}),"return":({"the last refresh time",}),]),}),"do_quit":({({"int",}),({}),(["main":({"quits the player.",}),"see":({"quit()","quit_alt()",}),"return":({"zero if it failed, non zero on success",}),]),}),"query_friends":({({"string","*",}),({}),(["main":({"This method returns the array of our friends.",}),"return":({"our friends array",}),]),}),"heart_beat":({({"void",}),({}),(["main":({"The main heart beat function.  This is called by the driverevery 2 seconds on the player.  Does all the maintenacestuff like executing commands, fixing up hps and stuff like that.",}),]),}),"do_load_auto":({({"void",}),({}),(["main":({"Starts the autoloading process.  This is called just after a playerlogs in to start up the auto loading process.",}),]),}),"set_channel_silenced":({({"int",}),({}),([]),}),"query_friend":({({"int",}),({({"string",}),"who",}),(["main":({"This method will return 1 if the input name is a friend.",}),"param":({"who the person to test for friendship",}),"return":({"1 if the specified person is our friend or not",}),]),}),"query_cap_name":({({"nomask","string",}),({}),(["main":({"This method returns the current capitalised name of the player.",}),"return":({"the capitalised name",}),]),}),"disallow_save":({({"void",}),({}),(["main":({"This method stops the player from being able to save.  This is done whilethe inventory is regenerating to stop problems with inventory loss dueto logging off before it has finished.",}),"see":({"allow_save()","query_save_inhibit()",}),]),}),"check_dark":({({"int",}),({({"int",}),"light",}),(["main":({"This method checks to see if the player can see at the passedin light level.",}),"return":({"-2 or -1 if it is too dark, 1 or 2 if too bright, 0 if they can see",}),]),}),"second_life":({({"mixed",}),({}),(["main":({"This method is called when the player dies.  It creates the corpseand handles all the bits and pieces that should be dealth withwhen a player dies.<p>If this method returns 0 then the automatic death handling codein the living object is used instead of this.",}),"return":({"always returns 1",}),]),}),"remove_title":({({"void",}),({({"string",}),"type",}),(["main":({"This method removes the title of the given type from the title mapping.",}),"see":({"query_title()","set_title()","remove_title()",}),"param":({"type the type of title to remove",}),]),}),"quit":({({"int",}),({}),(["main":({"A forced quit.This is the function called by external objects to quita player. It avoids checks for things like being in combat.",}),"see":({"do_quit()","quit_alt()","efun::command()",}),"return":({"0 if it failed, non zero if it succeeded.",}),]),}),"examine":({({"int",}),({({"string",}),"arg",}),(["main":({"Forces the player to examine something.  This does the same as the look_mefunction.",}),"param":({"arg the thing to look at.",}),"see":({"look_me()",}),"return":({"0 on a failure, non zero on success.",}),]),}),"query_object_type":({({"string",}),({}),(["main":({"This method returns the one letter object type which is used in thefinger command to display the type of object.",}),"return":({"the one letter object type",}),]),}),"allow_save":({({"void",}),({}),(["main":({"This method allows the player to save again after they have beendisallowed.",}),"see":({"disallow_save()","query_save_inhibit()",}),]),}),"query_prevent_shadow":({({"int",}),({({"object",}),"ob",}),(["main":({"Prevent the object from shadowing us?  This checks to see if we shouldprevent this object from shadowing the player.",}),"return":({"1 if we are prventing the shadow",}),]),}),"query_snoopee":({({"nomask","object",}),({}),(["main":({"Returns the object snooping us.  If someone is snooping the player itreturns the object doing the snooping.  If no one is snooping the playerit returns 0.",}),"see":({"efun::snoop()",}),"return":({"the object snooping the player",}),]),}),"remove_ghost":({({"void",}),({}),(["main":({"This method removes the ghost from the player.  This stops thembeing a ghost and turns them back into a real person.",}),"see":({"second_life()",}),]),}),"query_quitting":({({"int",}),({}),(["main":({"This method queries whether or not the player is in themiddle of quitting.",}),"return":({"1 if we are quitting, 0 if not",}),]),}),"query_mature":({({"int",}),({}),(["main":({"This method determins if the player is mature or not yet.  It is based on the amount of time on.",}),"return":({"1 if the player is mature, 0 if they are not",}),]),}),"query_silenced":({({"int",}),({}),(["main":({"This method queries whether or not the player has been silenced.",}),"return":({"1 if we are silenced, 0 if not",}),]),}),"set_monitor":({({"void",}),({({"int",}),"i",}),(["main":({"Set the hit point monitor.  This sets the value of the hit pointmonitor flag.  If it is set to 0, the monitor is turned off.  Ifit is set to 1 the monitor is turned on.",}),"param":({"i the new value for the hit point monitor flag",}),]),}),"glance":({({"int",}),({({"string",}),"str",}),(["main":({"Force the player to glance.  Forces the player to glance in acertain direction.",}),"param":({"str the direction to glance in",}),"return":({"0 ifg the command failed, non zer if it succeeded",}),]),}),"adjust_deaths":({({"void",}),({({"int",}),"i",}),(["main":({"This method changes the number of times the player has died.",}),"see":({"query_deaths()","adjust_max_deaths()",}),]),}),"query_last_on_from":({({"string",}),({}),(["main":({"This method returns the ip from which the player last logged on.",}),"return":({"the ip address from which they last logged on",}),]),}),"query_save_inhibit":({({"int",}),({}),(["main":({"This method returns the value of the disallowing save variable.  If thisis a non-zero value then the player must not be saved.",}),"see":({"allow_save()","disallow_save()",}),]),}),"query_no_logins":({({"int",}),({}),(["main":({"This method returns the number of times the player has logged onto the mud.",}),"return":({"the number of logins",}),]),}),"unset_channel_silenced":({({"int",}),({}),([]),}),"unset_silenced":({({"int",}),({}),(["main":({"This method removes the silencing from the player.",}),"return":({"1 upon success, 0 upon failure",}),]),}),"query_time_on":({({"nomask","int",}),({}),(["main":({"The amount of time on line.  This is the total amount of time onlinein seconds from when they first started playing.  The return fromthis method is *negative*, you will need to make it positive to use itmost likely.",}),"return":({"the total log on time in seconds (the return value is *negative*)",}),]),}),"move_player_to_start":({({"void",}),({({"string",}),"bong",({"int",}),"new_flag",({"string",}),"c_name",({"string",}),"ident",({"int",}),"go_invis",}),(["main":({"This method is called from within the login code to start up thenew player, set their name and move them into the correctlocation on the mud.",}),"param":({"bong the name of the player","new_flag are they a new player?","c_name their capitalized name","ident the ident from the authorisation code","go_invis whether or not we should go invis",}),]),}),"idle_out":({({"void",}),({}),(["main":({"Checks to see if they have idled out.  This is called from withinthe heart beat code.",}),"see":({"heart_beat()",}),]),}),"set_title":({({"void",}),({({"string",}),"type",({"string",}),"title",}),(["main":({"This method sets the current title type to be of a certain name.",}),"see":({"query_title()","set_title()","remove_title()",}),"param":({"type the type of title to set","title the string to set it to",}),]),}),])
protected_functions ([])
inherits (["/global/player/auto_load":({}),"/global/player/family":({}),"/global/player/more_file":({}),"/global/player/path":({}),"/global/player/pweath":({}),"/global/player/channels":({}),"/global/player/log":({}),"/global/player/line_ed":({}),"/global/player/psoul":({}),"/std/living/living":({}),"/global/player/finger":({}),"/global/player/events":({}),"/global/player/start_position":({}),"/global/player/guild-race":({}),"/global/player/more_string":({}),])
main_docs (["main":({"The main player object.  Does all the player related stuff.",}),"started":({"December 1991",}),"author":({"Pinkfish",}),])
define_docs (["WD":([]),"MIN_TIME_TO_SAVE":([]),"LEVEL_CACHE":([]),"GP":([]),"NEW_STAT":(["main":({"This defines the number the players stats are set to whenlogging in for the first time, or refreshing.",}),]),"ON":(["main":({"These are defines for the prompt system. ",}),]),"XP":([]),"HP":([]),])
includes (["/secure/include/config.h":1121841204,"/include/board.h":1027323664,"/include/command.h":1010295178,"/include/player.h":1036911799,"/include/drinks.h":962428284,"/include/living.h":962428284,"/include/playtesters.h":1020949410,])
class_docs (["player_data":({0,({({"_hb_num",({"int",}),}),({"_level",({"int",}),}),({"_level_time",({"int",}),}),({"_snoopee",({"object",}),}),({"_my_ident",({"string",}),}),({"_titles",({"mapping",}),}),({"_update_tmps_call_out",({"int",}),}),({"_save_inhibit",({"int",}),}),({"_last_save",({"int",}),}),({"_quitting",({"int",}),}),}),([]),}),])
file_name "/global/player.c"
last_changed 1200761933
