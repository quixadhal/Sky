#/secure/handlers/autodoc/autodoc_file.c
public_functions (["generate_store":({({"class","store",}),({({"object","*",}),"things",({"int",}),"lot_id",}),(["main":({"Return a store class with info on the objects",}),]),}),"set_currency":({({"void",}),({({"string",}),"cur",}),([]),}),"save_file":({({"void",}),({}),([]),}),"adjust_money":({({"void",}),({({"int",}),"amount",({"object",}),"player",}),([]),}),"do_list":({({"int",}),({}),([]),}),"set_commission":({({"void",}),({({"int",}),"percent",}),([]),}),"generate_random_adv_string":({({"string",}),({}),(["main":({"A more usable version of above function, call it and it picks a lotat random and generates a string for it.returns \"NULL\" if there are no lots.Also returns NULL if the lot chosen isnt open",}),]),}),"do_unexclude":({({"int",}),({({"object","*",}),"boxes",({"string",}),"excluded",}),([]),}),"do_describe":({({"int",}),({({"object","*",}),"boxes",({"string",}),"int_desc",}),([]),}),"load_file":({({"void",}),({}),([]),}),"automated_deposit":({({"int",}),({({"object","*",}),"things",({"int",}),"auction_length",({"string",}),"function_cb",({"string",}),"object_cb",({"int",}),"res_price",({"string",}),"int_desc",}),(["main":({"This function allows an object to deposit an item for auction,Things are the items to auction, auction length is the length in seconds,function_cb and object_cb are function names and object paths to allow acall back to be scheduled for when the auction is over, res price isthe reserve price and int_desc is a description that will be written onthe case. If an error code is generated, it is upon the object callingthis function to pull those objects back. An object reference isn'tkept here.",}),]),}),"set_shop_name":({({"void",}),({({"string",}),"_name",}),([]),}),"do_bid":({({"int",}),({({"string",}),"offer",({"object","*",}),"boxes",}),(["main":({"Basic add command function.. lets you bid on stuff",}),]),}),"do_withdraw":({({"int",}),({({"object","*",}),"boxes",}),(["main":({"Withdraw an item from bidding",}),]),}),"set_admin_cost":({({"void",}),({({"int",}),"value",}),([]),}),"set_save_path":({({"void",}),({({"string",}),"path",}),([]),}),"generate_advertising_string":({({"string",}),({({"class","lot",}),"lot",}),(["main":({"This function generates a string that can be used in any advertisingyou might want to do, it returns a human friendly string that passesinformation about the lot. (Specifically - contents, cost and exp time)It takes a lot as an arg.",}),]),}),"do_collect":({({"int",}),({({"string",}),"pattern",}),([]),}),"extra_look":({({"string",}),({({"object",}),"ob",}),([]),}),"query_payments":({({"mapping",}),({}),([]),}),"do_deposit":({({"int",}),({({"object","*",}),"things",({"int",}),"auction_time",({"string",}),"time_type",({"string",}),"res_price",}),([]),}),"do_exclude":({({"int",}),({({"object","*",}),"boxes",({"string",}),"excluded",}),([]),}),"recover_lot":({({"mixed",}),({({"mixed",}),"lot_autoload",}),([]),}),"do_browse":({({"int",}),({({"object","*",}),"boxes",({"string",}),"target",({"int",}),"identifier",}),(["main":({"This function will be a bit horrible, but it is a nicer way of doing itthen keeping the objects around.This function uses Terano's cheap and dirty parser (All rights reserved).To be added - plural support! (using query_plural)",}),]),}),"lot_check":({({"void",}),({}),(["main":({"A major component, this function is called once every few minutes tochange the state of our bids. It puts new bids out on display, andmodifies the state of in game lots as required. It also removes old ones.",}),]),}),])
protected_functions ([])
inherits (["/global/player/auto_load":({}),"/std/room/basic_room":({"nosave",}),])
main_docs (["changed":({"24 March, 1999 Many exciting things. Terano.","2 October, 1999 Added stability! Excitement!An excessively complicated browse function! Terano.","8 January, 2000! Made Y2K compliant! (Just kidding)Added some advertising stuff.Fixed a missing case as well.","11 January, 2000 Fixed some advertising stuff.",}),"main":({"Auction Room InheritableThis room will give you everything you need to make an auctionroom.",}),"started":({"3 October, 1998",}),"author":({"Terano",}),])
define_docs (["WAIT_SELLER":([]),"ERRRECVEMP":([]),"GECM(":([]),"WAIT_CRE_INTERVENTION":([]),"AUCTION_PLAYER_BID":([]),"NO_COLOURS":([]),"TCTP(":([]),"CLOSED":([]),"ERRBADCBOB":([]),"COLOUR_ID":([]),"ERRBADPARM":([]),"COLOURS":([]),"ERRNOSPACE":([]),"c_item":([]),"WARNNOLOTS":([]),"ERRGENFAIL":([]),"OPEN":([]),"WAIT_BUYER_LAPSE":([]),"WAIT_BUYER":([]),"WARNUNDEST":([]),"ERROBNOMOVE":([]),"c_store":([]),"AUCTION_PLAYER_NAME":([]),"ERRNORECV":([]),"CHECK_CYCLE":([]),"c_lot":([]),"WARNEXCL":([]),])
includes (["/include/move_failures.h":962428284,"/include/mail.h":999081362,"/include/money.h":1049974076,])
class_docs (["item":({0,({({"name",({"string",}),}),({"alias",({"string","*",}),}),({"adjectives",({"string","*",}),}),({"long",({"string",}),}),({"read_mess",({"string",}),}),({"enchant_mess",({"string",}),}),}),(["main":({"In this new version, we aren't keeping the objects loaded,because the auto_load code seems flaky outside of/global/player.cInstead keep a whole bunch of info about it on file.",}),]),}),"store":({0,({({"case_code",({"int",}),}),({"colour",({"string",}),}),({"inv_string",({"string",}),}),({"inventory",({"class","item","*",}),}),}),(["main":({"In this new version, we aren't keeping the objects loaded,because the auto_load code seems flaky outside of/global/player.cInstead keep a whole bunch of info about it on file.",}),]),}),"lot":({0,({({"case_code",({"int",}),}),({"assoc_store",({"class","store",}),}),({"seller",({"string",}),}),({"status",({"string",}),}),({"expiration_time",({"int",}),}),({"reserve_price",({"int",}),}),({"bids",({"mapping",}),}),({"lot_autoload",({"mixed","*",}),}),({"current_bid",({"mixed","*",}),}),({"auto_bids",({"string","*",}),}),({"notes",({"string",}),}),({"excluded",({"string","*",}),}),}),(["main":({"A few notes about this class, I didn't like the way the old oneworked, when a lot moved to expired_lots, there was no real way to recover itInstead, we will keep one array of all lots, with differing status's dependingon whats happening.IE: Open: Accepting bids.    Waiting: Seller: It did not take any acceptable bids and it is waiting collection      by the seller.    Waiting: Buyer: A bid was taken and we are waiting for payment.    Waiting: Buyer (lapsed): A bid was taken, but lapsed. There are no      other bidders, so in the next cycle the seller will be mailed and      status changed to Waiting: Seller.    Waiting Creator Intervention:  A lot has fallen over in some way,      and needs a creator to fix it.    Closed: The bid has been collected (by either buyer or seller),      lots will stay in this status for 2 hours after collection.      Then payment will be credited to the payment array and the lot will      be deleted.Case code is used in reference to the store class.The rest are the same as they were in the last version",}),]),}),])
file_name "/std/room/auction_room.c"
last_changed 1012208649
