#/secure/handlers/autodoc/autodoc_file.c
public_functions (["setup_clothing":({({"void",}),({({"int",}),"number",}),(["main":({"This method sets up the condition for the clothing.",}),"param":({"number the maximum condition for the clothing",}),]),}),"add_pocket":({({"void",}),({({"string",}),"type",({"int",}),"amount",}),(["main":({"This method adds a pocket onto the clothing.",}),"see":({"query_pockets()","set_pocket_mess()","query_pocket_mess()",}),"param":({"type the type of pocket","amount the amount the pocket can hold",}),]),}),"query_pocket_mess":({({"string",}),({}),(["main":({"This method returns the message associated with the pocket.",}),"see":({"set_pocket_mess()","query_pockets()","add_pocket()",}),"return":({"the message associated with the pocket",}),]),}),"set_types":({({"void",}),({({"string","*",}),"words",}),(["main":({"This method sets the types of weapons that can besheathed in the scabbard.",}),"see":({"query_scabbard()","query_clothing()","query_types()","set_no_weapons_allowed()","query_no_weapons_allowed()","set_clothing_scabbard()","test_type_ok()",}),"param":({"words the array of types that can be sheathed",}),]),}),"test_type_ok":({({"int",}),({({"object",}),"thing",({"int",}),"flag",({"int",}),"test",}),(["main":({"This method queries whether or not this weaponcan be sheathed in the scabbard.",}),"see":({"query_scabbard()","query_clothing()","set_types()","query_types()","set_no_weapons_allowed()","query_no_weapons_allowed()","set_clothing_scabbard()",}),"param":({"thing the weapon to test","flag the move flag (see test_add)",}),"return":({"1 if the weapon can be sheathed in the scabbard, 0 if not",}),]),}),"query_pockets":({({"mixed",}),({}),(["main":({"This method returns all the pockets on the object.",}),"see":({"add_pocket()",}),"return":({"all the pockets on the object",}),]),}),"query_scabbard_mess":({({"varargs","string",}),({({"int",}),"flag",}),(["main":({"This method returns the message associated with the scabbard.",}),"see":({"query_scabbard()",}),"param":({"flag if the flag is set then the message will beconstructed without the \"It could sheath\" bit.",}),"return":({"the message associated with the scabbard",}),]),}),"query_no_weapons_allowed":({({"int",}),({}),(["main":({"This method returns the number of weapons allowed into the scabbard.",}),"see":({"query_scabbard()","query_clothing()","set_types()","query_types()","set_no_weapons_allowed()","set_clothing_scabbard()","test_type_ok()",}),"return":({"the number of weapons allowed into the scabbard.",}),]),}),"set_clothing_scabbard":({({"void",}),({}),(["main":({"This method makes the clothing object a clothing-scabbard,which means it will be fixable by 'mend' etc.It will allow to have sheathes for daggers inside bras etc.",}),"see":({"query_scabbard()","query_clothing()","set_types()","query_types()","set_no_weapons_allowed()","query_no_weapons_allowed()","test_type_ok()",}),]),}),"set_no_weapons_allowed":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the number of weapons allowed into the scabbard.",}),"see":({"query_scabbard()","query_clothing()","set_types()","query_types()","query_no_weapons_allowed()","set_clothing_scabbard()","test_type_ok()",}),"param":({"i the number of weapons allowed into the scabbard",}),]),}),"query_scabbard":({({"int",}),({}),(["main":({"This method determines if the object is a scabbard or not.",}),"see":({"query_clothing()","set_types()","query_types()","set_no_weapons_allowed()","query_no_weapons_allowed()","set_clothing_scabbard()","test_type_ok()",}),"return":({"returns 1 for a scabbard",}),]),}),"break_me":({({"void",}),({}),(["main":({"This method causes the object to be broken.",}),]),}),"query_types":({({"string","*",}),({}),(["main":({"This method returns the types of weapons that can besheathed in the scabbard.",}),"see":({"query_scabbard()","query_clothing()","set_types()","set_no_weapons_allowed()","query_no_weapons_allowed()","set_clothing_scabbard()","test_type_ok()",}),"return":({"the types that can be sheathed",}),]),}),"query_clothing":({({"int",}),({}),(["main":({"This method will return true if the item is an item of clothing.",}),"see":({"/obj/clothing->query_clothing()","query_scabbard()","set_types()","query_types()","set_no_weapons_allowed()","query_no_weapons_allowed()","set_clothing_scabbard()","test_type_ok()",}),"return":({"returns true if it's a clothing item",}),]),}),"set_pocket_mess":({({"void",}),({({"string",}),"words",}),(["main":({"This method sets the message associated with the pocket.",}),"see":({"query_pocket_mess()","add_pocket()",}),"param":({"words the message associated with the pocket",}),]),}),])
protected_functions ([])
inherits (["/std/basic/wearable":({}),"/std/basic/close_lock":({}),"/std/container":({}),])
main_docs (["main":({"This is the clothing file.  Contains everything you need tomake some nice clothing.",}),])
define_docs (["TYPES":([]),"SHEATH":([]),"SCABBARD":([]),])
includes (["/include/move_failures.h":962428284,])
class_docs ([])
file_name "/obj/clothing.c"
last_changed 1059688377
