#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_money_object":({({"object",}),({({"int",}),"force",}),(["main":({"This method returns the money object for the player.  If the forceflag is set then the object will be created if it does notexist.",}),"param":({"force make the money object exist",}),]),}),"adjust_money":({({"varargs","void",}),({({"mixed",}),"amount",({"string",}),"type",}),(["main":({"This method adjusts the amount of money the player has.It redirects the call off the the money object and calls theadjust_money() function on it.  The amount can be a moneyarray, in which case it will adjust the size by the membersof the money array.<p>If the money object doesn't exist yet, this functionmight create a new money object.  The exception is that ifthe amount argument is 0, nothing happens.",}),"param":({"amount the amount to adjust the money by","type the type of coin to adjust",}),"see":({"/obj/money->adjust_money()",}),]),}),"query_money":({({"int",}),({({"string",}),"type",}),(["main":({"This method returns all of the money of a certain type on themoney object.",}),"see":({"query_value()","query_value_in()",}),"param":({"type the type of money to return",}),"return":({"the number of those money items",}),]),}),"add_currency":({({"varargs","int",}),({({"int",}),"amt",({"string",}),"location",}),(["main":({"Adds an amount of money in the roundest amount of change tothe living.",}),"param":({"amt the amount of money to add","location the area to use for the currency",}),"return":({"integer success",}),]),}),"query_money_array":({({"mixed","*",}),({}),(["main":({"This method returns the money array associated with the money onthe player object.",}),"see":({"set_money_array()",}),"return":({"the money array on the player object",}),]),}),"query_value":({({"int",}),({}),(["main":({"This method returns the value of the money as an integer.  This isan absolute value of their worth.",}),"see":({"query_value_in()",}),"return":({"an integer value of their money",}),]),}),"pay_money":({({"varargs","void",}),({({"mixed",}),"m_array",({"string",}),"where",}),(["main":({"This method makes the player make a payment.  This is used forshops and things.",}),"see":({"/handlers/money_handler->make_payment()",}),"param":({"m_array the money to pay","where the money area to make the payment in",}),]),}),"query_value_in":({({"int",}),({({"string",}),"where",}),(["main":({"This method returns the value of the money as in integer in the specifiedplace.",}),"see":({"query_value()","query_money()",}),"param":({"where the place in which to determine the money from",}),"return":({"the integer value of money",}),]),}),"set_money_array":({({"void",}),({({"mixed","*",}),"new_array",}),(["main":({"This method sets the money array associated with the player.   THiswill overwrite any current money on the player.",}),"see":({"query_money_array()",}),"param":({"new_array the new money array for the player",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This file has all the functions to deal with living objects andmoney.",}),"author":({"Pinkfish",}),"see":({"/obj/money.c","/handlers/money_handler.c",}),])
define_docs ([])
includes (["/include/money.h":1049974076,])
class_docs ([])
file_name "/std/living/money.c"
last_changed 1094720911
