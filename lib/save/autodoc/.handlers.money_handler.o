#/secure/handlers/autodoc/autodoc_file.c
public_functions (["make_payment":({({"varargs","mixed",}),({({"string",}),"type",({"int",}),"value",({"object",}),"thing",({"string",}),"where",}),(["main":({"This method makes a payment of a particular amount in a particularmoney area.   Please note that player or living objects can doubleas money objects in this circumstance.  The first element of thepayment array is the values which should be used to take offthe player, the second element is the change needed to be payedback.",}),"see":({"pay_amount_from()","calc_change()",}),"param":({"type the type of money to pay in","value the number of the type to pay","thing the thing which is doing the payment (money object)","where the money area the payment will occur in",}),"return":({"the payment array",}),]),}),"query_person_payments":({({"mixed",}),({({"int",}),"value",({"string",}),"place",({"object",}),"payer",({"object",}),"payee",}),(["main":({"This method makes a payment from one person to another.This method figures out what money should be given to the playerand what should be taken from the other to make a payment of thecorrect value in the correct place.",}),"param":({"value the value to pay","place the place to make the payment in","payer the person the money is payed from","payee the person the money is payed to",}),"return":({"two element array, or 0 if it cannot be done",}),]),}),"value_from_string":({({"int",}),({({"string",}),"str",({"string",}),"where",}),(["main":({"This method attempts to find a money value from a string.  It willattempt to do fuzzy matching of the type.  This means it will match onpartial matches, this could lead to somewhat weird behaviour...  So itgoes.",}),"see":({"money_value_string()","money_array_from_string()",}),"param":({"str the string to find the value of",}),"example":({"// This will tell us the integer money value of the string.write( MONEY_H->value_from_string(\"1 dollar and 12 pence\",                                  \"Ankh-Morpork\"));",}),]),}),"query_value":({({"varargs","int",}),({({"string",}),"type",({"string",}),"where",}),(["main":({"This method returns the value of a specified type of money in a certainmoney area.",}),"see":({"query_total_value()",}),"param":({"type the type of money to get the value for","where the money area the money is in",}),"return":({"the integer value of the money",}),]),}),"query_total_value":({({"varargs","int",}),({({"mixed",}),"mon_array",({"string",}),"where",}),(["main":({"This method determines the total value of a specified money array.A money array consists of pairs of values ({ type, number })",}),"see":({"query_value()",}),"param":({"mon_array the array to find the value of","where the money area to get the value in",}),"return":({"the total value as an integer",}),]),}),"query_details_for":({({"class","money_data",}),({({"string",}),"type",}),(["main":({"This method returns the details for a specified type of money.It will return a class of the form:<pre>({ forward short, reverse short,   forward long, reverse long, composition,   plural, adjectives, weight })</pre>",}),"see":({"/include/money.h",}),"param":({"type the money type to get the details for",}),]),}),"smallest_in":({({"string",}),({({"string",}),"place",}),(["main":({"This returns the smallest unit of currency in this place.",}),"param":({"place The place to query.",}),"return":({"a string of the smallest unit of currency",}),]),}),"filter_legal_tender":({({"varargs","object","*",}),({({"object",}),"money",({"string",}),"where",}),(["main":({"This method figures out the legal and illegal tender money fromthe specified money object in the specified money area.   This methodreturns a two element array which consists of the legal and illegaltender for the given money area.   ({ legal, illegal })",}),"see":({"parse_money()",}),"param":({"money the money object to get the legal tender from","where the money area the tender is for",}),"return":({"an two element array of objects ({ legal, illegal })",}),]),}),"query_plural_for":({({"string",}),({({"string",}),"type",}),(["main":({"This method returns the short plural description of the money type.This returns just the one word, like 'coins' or 'talons'.",}),"see":({"query_main_plural_for()",}),"param":({"type the money type to get the short plural description for",}),"return":({"the short plural description for the money object",}),]),}),"parse_money":({({"varargs","mixed",}),({({"string",}),"words",({"object",}),"player",({"string",}),"place",}),(["main":({"This method determines all the money from the player object and movesit into a container.  It then figured out the legal tender forspecified money area and tells the player if the given money islegal tender for the current area.",}),"see":({"filter_legal_tender()",}),"param":({"words the string to match the money on","player the player who is attempting the transaction","place the money area the transaction is taking place",}),"return":({"a money object consisting of the legal tender",}),]),}),"make_new_amount":({({"varargs","object",}),({({"int",}),"value",({"string",}),"where",}),(["main":({"This method creates a money object of a certain value in a certainmoney area.",}),"param":({"value the value to create the new money object with","where the area to create the new money object in",}),"return":({"the new money object",}),]),}),"query_valid_types":({({"string","*",}),({}),(["main":({"This returns a list of valid coin types",}),"return":({"an array of valid coin types",}),]),}),"query_values":({({"mixed","*",}),({}),(["main":({"This method returns the values in the default area.This method returns the array as given in the value above.It contains name, value pairs and is for the \"default\"area.",}),"see":({"query_all_values()","query_values_in()",}),"return":({"the array of values",}),]),}),"query_details":({({"mapping",}),({}),(["main":({"This method returns all the details for the current set ofcoins.   The details are information which is shown when the coinis looked at.   Stuff about heads and tails and things.",}),"see":({"/include/money.h",}),"return":({"the mapping of details for all coin types",}),]),}),"money_string":({({"string",}),({({"mixed",}),"mon_array",}),(["main":({"This method converts a money array into a string so it can be displayed.",}),"see":({"money_value_string()",}),"param":({"mon_array the money array to convert into a string",}),]),}),"query_weight_for":({({"int",}),({({"string",}),"type",}),(["main":({"This method returns the weight of 100 coins of the money type.",}),"param":({"type the money type to get the weight of 100 coins for",}),"return":({"the weight of 100 coins of the specified type",}),]),}),"query_aliases_for":({({"string","*",}),({({"string",}),"type",}),(["main":({"This method returns all the current aliases for the given typeof money.",}),"param":({"type the type of money to get the aliases for",}),"return":({"the aliases for the money type",}),]),}),"create_money_array":({({"varargs","mixed",}),({({"int",}),"value",({"string",}),"where",}),(["main":({"This method creates a money array from a certain value in a particularmoney area. A money array consists of ({ type, number }) pairs in anarray.   ie: ({ \"brass\", 12, \"copper\", 24 }).",}),"see":({"money_value_string()",}),"param":({"value the value to get the money array for","where the money area to get the value in",}),"return":({"a money array for the value in the area",}),"example":({"place = query_property(\"place\");if (!place) {     place = \"default\";}mon_array = create_money_array( 1000, place);",}),]),}),"query_main_plural_for":({({"string",}),({({"string",}),"type",}),(["main":({"This method returns the main short plural description of the money type.This returns the expanded plural version like 'Ankh-Morpork pennies'.",}),"see":({"query_plural_for()","query_short_for()",}),"param":({"type the money type to get the short plural description for",}),"return":({"the short plural description for the money object",}),]),}),"query_value_of":({({"int",}),({({"string",}),"type",}),(["main":({"This returns the value of a currency type.",}),"param":({"type currency type",}),"return":({"an int of the currency type's value",}),]),}),"money_value_string":({({"varargs","string",}),({({"int",}),"value",({"string",}),"where",}),(["main":({"This method returns a string which is based on the value ofthe money in a certain money area.",}),"see":({"create_money_array()","money_string()","value_from_string()",}),"param":({"value the value to get the string for","where the place to get the string for",}),"return":({"a string of the money value in the certain money area",}),]),}),"query_all_values":({({"mapping",}),({}),(["main":({"This method returns the mapping containing all the values of thecurrently valid money types.   The mapping has keys of the domainof the money and has a value of an array.   The array containsalternating name, value pairs.<pre>([ \"default\": ({ \"brass\", 1, \"copper\", 10, \"silver\", 100,                 \"gold\", 2000, \"platinum\", 6000 }) ])</pre>",}),"see":({"query_values()","query_values_in()",}),"return":({"the mapping of values",}),]),}),"make_money_array_payment":({({"mixed",}),({({"string",}),"type",({"int",}),"value",({"mixed",}),"mon_array",({"string",}),"where",({"int",}),"use_default",}),(["main":({"This method makes a payment from a money array.  It returns thedepleted money array, the amount taken out and the changeneeded.  If the type is not set, then the best fit for the valueis found from the array.<p>The return array is formated as:<br>({ depleted_money_array, change, taken_from })<br>The change is an integer value.",}),"param":({"type the type of money to take out","value the amount of the type to take out","mon_array the money array to use","where the money area","use_default allow the use of the default money type",}),"return":({"the return array as formated above",}),]),}),"query_all_places":({({"string","*",}),({}),(["main":({"This method returns the current set of areas in which types canbe found.",}),"return":({"the set of places",}),]),}),"pay_amount_from":({({"varargs","object",}),({({"int",}),"value",({"object",}),"money",({"string",}),"where",}),(["main":({"This method makes a payment from a specified money object.",}),"see":({"make_payment()","calc_change()",}),"param":({"value the amount to pay","money the money object to pay from","where the money area the payment occurs in",}),"return":({"the change object",}),]),}),"calc_change":({({"mixed",}),({({"int",}),"value",({"mixed","*",}),"mon_array",}),(["main":({"This method calculates the change of a certain value from agiven money array.   This makes sure that the change does not includemoney that does not actually exist.",}),"see":({"make_payment()","pay_amount_from()",}),"param":({"value the value of the change to calculate","mon_array the money array to determine the change from",}),"return":({"the money array containing the change to use",}),]),}),"query_aliases_of":({({"string","*",}),({({"string",}),"word",}),(["main":({"This converts a currency type's alias (i.e. \"royal\" ) and returnsits 'real' names (i.e. \"Ankh-Morpork royal\"",}),"param":({"word the alias to find the real name of",}),"return":({"an array of real names, or 0 if it's not a real alias",}),]),}),"money_array_from_string":({({"mixed",}),({({"string",}),"str",({"string",}),"where",({"int",}),"flag",}),(["main":({"This method attempts to create a money array from a string.  It willattempt to do fuzzy matching of the type.  This means it will match onpartial matches, this could lead to somewhat weird behaviour.",}),"see":({"money_value_string()","value_from_string()",}),"param":({"str the string to find the value of","where the currency area to get the money array for","flag if the flag is set, then we will return 0 on a partial match",}),"example":({"MONEY_H->money_array_from_string(\"12 Calarien rahns and 37 tabli\",                                 \"calarien\");",}),]),}),"query_short_for":({({"string",}),({({"string",}),"type",}),(["main":({"This method returns the short description of the money type.",}),"see":({"query_main_plural_for()",}),"param":({"type the money type to get the short description for",}),"return":({"the short description for the money object",}),]),}),"query_values_in":({({"mixed",}),({({"string",}),"where",}),(["main":({"This method returns the values in the specified area.It contains name, value pairs and is for the \"default\"area.",}),"see":({"query_all_values()","query_values()","add_type()",}),"param":({"where the area in which to return the values for",}),"return":({"the array of values",}),]),}),"query_origin_of":({({"string",}),({({"string",}),"type",}),(["main":({"This takes a coin type and returns the place it is associated with.",}),"param":({"type the coin type i.e. \"Ankh-Morpork dollar\"",}),"return":({"the place i.e. \"Ankh-Morpork\"",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["changed":({"Fixed up the code that deals with different currency areas.Also added money_array_from_string() and made value_from_string()work properly with different types of currencies.- Sandoz, April 2003.",}),"main":({"This handles all the methods for determining values of coins andthe current valid set of coins.   It also handles change calculation.This was written originaly by Pinkfish, reworked significantly byDeutha to add in the multiple currency areas.",}),"author":({"Pinkfish",}),"see":({"/std/living/money.c",}),])
define_docs (["DATA":([]),])
includes (["/include/money.h":1049974076,])
class_docs ([])
file_name "/handlers/money_handler.c"
last_changed 1120010560
