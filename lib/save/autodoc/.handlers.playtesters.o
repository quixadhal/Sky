#/secure/handlers/autodoc/autodoc_file.c
public_functions (["add_route":({({"int",}),({({"string",}),"start",({"string",}),"dest",}),(["main":({"This method adds a transit route into the handler,that PTs can use with their badges.",}),"param":({"start the location this route can be used from","dest the file name of the destination of the route",}),"return":({"1 if the destination room exists, 0 if not",}),]),}),"add_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method adds the playtester to the array of current playtesters.",}),"see":({"remove_playtester()","query_playtester()","add_senior_playtester()","valid_playtester()",}),"param":({"name the name of the player to add",}),"return":({"1 if successful, 0 on failure",}),]),}),"do_reject_app":({({"int",}),({({"string",}),"name",}),(["main":({"This method will reject an application by the specified player.",}),"param":({"name the name of the player whose application to reject",}),]),}),"query_accept_applications":({({"int",}),({}),(["main":({"This method queries whether or not we are currentlyaccepting applications.",}),"return":({"1 if we are accepting applications, 0 if not",}),]),}),"query_routes":({({"mapping",}),({}),(["main":({"The method returns the raw routes mapping.",}),]),}),"do_accept_app":({({"int",}),({({"string",}),"name",}),(["main":({"This method will accept an application by the specified player.",}),"param":({"name the name of the player whose application to accept",}),]),}),"create_badge":({({"int",}),({({"string",}),"player",}),(["main":({"This method creates a PT badge and moves it to the target player.",}),"param":({"player the player to create a badge for",}),"return":({"1 if successful, 0 if not",}),]),}),"query_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method tests to see if the given name is a playtester.",}),"see":({"add_playtester()","remove_playtester()","query_senior_playtester()",}),"return":({"1 if they are a playtester, 0 if they are not.",}),]),}),"query_pt_data":({({"mapping",}),({({"string",}),"name",}),(["main":({"Returns the raw playtester data for processing!",}),]),}),"remove_playtester":({({"int",}),({({"string",}),"name",({"string",}),"reason",}),(["main":({"This method will remove the playtester from the current list ofplay testers.",}),"see":({"add_playtester()","remove_senior_playtester()",}),"param":({"name the player to remove as a play tester","reason the reason for the removal",}),"return":({"0 on failure and 1 on success",}),]),}),"list_transits":({({"int",}),({}),(["main":({"This method prints all routes to this_player().",}),]),}),"do_list_apps":({({"int",}),({}),(["main":({"This method prints the list of pending applications.",}),]),}),"query_playtesters":({({"string","*",}),({}),(["main":({"This method returns a list of the current playtesters.  This isa list of string names in an array.",}),"return":({"the list of current playtesters",}),]),}),"check_playtesters":({({"void",}),({({"string",}),"last",}),(["main":({"This goes through the list of playtesters and checks to makesure they are all still valid.",}),"see":({"valid_playtester()","remove_playtester()",}),"param":({"last the last playtester to check",}),]),}),"list_destinations":({({"int",}),({}),(["main":({"This method prints the routes that can be used from TP's currentlocation to TP.  This is used by the PT badge.",}),]),}),"do_init":({({"void",}),({({"object",}),"badge",}),(["main":({"This method is used by the PT badge and gives all the transitcommands to this_player().",}),"param":({"badge the badge that is giving out the commands",}),]),}),"set_accept_applications":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets whether or not we are accepting applications.",}),"param":({"i 1 to start accepting apps, 0 to stop",}),]),}),"report_made":({({"void",}),({({"string",}),"name",({"string",}),"type",({"string",}),"file",({"string",}),"text",}),(["main":({"This is called when a playtester makes a bug report.",}),"param":({"name the name of the playtester","type the type of report","the file the report is on","the text associated with the report",}),]),}),"add_senior_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method adds the player as a senior playtester.  The playtesterneeds to already be added to become a senior playtester.",}),"see":({"remove_senior_playtester()","add_playtester()","query_senior_playtester()",}),"param":({"name the name of the player to add",}),"return":({"1 on success, 0 on failure",}),]),}),"do_show_app":({({"int",}),({({"string",}),"name",}),(["main":({"This method prints the specified player's playtester application.",}),"param":({"name the name of the player to get the application for",}),]),}),"remove_route":({({"int",}),({({"string",}),"start",({"string",}),"dest",}),(["main":({"This method removes a transit route from the handler.",}),"param":({"start the starting location of the route to remove","dest the destination file name of the route to remove",}),"return":({"1 if successfully removed, 0 if destination didn't exist",}),]),}),"remove_senior_playtester":({({"int",}),({({"string",}),"name",({"string",}),"reason",}),(["main":({"This method removes a senior playtester.",}),"param":({"name the name of the senior playtester to remove","reason the reason for the removal",}),"return":({"1 if successfully removed, 0 if not",}),]),}),"query_senior_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method determines if they are a senior playtester.",}),"see":({"add_senior_playtester()","remove_senior_playtester()","query_playtester()",}),"return":({"1 if they are a senior playteser, 0 if they are not",}),]),}),"query_is_lord":({({"int",}),({({"mixed",}),"who",}),(["main":({"This method queries whether or not the specified person is alord of the playtesters domain or not.",}),"param":({"who the name or object of the player to test",}),"return":({"1 if we are a lord of playtesting, 0 if not",}),]),}),"do_goto":({({"int",}),({({"string",}),"destination",}),(["main":({"This method is used by the PT badge to move PTs fromone location to another.",}),"param":({"destination the destination to go to",}),]),}),"reason_invalid_playtester":({({"string",}),({({"string",}),"name",}),(["main":({"THis method returns a string reason why they are an invalid playtester.",}),"see":({"valid_playtester()",}),"param":({"name the player to check",}),"return":({"the string reason, 0 if none",}),]),}),"list_routes":({({"int",}),({}),(["main":({"This method prints all routes to TP, if TP is a creator.",}),]),}),"query_show_list":({({"string",}),({}),(["main":({"This is a nice way of showing a list of the current playtesters.I am not really sure what sort of results it shows, some commentscould be nice in here.",}),]),}),"valid_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method determines if they are a valid playtester or not.",}),"see":({"reason_invalid_playtester()",}),"param":({"name the name of the player to test",}),"return":({"1 if they are, 0 if they are not",}),]),}),])
protected_functions (["log_application":({({"void",}),({({"string",}),"name",({"int",}),"accept",}),(["main":({"This method deletes an application from the mapping, logs it,and sends out the appropriate mail to the applicant.",}),"param":({"name the name of the applicant whose application to delete","accept whether or not we accepted the application",}),]),}),"compile_app":({({"varargs","string",}),({({"class","application_data",}),"data",({"int",}),"cols",({"int",}),"flag",}),(["main":({"This method makes a nice string out of the PT application data.",}),"param":({"data the class to process","cols the cols to wrap at","flag if flag is set, the line about whose appit is will not be added",}),"return":({"the application in a nice string format",}),]),}),])
inherits ([])
main_docs (["main":({"Keeps track of all the current playtesters.  This keeps track of allthe current playtesters.",}),"change":({"Moved the routes code to here from badges - Sandoz, May 2002.","Added full support for submitting, accepting and rejectingapplications - Sandoz, May 2002.",}),])
define_docs (["REJECT_MAIL":([]),"SAVE_FILE":([]),"LORD(x)":([]),"BADGE":([]),"LEVEL":([]),])
includes ([])
class_docs (["application_data":({0,({({"name",({"string",}),}),({"why",({"string",}),}),({"areas",({"string",}),}),({"vouches",({"string",}),}),({"muds",({"string",}),}),({"time",({"int",}),}),}),(["main":({"This the class is used to store playtester application data.",}),"member":({"name the name of the applicant","why why they want to apply","areas the areas of the mud they would like to see developed","vouches their vouches","muds the muds they have played at","time the time they applied at",}),]),}),])
file_name "/handlers/playtesters.c"
last_changed 1200761933
