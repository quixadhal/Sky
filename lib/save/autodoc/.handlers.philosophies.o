#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_all_known":({({"string","*",}),({({"string",}),"person",}),(["main":({"This method returns all the arguments known to the person.",}),"see":({"query_known()","add_known()",}),"param":({"person the person to get the arguments for",}),"return":({"the list of all the known arguments",}),]),}),"reset_known":({({"int",}),({({"string",}),"person",}),(["main":({"This method resets the argument list for the specified person.",}),"see":({"query_known()","query_all_known()",}),"param":({"person the person to remove the argument from",}),]),}),"remove_known":({({"int",}),({({"string",}),"person",({"string",}),"argument",}),(["main":({"This method removes an argument from the specified person.",}),"see":({"query_known()","query_all_known()",}),"param":({"person the person to remove the argument from","argument the argument to remove from the person",}),]),}),"query_known":({({"int",}),({({"string",}),"person",({"string",}),"argument",}),(["main":({"This method checks to see if the person knows the argument.",}),"see":({"add_known()","query_all_known()",}),"param":({"person the person to check the argument for","argument the argument to check to see if it is known",}),"return":({"1 if it is known, 0 if not.",}),]),}),"query_philosophy_type":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the type of the philosophy.  An example of thereturn value from this is \"faith\".",}),"see":({"query_philosphy_bonus()","query_philosphy_effect()","query_philosphy_needed()","query_philosphy_argument()",}),"param":({"name the name of the philosophy to get the type of",}),"return":({"the type of the philosophy",}),]),}),"save_me":({({"void",}),({}),(["main":({"This method saves the current state of the object.",}),]),}),"query_philosophy_names":({({"string","*",}),({}),(["main":({"This method returns the names of all the current philosophies.",}),"see":({"query_philosophy()","add_philosophy()","remove_philosophy()",}),"return":({"an array of strings of the names of philosophies",}),]),}),"query_philosophy_argument":({({"mixed",}),({({"string",}),"name",({"string",}),"argument",}),(["main":({"This method returns the values for the specific argument inphilosophy.   The returned array consists of three values, theyare ({ skill, something, something }).",}),"see":({"query_philosphy_bonus()","query_philosphy_type()","query_philosphy_needed()","query_philosphy_effect()","add_philosphy_argument()","remove_philosphy_argument()",}),"param":({"name the name of the philosphy to get the arguments for","argument the name of the argument to return",}),"return":({"an array of the arguments values",}),]),}),"remove_philosophy_argument":({({"void",}),({({"string",}),"name",({"string",}),"argument",}),(["main":({"This method removes a specified argument from the philosophy.",}),"see":({"add_philosophy_argument()","query_philosoph_argument()",}),"param":({"name the name of the philosphy to remove the argument form","argument the argument name to remove",}),]),}),"query_philosophy_all_arguments":({({"mapping",}),({({"string",}),"name",}),(["main":({"This method returns the arguments of the philosophy.  This returnsa mapping containing the argument values.  This should not beused except for debuggin purposes.",}),"see":({"query_philosphy_bonus()","query_philosphy_type()","query_philosphy_needed()","query_philosphy_effect()","query_philosphy_argument()",}),"param":({"name the name of the philosophy to get the arguments for",}),"return":({"the arguments for the philosophy",}),]),}),"query_philosophy_effect":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the effect of the philosophy.  An example of thereturn value from this is \"/std/effects/religious/theological_debate\".",}),"see":({"query_philosphy_bonus()","query_philosphy_type()","query_philosphy_needed()","query_philosphy_argument()",}),"param":({"name the name of the philosophy to get the effect of",}),"return":({"the effect of the philosophy",}),]),}),"add_philosophy":({({"void",}),({({"string",}),"name",({"string",}),"type",({"int",}),"bonus",({"string",}),"needed",({"string",}),"effect",}),(["main":({"This method adds a philosphy into the current list of philosphies.",}),"see":({"query_philosophy()","query_philosophy_names()","remove_philosophy()",}),"param":({"name the name of the philosophy","type the type of the philosophy","bonus the bonus of the philosophy","needed the string describing what you need","effect the effect of the philosphy",}),"example":({"add_philosophy(\"theology\", \"faith\", 50, \"the power of your faith\",               \"/std/effects/religious/theological_debate\");",}),]),}),"add_known":({({"void",}),({({"string",}),"person",({"string",}),"argument",}),(["main":({"This method adds an argument to the specified person.",}),"see":({"query_known()","query_all_known()",}),"param":({"person the person to add the argument to","argument the argument to add to the person",}),]),}),"query_philosophy":({({"int",}),({({"string",}),"name",}),(["main":({"This method determines if the named philosphy exists.",}),"see":({"query_philosophy_names()","add_philosophy()","remove_philosophy()",}),"param":({"name the name of the philosphy to test",}),"return":({"1 if it exists, 0 if it does not",}),]),}),"remove_philosophy":({({"void",}),({({"string",}),"name",}),(["main":({"This method removes the specified philosophy from the current list.",}),"see":({"query_philosophy()","query_philosophy_names()","add_philosophy() ",}),"param":({"name the name of the philosphy to remove",}),]),}),"query_philosophies":({({"mapping",}),({}),(["main":({"This method returns the current set of philosphies available.The mapping consists of the value being the name of the philosphyand the value being an array consisting of 5 elements.  You shouldbe using this call for anything except debugging purposes.  Itwould create a bad dependancy otherwise.<pre>name : ({      [string]  type (i.e. type.points is used),      [int]     bonus (i.e. bonus in type.points that is needed),      [string]  what is needed/increased to start,      [string]  debate effect file name,      [mapping] arguments    })</pre>",}),"see":({"query_philosophy_names()",}),"return":({"a mapping of values",}),]),}),"query_philosophy_bonus":({({"int",}),({({"string",}),"name",}),(["main":({"This method returns the bonus of the philosophy.  An example of thereturn value from this is 50.",}),"see":({"query_philosphy_type()","query_philosphy_effect()","query_philosphy_needed()","query_philosphy_argument()",}),"param":({"name the name of the philosophy to get the bonus of",}),"return":({"the bonus of the philosophy",}),]),}),"add_philosophy_argument":({({"void",}),({({"string",}),"name",({"string",}),"argument",({"mixed",}),"args",}),(["main":({"This method adds in a philosophy argument to the specified philosophy.",}),"see":({"query_philosophy_argument()","remove_philosophy_argument()",}),"param":({"name the name of the philosophy to add","argument the name of the argument to add","args the parameters for the argument",}),]),}),"query_philosophy_needed":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the needed string of the philosophy.  An example of thereturn value from this is \"the power of your faith\".",}),"see":({"query_philosphy_bonus()","query_philosphy_effect()","query_philosphy_type()","query_philosphy_argument()",}),"param":({"name the name of the philosophy to get the needes string for",}),"return":({"the needed string for the philosophy",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This handler contains all the information on the philosophies usedin philosphical debates.",}),"author":({"Deutha",}),])
define_docs (["SAVE_FILE":([]),"PHILOSOPHY_BONUS":([]),"PHILOSOPHY_ARGUMENTS":([]),"PHILOSOPHY_EFFECT":([]),"PHILOSOPHY_NEEDED":([]),"PHILOSOPHY_TYPE":([]),"P_SAVE_DIR":([]),])
includes ([])
class_docs ([])
file_name "/handlers/philosophies.c"
last_changed 1200761933
