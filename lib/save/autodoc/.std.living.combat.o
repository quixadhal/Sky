#/secure/handlers/autodoc/autodoc_file.c
public_functions (["set_special_manoeuvre":({({"void",}),({}),([]),}),"set_weapon":({({"void",}),({({"object",}),"thing",}),([]),}),"special_attack":({({"class","special_attack_data",}),({({"int",}),"type",({"class","attack_data",}),"att",}),(["main":({"This method is used by the combat handler and returns a class withspecial attack data, if there is one in the queue that fits thespecified arguments.",}),"param":({"type the type of the special attack","att the attack class",}),"return":({"a class with special attack data or 0",}),]),}),"query_target":({({"object",}),({}),([]),}),"query_unarmed_parry":({({"int",}),({}),(["main":({"This returns the current unarmed parry to use in combat.",}),"see":({"query_tactics()",}),"return":({"the current combat unarmed parry",}),]),}),"query_combat_response":({({"string",}),({}),(["main":({"This returns the current reponse to use in combat.",}),"see":({"query_tactics()",}),"return":({"the current combat response",}),]),}),"query_attackables":({({"object","*",}),({}),(["main":({"This method recalculates the hunting structure, and returns an arrayof people we are in the same room with, and who we can attack.If we are on a horse in a room with someone, we start attacking themas well.",}),"return":({"returns an array of people on our attacker list that are inthe room with us",}),]),}),"query_raw_combat_attitude":({({"int",}),({}),(["main":({"This returns the current attitude to use in combat as a raw int.-2 and -1 for defensive, 0 for neutral and 1 and 2 for offensive attitudes.",}),"see":({"query_tactics()",}),"return":({"the current combat attitude",}),]),}),"query_combat_attitude":({({"string",}),({}),(["main":({"This returns the current attitude to use in combat.",}),"see":({"query_tactics()",}),"return":({"the current combat attitude",}),]),}),"query_in_combat":({({"int",}),({}),(["main":({"This method returns whether or not we are in combat.This is only to be used internally by the combat engine.",}),"return":({"1 if we are in combat, 0 if not",}),]),}),"attack_ob":({({"int",}),({({"object",}),"thing",}),(["main":({"This method is called to make us attack someone else.",}),"see":({"query_attacker_list()","attack_by()",}),"param":({"thing the person to attack",}),"return":({"0 if we cannot attack them, 1 if we can",}),]),}),"set_combat_focus":({({"void",}),({({"string",}),"str",}),(["main":({"This sets the bodypart to focus on in combat.",}),"see":({"query_tactics()",}),"param":({"str the new bodypart to focus on",}),]),}),"set_attacker":({({"void",}),({({"object",}),"thing",}),([]),}),"remove_defender":({({"int",}),({({"object",}),"thing",}),(["main":({"This method will remove a defender from the current list of defendersfor this living object.",}),"see":({"add_defender()","query_defenders()",}),"param":({"thing the defender to remove",}),]),}),"add_defender":({({"int",}),({({"object",}),"thing",}),(["main":({"This method will add a defender to the current list of defendersfor this living object.",}),"see":({"remove_defender()","query_defenders()",}),"param":({"thing the defender to add",}),]),}),"query_concentrating":({({"object",}),({}),(["main":({"This method returns the creature we are currently concentrating on.",}),"see":({"query_attacker_list()",}),"return":({"the creature that is being concentrated on",}),]),}),"stop_hunting":({({"void",}),({}),(["main":({"This method stops us hunting people on our hunting list.",}),]),}),"attack_by":({({"int",}),({({"object",}),"thing",}),(["main":({"This methid is called when the living object is attacked by something.",}),"see":({"query_attacker_list()","attack_ob()",}),"param":({"thing the thing we are attacked by",}),"return":({"0 if we cannot attack them, 1 if we can",}),]),}),"make_corpse":({({"object",}),({}),(["main":({"This method will create a corpse for the living object when iteventually dies.  Of old age of course, no one would die of havinga sword rammed through them.",}),"return":({"the created corpse object",}),]),}),"query_tactics":({({"class","combat_tactics",}),({}),(["main":({"This method returns the current tactics set.This method will return a class with four elements in it:<pre>({   attitude,   response,   parry,   unarmed_parry,})</pre>The first element is an int, signifying the attitude of the player,the secon two are strings, which correspond to thevalues as set in the tactics player help file.",}),"index":({"tactics",}),"see":({"query_combat_attitude()","query_combat_response()","query_combat_parry()","query_combat_unarmed_parry()",}),"return":({"the current tactics array set",}),]),}),"query_combat_focus":({({"string",}),({}),(["main":({"This returns the bodypart we are currently focusing on.",}),"see":({"query_tactics()",}),"return":({"the bodypart we are currently focusing on",}),]),}),"add_protector":({({"int",}),({({"object",}),"thing",}),(["main":({"This method will add a protector to the current list of protectorsfor this living object.",}),"see":({"remove_protector()","query_protectors()",}),"param":({"thing the protector to add",}),]),}),"dont_attack_me":({({"int",}),({}),(["main":({"This function is to be shadowed, if you wantthe creature to be unattackable.",}),]),}),"query_fighting":({({"int",}),({}),(["main":({"This method returns true if the object is fightingsomeone in the room.",}),"see":({"query_attacker_list()",}),"param":({"return 1 if the creature is fighting someonein the room, 0 if not",}),]),}),"remove_protector":({({"int",}),({({"object",}),"thing",}),(["main":({"This method will remove a protector from the current list of protectorsfor this living object.",}),"see":({"add_protector()","query_protectors()",}),"param":({"thing the protector to remove",}),]),}),"query_weapon":({({"object",}),({}),([]),}),"reset_defenders":({({"void",}),({}),(["main":({"This method resets the defenders array back to being nothing.",}),]),}),"death_helper":({({"mixed","*",}),({({"object",}),"thing",({"int",}),"death",}),(["main":({"This method deals with any cute messages you want to print whensomething dies or, cute things you want to do (like not diengat all).  It handles the alignment shift due to the killing ofthis npc as well.",}),"see":({"make_corpse()",}),"param":({"thing the thing which killed us","death",}),]),}),"fight_in_progress":({({"void",}),({({"object",}),"thing",}),(["main":({"This method is called when there is a fight in progress.  It willpropogate the event onto all the objects in the room.",}),"param":({"thing the person fighting",}),]),}),"set_target":({({"void",}),({({"object",}),"thing",}),([]),}),"query_special_manoeuvre":({({"int",}),({}),([]),}),"set_combat_parry":({({"void",}),({({"string",}),"parry",}),(["main":({"This sets the current parry to use in combat.",}),"see":({"query_tactics()",}),"param":({"parry the new combat parry",}),]),}),"query_attacker_list":({({"object","*",}),({}),(["main":({"This method returns the array of creatures we are fighting.It lists all those who are not currently in the room with us as well.",}),"see":({"query_concentrating()","query_fighting()",}),"return":({"the attacker list",}),]),}),"set_combat_response":({({"void",}),({({"string",}),"response",}),(["main":({"This sets the current reponse to use in combat.",}),"see":({"query_tactics()",}),"param":({"response the new combat response",}),]),}),"query_protectors":({({"object","*",}),({}),(["main":({"This method returns the current array of protectors on the livingobject.  This is the people who are protecting us, so if we are hitmake them attack the hitter.",}),"see":({"add_protector()","remove_protector()",}),"return":({"the current protectors array",}),]),}),"query_defenders":({({"object","*",}),({}),(["main":({"This method returns the current array of defenders on the livingobject.  This is the people who are defending us, so if we are hitmake them attack the hitter and parry for us.",}),"see":({"add_defender()","remove_defender()",}),"return":({"the current defenders array",}),]),}),"set_combat_attitude":({({"void",}),({({"string",}),"attitude",}),(["main":({"This sets the current attitude to use in combat.",}),"see":({"query_tactics()",}),"param":({"attitude the new combat attitude",}),]),}),"stop_all_fight":({({"void",}),({}),(["main":({"This method stops the creature from attacking everyoneon its attacker list.",}),"see":({"stop_fight()",}),]),}),"is_fighting":({({"int",}),({({"object",}),"ob",}),(["main":({"This method determines whether or not the object is fighting anotherobject.",}),"see":({"query_attacker_list()","query_concentrating()",}),"param":({"ob the object being tested",}),"return":({"1 if it is in combat, 0 if it is not.",}),]),}),"register_special_attack":({({"void",}),({({"int",}),"type",({"int",}),"flags",({"string",}),"ob",({"string",}),"fun",({"mixed",}),"data",({"int",}),"expire",}),(["main":({"This method adds a special attack callback into our special attack queue.",}),"param":({"type the type of the special attack","flags the stage flags for the special attack","ob the name of the callback object","fun the name of the callback function","data any data specific to the special attack","expire the time after which this special should expire",}),]),}),"reset_special_manoeuvre":({({"void",}),({}),([]),}),"query_combat_parry":({({"string",}),({}),(["main":({"This returns the current parry to use in combat.",}),"see":({"query_tactics()",}),"return":({"the current combat parry",}),]),}),"stop_fight":({({"void",}),({({"object",}),"thing",}),(["main":({"This method stops the creature from attacking another creature.",}),"see":({"stop_all_fight()",}),"param":({"thing the creature to stop attacking",}),]),}),"query_attacker":({({"object",}),({}),([]),}),"reset_protectors":({({"void",}),({}),(["main":({"This method resets the protector array back to being nothing.",}),]),}),"do_death":({({"varargs","object",}),({({"object",}),"thing",({"object",}),"weapon",({"string",}),"attack",}),(["main":({"This does the actual death and co ordinates the death into a wellordered feeding frenzy.  This method creates the actual corpse itself.If the property \"dead\" is set on the object no corpse will becreated, or if the second_life() function called on the objectreturns a non-zero value the corpse will not be created.<p>This method calls the second_life() function on the current object,if this returns 1 it must handle all the the death code itself.This is used in the player code to override the death code.",}),"index":({"second_life",}),"see":({"death_helper()","make_corpse()","alter_corpse()",}),"param":({"thing the thing which killed us","weapon the weapon (sword,claw,etc) object that attacked and killed us","attack the actual attack that killed us",}),"return":({"the corpse, or 0 if no more action is to be taken",}),]),}),"set_unarmed_parry":({({"void",}),({({"int",}),"parry",}),(["main":({"This sets the current unarmed parry to use in combat.",}),"see":({"query_tactics()",}),"param":({"parry the new unarmed parry flag",}),]),}),])
protected_functions (["start_combat":({({"void",}),({({"object",}),"thing",}),(["main":({"This method makes us actually attack someone.",}),"param":({"thing the creature we want to attack",}),]),}),])
inherits (["/std/weapon_logic":({}),"/std/living/corpse":({}),])
main_docs (["changed":({"Added the combat code with some tweaks - Sandoz, May 2003.",}),"main":({"This file contains all the methods and fun things to handle combatfrom the living object side of things.",}),"author":({"Pinkfish",}),])
define_docs (["HUNTING_TIME":(["main":({"This defines after how long we will give up hunting someone. ",}),]),])
includes (["/include/tasks.h":1059677152,"/include/player.h":1036911799,"/include/combat.h":1056792172,"/include/playtesters.h":1020949410,])
class_docs (["combat_data":({0,({({"attackers",({"class","attacker_data","*",}),}),({"concentrating",({"class","attacker_data",}),}),({"protectors",({"object","*",}),}),({"defenders",({"object","*",}),}),({"attacker",({"object",}),}),({"target",({"object",}),}),({"weapon",({"object",}),}),({"special_manoeuvre",({"int",}),}),({"in_combat",({"int",}),}),({"sp_queue",({"class","special_attack_data","*",}),}),}),([]),}),"attacker_data":({0,({({"ob",({"object",}),}),({"name",({"string",}),}),({"time",({"int",}),}),}),([]),}),"combat_tactics":({0,({({"attitude",({"int",}),}),({"response",({"string",}),}),({"parry",({"string",}),}),({"unarmed_parry",({"int",}),}),({"focus",({"string",}),}),}),([]),}),])
file_name "/std/living/combat.c"
last_changed 1121402745
