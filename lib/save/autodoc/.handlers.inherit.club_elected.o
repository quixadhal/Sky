#/secure/handlers/autodoc/autodoc_file.c
public_functions (["holds_any_position_of":({({"int",}),({({"string",}),"name",({"string",}),"person",}),(["main":({"This method will determine if the specified person holds any position in the club.",}),"param":({"name the name of the club to check for the positions","person the name of the person to check in the positions",}),"return":({"1 if they are in the position, 0 if not",}),]),}),"is_voting_in_progress":({({"int",}),({({"string",}),"club",}),(["main":({"This method checks to see if the election is in the voting phase.",}),"see":({"is_election_in_progress()","is_nomination_in_progress()",}),"param":({"club the name of the club to check",}),]),}),"query_minimum_next_election":({({"int",}),({({"string",}),"name",}),(["main":({"This method returns the minimum time between elections.",}),"param":({"name the name of the club to get the time for",}),"return":({"the minimum time for the next election",}),]),}),"query_committee":({({"string","*",}),({({"string",}),"club_name",}),(["main":({"This method returns the committee of the club.  The committee is anyonewho holds a position.",}),"param":({"club_name the name of the club",}),"return":({"the array of people who hold positions",}),]),}),"query_announcement_time":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method returns the time at which the current announcementwas added.",}),"param":({"club_name the name of the club",}),"return":({"the time the announcement was added",}),]),}),"add_account_allowed_person":({({"int",}),({({"string",}),"club_name",({"string",}),"account",({"string",}),"person",}),(["main":({"This method adds a person to the allowed people array.",}),"see":({"remove_acount_allowed_person()","query_account_allowed_person()",}),"param":({"club_name the name of the club","account the name of the account","person the person to add to the array",}),]),}),"is_treasurer_of":({({"int",}),({({"string",}),"name",({"string",}),"treasurer",}),(["main":({"This method will determine if the specified person is the treasurer ofthe club.",}),"param":({"name the name of the club to check the treasurer of","treasurer the person to check to see if they are the treasurer",}),"return":({"1 if they are in the position, 0 if not",}),]),}),"query_valid_positions":({({"string","*",}),({({"string",}),"club_name",}),(["main":({"This method returns the list of available positions for the club.",}),"param":({"club_name the name of the club",}),"return":({"the list of available positions",}),]),}),"is_nomination_accepted":({({"int",}),({({"string",}),"club_name",({"string",}),"position",({"string",}),"person",}),(["main":({"This method checks to see if the nomination has been accepted.  Currentlya nomination is accepted if there is more than 2 people nominated and oneof them is the person who is nominated.",}),"see":({"is_nominated_for()","query_nominators_for()",}),"param":({"club_name the name of the club to check","position the position they are nominated for","person the person who has been nominated",}),"return":({"1 if they are nominated, 0 if not",}),]),}),"query_position_name":({({"string",}),({({"string",}),"club_name",({"string",}),"position",}),(["main":({"This method figures out the actualy index of the position in the mappingsand stuff associated with the position.",}),"see":({"query_valid_positions()","nominate_person()","vote_for_person()",}),"param":({"club_name the name of the club","position the position to create the index for",}),"return":({"the position index",}),]),}),"query_boards":({({"string","*",}),({}),(["main":({"This method returns all the clubs which currently have boards.This is their normalised names.",}),"return":({"the list of boards",}),]),}),"is_nominated_for":({({"int",}),({({"string",}),"club_name",({"string",}),"position",({"string",}),"person",}),(["main":({"This method checks to see if the specified person has been nominated forthe position.",}),"see":({"has_person_voted()","nominate_person()","is_valid_position()","is_nomination_accepted()",}),"param":({"club_name the name of the club","position the position they have been nominated for","person the person who is nominated to that position",}),"return":({"1 if they have been nominated, 0 if not",}),]),}),"remove_elected_option":({({"int",}),({({"string",}),"club_name",({"string",}),"option",}),(["main":({"This method removes an option in the club.  Options are use for thingslike setting if the club has a board associated with it, or otheroptional elements.",}),"see":({"query_elected_option()","is_elected_option()",}),"param":({"club_name the name of the club to remove the option in","option the name of the option to remove",}),"return":({"1 on success, 0 on failure",}),]),}),"has_person_voted":({({"int",}),({({"string",}),"club_name",({"string",}),"position",({"string",}),"person",}),(["main":({"This method checks to see if the person has already voted in the election.If the position is not being voted on then, then it will always assumethey have voted for that position.",}),"see":({"is_valid_position()","vote_for_person()","has_nominated_person()",}),"param":({"club_name the name of the club","position the position they have voted in","person the person to check to see if they have voted",}),"return":({"1 if they have voted, 0 if not",}),]),}),"remove_money":({({"int",}),({({"string",}),"name",({"int",}),"amount",({"int",}),"type",({"string",}),"person",({"string",}),"account",({"string",}),"information",}),(["main":({"This method removes money from the account.",}),"see":({"pay_money()","query_balance()","query_transactions()",}),"param":({"name the name of the club","amount the amount to change the balance by","type the type of transaction","person the person doing the transaction","account the account being changed","information the information about the deposit",}),"return":({"1 if the removal is a success",}),]),}),"set_elected_option":({({"int",}),({({"string",}),"club_name",({"string",}),"option",({"mixed",}),"value",}),(["main":({"This method sets an option in the club.  Options are use for thingslike setting if the club has a board associated with it, or otheroptional elements.",}),"see":({"query_elected_option()","is_elected_option()",}),"param":({"club_name the name of the club to set the option in","option the name of the option to set","value the new value of the option",}),"return":({"1 on success, 0 on failure",}),]),}),"finish_nomination":({({"mixed",}),({({"string",}),"club_name",}),(["main":({"This method finishes the nomination stuff.  The return will be 0 if theelection is not valid for this club.  If the election was valid it willreturn an array of positions that do not have enough nominated people tocomplete the election for.  If the return array is 0 in size then thenext phase of the election is setup.",}),"see":({"start_election()","nominate_person()","vote_for_person()",}),"param":({"club_name the name of the club to finish the nomination for",}),"return":({"see description for return values",}),]),}),"query_transactions":({({"class","club_transaction","*",}),({({"string",}),"name",({"string",}),"account",}),(["main":({"This method returns the transaction history for the club.  This will onlybe kept track of for elected clubs.",}),"see":({"add_money()","remove_money()",}),"param":({"name the name of the club","account the name of the account",}),"return":({"the array of transactions",}),]),}),"is_allowed_to_modify_account":({({"int",}),({({"string",}),"club_name",({"string",}),"account",({"string",}),"person",}),(["main":({"This method checks to see if the specified person is allowed toaccess the account.  It checks based on both position and name.",}),"see":({"query_account_allowed_people()","add_money()","remove_money()","query_account_allowed_positions()",}),"param":({"club_name the name of the club","account the name of the account","person the person's name to check",}),"return":({"1 if they can access the account, 0 if they cannot",}),]),}),"query_position_members":({({"string",}),({({"string",}),"club_name",({"string",}),"position",}),(["main":({"This method returns the members of the particular position.",}),"see":({"query_valid_position()","is_valid_position()",}),"param":({"club_name the name of the club","position the name of the position",}),"return":({"the array of members of the position",}),]),}),"query_election_status":({({"string",}),({({"string",}),"club_name",}),(["main":({"This method queries the status associated with the election.  Thestatus will say things like when certain positions have not beenvoted for and other such stuff.",}),"see":({"complete_election()","finish_nomination()",}),"param":({"club the club name to get the status of",}),"return":({"the status string of the club",}),]),}),"remove_club_board":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method removes the club's board.",}),"param":({"club_name the name of the club to remove the board from",}),"return":({"1 on success, 0 on failure",}),]),}),"query_archives":({({"class","club_archive","*",}),({({"string",}),"club_name",}),(["main":({"This method returns the archives for this club.",}),"param":({"club_name the name of the club to get archives from",}),"return":({"the archives for the club",}),]),}),"is_elected_option":({({"int",}),({({"string",}),"club_name",({"string",}),"option",}),(["main":({"This method checks to see if the specified option exists in thisclub.",}),"see":({"set_elected_option()","query_elected_option()",}),"param":({"club_name the name of the club","option the name of the option to test",}),"return":({"1 if the option exists, 0 if not",}),]),}),"add_money":({({"int",}),({({"string",}),"name",({"int",}),"amount",({"int",}),"type",({"string",}),"person",({"string",}),"account",({"string",}),"information",}),(["main":({"This method will pay a certain amount of money to club.  This will behow long the club is payed until.  The club will cost a certainamount for each member as well as a base cost.",}),"see":({"remove_money()","query_balance()","query_transactions()",}),"param":({"name the name of the club","amount the amount to add","type the type of transaction","person the person doing the transaction","account the account being changed","information the information about the deposit",}),"return":({"the amount of money not able to be placed in the account",}),]),}),"is_nomination_in_progress":({({"int",}),({({"string",}),"club",}),(["main":({"This method checks to see if the election is in the nomination phase.",}),"see":({"is_election_in_progress()","is_voting_in_progress()",}),"param":({"club the name of the club to check",}),]),}),"vote_for_person":({({"int",}),({({"string",}),"club_name",({"string",}),"position",({"string",}),"person",({"string",}),"voter",}),(["main":({"This method sets up a vote for a specific person for a position.",}),"see":({"start_election()","finish_nomination()","nominate_person()",}),"param":({"club_name the name of the club to make the vote in","position the position you are voting for","person the person to vote for","voter the person doing the voting",}),"return":({"1 on success, 0 on failure",}),]),}),"remove_position_in_club":({({"int",}),({({"string",}),"name",({"string",}),"position",}),(["main":({"This method removes a position from a club.  The 4 basic positions cannotbe removed.",}),"see":({"create_position_in_club()",}),"param":({"name the name of the club to remove the position from","position the position to remove",}),"return":({"1 on success, 0 on failure",}),]),}),"is_secretary_of":({({"int",}),({({"string",}),"name",({"string",}),"secretary",}),(["main":({"This method will determine if the specified person is the secretary ofthe club.",}),"param":({"name the name of the club to check the secretary of","secretary the person to check to see if they are the secretary",}),"return":({"1 if they are in the position, 0 if not",}),]),}),"remove_account_allowed_position":({({"int",}),({({"string",}),"club_name",({"string",}),"account",({"string",}),"position",}),(["main":({"This method removes a position from the allowed positions array.",}),"see":({"add_acount_allowed_position()","query_account_allowed_position()",}),"param":({"club_name the name of the club","account the name of the account","position the position to remove from the array",}),]),}),"query_next_event_time":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method returns the time the next event will occur.  The next eventwill be either the end of the nomination phase or the end of thevoting phase.",}),"see":({"complete_election()","start_election()","finish_nomination()",}),"param":({"club_name the name of the club to get the event of",}),"return":({"the time of the next event",}),]),}),"complete_election":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method completes the election.",}),"see":({"start_election()","finish_nomination()","nominate_person()","vote_for_person()",}),"param":({"club_name the name of the club the election is being completed for",}),]),}),"query_last_election":({({"int",}),({({"string",}),"name",}),(["main":({"This method returns the time of the last election.",}),"param":({"name the name of the club to get the time for",}),"return":({"the time of the last election",}),]),}),"set_announcement":({({"int",}),({({"string",}),"club_name",({"string",}),"announce",}),(["main":({"This sets the current announcement.",}),"param":({"club_name the name of the club","announce the new announcement",}),"return":({"1 on success, 0 on failure",}),]),}),"is_president_of":({({"int",}),({({"string",}),"name",({"string",}),"president",}),(["main":({"This method will determine if the specified person is the president ofthe club.",}),"param":({"name the name of the club to check the president of","president the person to check for being the president",}),"return":({"1 if they are in the position, 0 if not",}),]),}),"add_account_allowed_position":({({"int",}),({({"string",}),"club_name",({"string",}),"account",({"string",}),"position",}),(["main":({"This method adds a position to the allowed positions array.",}),"see":({"remove_acount_allowed_position()","query_account_allowed_position()",}),"param":({"club_name the name of the club","account the name of the account","position the position to add to the array",}),]),}),"create_position_in_club":({({"int",}),({({"string",}),"name",({"string",}),"position",}),(["main":({"This method creates a position in the club.",}),"see":({"query_position_members()","is_valid_position()","query_valid_positions()",}),"param":({"name the name of the club to create the position in","position the name of the position",}),]),}),"check_board_post":({({"int",}),({({"int",}),"type",({"string",}),"board",({"string",}),"previous",({"string",}),"name",({"int",}),"num",}),(["main":({"This method checks to see what access the person has to the board.",}),"param":({"type the type of operation","board the name of the board","previous the previous object","name the name of the person reading the message","num the number of posts blasted when posting",}),"return":({"1 on success, 0 on failure",}),]),}),"query_nominated_for":({({"string","*",}),({({"string",}),"club_name",({"string",}),"position",}),(["main":({"This method returns the list of people that have been nominated forthe specified position in the specified club.",}),"see":({"is_nominate_for()","nominate_person()",}),"param":({"club_name the name of the club","position the position to get the names of",}),]),}),"holds_position_of":({({"int",}),({({"string",}),"name",({"string",}),"position",({"string",}),"person",}),(["main":({"This method will determine if the specified person holds aposition in the club.",}),"see":({"holds_any_position_of()","is_secretary_of()","is_president_of()","is_vice_president_of()","is_treasurer_of()",}),"param":({"name the name of the club to check for the position","position the name of the position to check","person the name of the person to check in the position",}),"return":({"1 if they are in the position, 0 if not",}),]),}),"change_position_name_in_club":({({"int",}),({({"string",}),"name",({"string",}),"position",({"string",}),"new_position",}),(["main":({"This method changes the name of the position in the club.",}),"see":({"create_position_in_club()","is_valid_position()",}),"param":({"name the name of the club to create the position in","position the name of the position to change","new_position the new name of the position",}),]),}),"create_club_board":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method creates a board for the club.",}),"see":({"query_club_board()",}),"param":({"club_name the name of the club to create the board for",}),"return":({"1 on success, 0 on failure",}),]),}),"query_elected_option":({({"mixed",}),({({"string",}),"club_name",({"string",}),"option",}),(["main":({"This method queries the option in the club.",}),"see":({"set_elected_option()","is_elected_option()",}),"param":({"club_name the name of the club","option the name of the option to query",}),"return":({"the value of the option",}),]),}),"query_next_election":({({"int",}),({({"string",}),"name",}),(["main":({"This method returns the time of the next election.",}),"param":({"name the name of the club to get the time for",}),"return":({"the time of the next election",}),]),}),"nominate_person":({({"int",}),({({"string",}),"club_name",({"string",}),"position",({"string",}),"person",({"string",}),"nominating",}),(["main":({"This method nominates someone for a certain position in the club.",}),"see":({"start_election()","finish_nomination()","vote_for_person()",}),"param":({"club_name the name of the club to nominate someone in","position the position to nominate someone for","person the person to nominate","nominating the person doing the nominating",}),"return":({"1 if successfuly nominated",}),]),}),"query_announcement":({({"string",}),({({"string",}),"club_name",}),(["main":({"This method returns the current announcement string.",}),"param":({"club_name the name of the club",}),"return":({"the announcement string",}),]),}),"has_nominated_person":({({"int",}),({({"string",}),"club_name",({"string",}),"position",({"string",}),"nominated",({"string",}),"by",}),(["main":({"This method checks to see if the person has already nominatedsomeone for this position.",}),"see":({"is_valid_position()","vote_for_person()","has_person_voted()",}),"param":({"club_name the name of the club","position the position they have voted in","person the person to check to see if they have voted",}),]),}),"is_election_in_progress":({({"int",}),({({"string",}),"club",}),(["main":({"This method checks to see if there is currently an election in progress.",}),"see":({"complete_election()","start_election()","is_nomination_in_progress()","is_voting_in_progress()",}),"param":({"club_name the name of the club to check for an election",}),"return":({"1 if there is an election in progress, 0 if not",}),]),}),"start_election":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method starts an election for the specified club.",}),"see":({"nominate_person()","finish_nominations()","vote_for_person()",}),"param":({"club_name the name of the club to start an election for",}),"return":({"1 if the election is successful started",}),]),}),"query_account_allowed_people":({({"string","*",}),({({"string",}),"club_name",({"string",}),"account",}),(["main":({"This method returns the people which allowed to manipulate theaccount.",}),"see":({"add_acount_allowed_person()","remove_account_allowed_person()",}),"param":({"club_name the name of the club","account the name of the account",}),"return":({"the array of people which can manipulate the account",}),]),}),"query_club_board":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method checks to see if the club has a board.",}),"see":({"query_boards()",}),"param":({"club_name the name of the club to check",}),"return":({"1 on success, 0 on failure",}),]),}),"query_nominators_for":({({"string","*",}),({({"string",}),"club_name",({"string",}),"position",({"string",}),"nominated",}),(["main":({"This method returns the people who nominated the specified personto the position.",}),"see":({"query_nominated_for()","is_nomination_accepted()",}),"param":({"club_name the name of the club","position the position they were nominated for","nominated the person who was nominated",}),"return":({"who nominated them",}),]),}),"is_basic_position":({({"int",}),({({"string",}),"club_name",({"string",}),"position",}),(["main":({"This method determines if the position is one of the 4 basic positions.",}),"see":({"is_valid_position()",}),"param":({"club_name the name of the club to check","position the position to check",}),"return":({"1 if it is, 0 if not",}),]),}),"query_account_allowed_positions":({({"string","*",}),({({"string",}),"club_name",({"string",}),"account",}),(["main":({"This method returns the positions which are allowed to manipulate theaccount.",}),"param":({"club_name the name of the club","account the name of the account",}),"return":({"the array of people which can manipulate the account",}),]),}),"query_transaction_type_name":({({"string",}),({({"int",}),"type",}),(["main":({"This method returns the string name of the transaction type.",}),"see":({"query_transactions()",}),"param":({"type the type to return the transaction type for",}),"return":({"the nice transaction type",}),]),}),"is_valid_position":({({"int",}),({({"string",}),"club_name",({"string",}),"position",}),(["main":({"This method determines if this is a valid position for the club.",}),"see":({"query_valid_positions()","nominate_person()","vote_for_person()",}),"param":({"club_name the name of the club","position the position to check",}),"return":({"1 if the position is ok, 0 if not",}),]),}),"remove_account_allowed_person":({({"int",}),({({"string",}),"club_name",({"string",}),"account",({"string",}),"person",}),(["main":({"This method removes a person from the allowed people array.",}),"see":({"add_acount_allowed_person()","query_account_allowed_person()",}),"param":({"club_name the name of the club","account the name of the account","person the person to remove from the array",}),]),}),"is_vice_president_of":({({"int",}),({({"string",}),"name",({"string",}),"vice_president",}),(["main":({"This method will determine if the specified person is the vice president ofthe club.",}),"param":({"name the name of the club to check the vice president of","vice_president the person to check for being the vice president",}),"return":({"1 if they are in the position, 0 if not",}),]),}),"query_club_board_name":({({"string",}),({({"string",}),"club_name",}),(["main":({"This method returns the name of the board for the club.",}),"param":({"club_name the name of the club to get the board for",}),"return":({"the name of the club, 0 if no board",}),]),}),])
protected_functions (["do_mail_committee":({({"void",}),({({"string",}),"club_name",({"string",}),"subject",({"string",}),"body",}),(["main":({"This method will mail a messsage to the committee.  Useful forinforming members of problems and things.",}),"param":({"club_name the name of the club to mail","subject the subject to use","body the body of the message",}),]),}),"add_archive":({({"int",}),({({"string",}),"club_name",({"string",}),"subject",({"string",}),"thingy",}),(["main":({"This method adds to the archives of things for the current club.",}),"param":({"club_name the name of the club","thingy the thing to archive",}),"return":({"1 on success, 0 on failure",}),]),}),"query_elected_info":({({"class","election_info",}),({({"string",}),"name",}),(["main":({"This method returns the elected info associated with the club.",}),"param":({"name the name of the club to get the info for",}),"return":({"the elected club class, 0 if no club or not elected type",}),]),}),"set_position_holder":({({"int",}),({({"string",}),"club_name",({"string",}),"position",({"string",}),"person",}),(["main":({"This method sets the specified person as the holder of the position.",}),"param":({"club_name the name of the club to set the position in","position the name of the position","person the person who will hold it",}),"return":({"1 on success, 0 on failure",}),]),}),"query_account_info":({({"class","account_info",}),({({"string",}),"name",({"string",}),"account",}),(["main":({"This method returns the information about the specified account.",}),"param":({"name the name of the club","account the name of the account",}),"return":({"the account info",}),]),}),"check_elected_information":({({"void",}),({({"string",}),"name",({"string",}),"member",({"int",}),"startup",}),(["main":({"This method checks the extra information for the club.  Please notethis does *not* save the information.  You need to do this yourself.",}),"see":({"check_clubs()",}),"param":({"name the name of the club to check",}),]),}),])
inherits (["/handlers/inherit/club_family":({}),])
main_docs (["main":({"This is the handler for all things clubby, a club being a group ofplayers.  Each club must have a unique name.  It also handles electionsfor various club positions.",}),"started":({"Sun Sep 27 03:35:42 EDT 1998",}),"author":({"Pinkfish",}),])
define_docs (["CLUB_SECRETARY_INDEX":([]),"CLUB_ORDINARY_COMMITTEE_INDEX":([]),"CLUB_ELECTION":([]),"CLUB_PRESIDENT_INDEX":([]),"CLUB_DISCUSS_MESSAGE_LONG_DESCRIPTION":([]),"CLUB_TREASURER_INDEX":([]),"CLUB_DISCUSS_MESSAGE_VERIFY":([]),"CLUB_MAX_ARCHIVE_SIZE":([]),"CLUB_DISCUSS_MESSAGE_NOMINATION":([]),"CLUB_BOARD_PREFIX":([]),"CLUB_VICE_PRESIDENT_INDEX":([]),"CLUB_DISCUSS_MESSAGE_COMPLETE":([]),"CLUB_NOMINATION":(["main":({"This is for an elected club, elected clubs ellect their officals andstuff.  The treasurer etc are actually the indexes to be used into thepositions mapping to determine the actual member which holds theposition.",}),"member":({"treasurer the name of the treasurer of the club's position","president the name of the president of the club's position","vice_president the name of the vice president of the club's position","secretary the name of the secretary of the club's position","account_info information about the accounts","positions the special extra positions available in the club","last_election when the last election was held","discussion the current items up for discussion",}),]),"CLUB_DISCUSS_MESSAGE_SHORT_DESCRIPTION":([]),"CLUB_NOMINATION_SECOND":([]),])
includes (["/include/board.h":1027323664,"/include/mail.h":999081362,"/include/time.h":1049465667,"/include/clubs.h":1050407666,])
class_docs (["election_data":({0,({({"time_of_event",({"int",}),}),({"state",({"int",}),}),({"people",({"mapping",}),}),({"nominated",({"mapping",}),}),({"voted_for",({"mapping",}),}),({"election_status",({"string",}),}),}),(["main":({"This class which keeps track of a currently running election.",}),"member":({"time_of_event the time the election started","state the current state of the election","people the current votes for the specified person.<br>The format is: ([ position : ([ person : votes, ... ]) ... ])","voted_for which positions everyone has voted for.<br>The format is: ([ person : ({ position, position, ... }) ])","nominated the people who have been nominated for each positionand who nominated them.<br>This is in the format: ([ position: ([ person : ({ nominations }) ]) ])A person must be seconded before they are actually added asa potential for a position.","election_status the status of the election, this is used withdefines.",}),]),}),"election_info":({0,({({"treasurer",({"string",}),}),({"president",({"string",}),}),({"vice_president",({"string",}),}),({"secretary",({"string",}),}),({"account_info",({"mapping",}),}),({"positions",({"mapping",}),}),({"last_election",({"int",}),}),({"election_period",({"int",}),}),({"options",({"mapping",}),}),({"discussion",({"class","discussion_idea","*",}),}),({"archives",({"class","club_archive","*",}),}),({"announcement",({"string",}),}),({"announce_time",({"int",}),}),}),(["main":({"This is for an elected club, elected clubs ellect their officals andstuff.  The treasurer etc are actually the indexes to be used into thepositions mapping to determine the actual member which holds theposition.",}),"member":({"treasurer the name of the treasurer of the club's position","president the name of the president of the club's position","vice_president the name of the vice president of the club's position","secretary the name of the secretary of the club's position","account_info information about the accounts","positions the special extra positions available in the club","last_election when the last election was held","discussion the current items up for discussion",}),]),}),"account_info":({0,({({"transactions",({"class","club_transaction","*",}),}),({"allowed_people",({"string","*",}),}),({"allowed_positions",({"string","*",}),}),}),(["main":({"This class keeps track of the accounts, it has the transactioninfo for the account and other stuff.",}),"member":({"transactions the transactions for the account","allowed_people the people that can use the account","allowed_positions the positions that can use the account",}),]),}),])
file_name "/handlers/inherit/club_elected.c"
last_changed 1021623226
