#/secure/handlers/autodoc/autodoc_file.c
public_functions (["set_open_trap":({({"void",}),({({"object",}),"ob",({"string",}),"func",}),(["main":({"This sets the function to be called when someone attempts toopen the object.  The function does not have to be in theobject's file, and can be specified using the 'ob' paramater.In most cases the function will be stored in the same file,so use TO in these cases.The function will be called with a single string parameter of \"open\" or\"close\"",}),"see":({"query_open_trap_func()","query_open_trap_ob()",}),"param":({"ob The object in which the function is stored.","func The function to be called.",}),]),}),"set_lock_trap":({({"void",}),({({"object",}),"ob",({"string",}),"func",}),(["main":({"This sets the function to be called when someone attempts tounlock the object.  The function does not have to be in theobject's file, and can be specified using the 'ob' paramater.In most cases the function will be stored in the same file,so use TO in these cases.The function will be called with a single string parameter of \"lock\",\"unlock\" or \"pick\"",}),"see":({"query_lock_trap_func()","query_lock_trap_ob()",}),"param":({"ob The object in which the function is stored.","func The function to be called.",}),]),}),"set_transparent":({({"void",}),({}),(["main":({"This sets the object as being transparent.A transparent object is one in which you can see theinventory even if it is closed.",}),"see":({"reset_transparent()","query_transparent()",}),]),}),"query_closed_locked_status":({({"int",}),({}),(["main":({"This method returns the closed and locked status.  The status is0 if open and unlocked, 1 if locked, 2 if closed and 3 if closedand locked.",}),"return":({"closed and locked status",}),]),}),"query_stuck":({({"int",}),({}),(["main":({"This tells you whether an object is stuck or not.  It willreturn 1 if the object is stuck, and 0 if the object is notstuck.",}),"see":({"set_stuck()",}),"return":({"Return 1 if the object is stuck, and 0 if it is not.",}),]),}),"pick_unlock":({({"int",}),({({"object",}),"player",}),(["main":({"This is called when someone successfully unlocks the object.If there is a trap, and the trap function returns true, theobject will not be opened.  If the trap function returnsfalse, the object will still be opened even if the trap issprung.",}),"param":({"player The player who is unlocking the object.",}),"return":({"Returns 1 if the object was unlocked, and 0 otherwise.",}),]),}),"query_key":({({"string",}),({}),(["main":({"This returns the property of the key that will unlock theobject.",}),"see":({"set_key()",}),]),}),"set_unlocked":({({"void",}),({}),(["main":({"This sets the object as being unlocked.",}),"see":({"set_locked()",}),]),}),"query_closed":({({"int",}),({}),(["main":({"This function tells you whether an object is open or closed.It returns 1 if the object is closed, and 0 if the object is open.",}),"see":({"set_open()","set_closed()",}),"return":({"Return 1 if closed, 0 if open.",}),]),}),"set_closed":({({"void",}),({}),(["main":({"This sets the object as being closed.  If you are movingobjects into the object, make sure that you do not setthe object as closed and then try to move the objects in.Move the objects in and then close the object.",}),"see":({"set_open()","query_closed()",}),]),}),"query_unlockable":({({"int",}),({}),(["main":({"This tells us whether the object can be locked or not.",}),"see":({"set_autolock()",}),"return":({"1 for true 0 for false;",}),]),}),"query_open":({({"int",}),({}),(["main":({"This function tells you whether an object is open or closed.It returns 1 if the object is open and 0 if the object is closed.",}),"see":({"set_open()","set_closed()",}),"return":({"Return 1 if open, 0 if closed.",}),]),}),"query_autolock":({({"int",}),({}),(["main":({"This tells us whether an object will lock automatically when closed.",}),"see":({"set_autolock()",}),"return":({"1 for true 0 for false;",}),]),}),"set_unlockable":({({"void",}),({({"int",}),"number",}),(["main":({"This method makes the object unlockable.",}),"param":({"1 for unlockable, 0 for lockable",}),]),}),"set_key":({({"void",}),({({"mixed",}),"val",}),(["main":({"This sets the property of the key that will unlock the object. This canbe a string, or a function pointer which will evaluate to a string.",}),"param":({"val The property the key must have to unlock the object.",}),"see":({"set_locked()",}),]),}),"reset_transparent":({({"void",}),({}),(["main":({"This method removes the current objects transparentstatus.A transparent object is one in which you can see theinventory even if it is closed.  This is alsoused for light propogration.",}),"see":({"set_transparent()","query_transparent()",}),]),}),"query_lock_trap_ob":({({"object",}),({}),(["main":({"This returns the object on which the trap function is stored.The trap function is called when someone tries to unlock thethe object.",}),"see":({"set_open_trap()","query_open_trap_func()",}),"return":({"The function to be called when the object is opened.",}),]),}),"query_difficulty":({({"int",}),({}),(["main":({"This returns the difficulty picking the lock on the object.By default it is set to 200 unless it has been changed withset_difficulty().",}),"see":({"set_difficulty()",}),]),}),"query_lock_trap_func":({({"string",}),({}),(["main":({"This returns the name of the function to be called whensome attempts to unlock the object.",}),"see":({"set_open_trap()","query_open_trap_ob()",}),"return":({"The function to be called when someone attemptsto unlock the object.",}),]),}),"set_difficulty":({({"void",}),({({"int",}),"i",}),(["main":({"This sets how difficult the lock on an object is to pick.By default it is set to 200.",}),"param":({"i The difficulty of the lock to pick.",}),"see":({"query_difficulty()",}),]),}),"query_pick_skill":({({"string",}),({}),(["main":({"This returns the name of the skill which is used whendetermining if the object can be unlocked.",}),"see":({"set_pick_skill()",}),]),}),"query_unlocked":({({"int",}),({}),(["main":({"This tells us whether an object is unlocked.  It returns 1 ifthe object is unlocked and 0 is the object is locked.",}),"see":({"set_locked()","set_unlocked()",}),"return":({"Return 1 if unlocked and 0 if locked.",}),]),}),"query_open_trap_ob":({({"object",}),({}),(["main":({"This returns the object on which the trap function is stored.The trap function is called when someone tries to open thethe object.",}),"see":({"set_open_trap()","query_open_trap_func()",}),"return":({"The function to be called when the object is opened.",}),]),}),"set_pick_skill":({({"void",}),({({"string",}),"str",}),(["main":({"This sets the skill that will be used when attempting topick the lock.  By default it is set to \"covert.lockpick.safes\"so it need only be changed if you want to check a differentskill.",}),"param":({"str The skill to use when picking the lock.",}),"see":({"query_pick_skill()","set_difficulty()",}),]),}),"query_transparent":({({"int",}),({}),(["main":({"This method returns the current transparentvalue of the object.A transparent object is one in which you can see theinventory even if it is closed.  This is alsoused for light propogration.",}),"see":({"reset_transparent()","query_transparent()",}),"return":({"1 if the object is transparent",}),]),}),"query_locked":({({"int",}),({}),(["main":({"This tells us whether an object is locked.  It returns 1 ifthe object is locked and 0 is the object is unlocked.",}),"see":({"set_locked()","set_unlocked()",}),"return":({"Return 1 if locked and 0 if unlocked.",}),]),}),"set_stuck":({({"void",}),({({"int",}),"i",}),(["main":({"This can set an object as being stuck, or make it unstuck.Stuck objects cannot be opened, closed, locked or unlocked.Using set_stuck(1) will make the object stuck, and set_stuck(0)will unstick it.",}),"param":({"i Use 1 to make the object stuck, and 0 to unstick it.",}),"see":({"query_stuck()",}),]),}),"set_autolock":({({"void",}),({({"int",}),"number",}),(["main":({"This sets the object so that it will lock automatically when closed.",}),]),}),"set_locked":({({"void",}),({}),(["main":({"This sets the object as being locked.  Remember to set theobject as being closed before using this.  In most cases youshould probably use set_key() to set the key which opens thelock and use set_difficulty() to set the skill level requiredto pick the lock.",}),"see":({"set_open()","set_closed()","set_key()","set_difficulty()",}),]),}),"set_open":({({"void",}),({}),(["main":({"This sets the object as being open.  Note that to find outif an object is open we use query_closed() which will return0 if the object is open.",}),"see":({"set_closed()","query_closed()",}),]),}),"query_open_trap_func":({({"string",}),({}),(["main":({"This returns the name of the function to be called whensomeone tries to open the object.",}),"see":({"set_open_trap()","query_open_trap_ob()",}),"return":({"The function to be called when the object is opened.",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This class keeps track of whether things are open or closed,locked or unlocked.  Trap functions that are triggered whenan object is opened or unlocked are also handled.  Whenyou need an object that is locked you should remember touse set_key() and set_difficulty().  When cloning an objectand moving other objects inside it you should remember tomake sure the object is open before moving things into it,and then close it if neccessary.",}),"author":({"Gototh",}),])
define_docs (["C_OPAQUE":([]),"CLOSED_LOCKED":([]),"CLOSED":([]),"C_TRANS":([]),"C_CLOSED":([]),"LOCKED":([]),"MAX_INVENT":([]),])
includes (["/include/move_failures.h":962428284,])
class_docs ([])
file_name "/std/basic/close_lock.c"
last_changed 1011256828
