#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_chatters":({({"mixed",}),({}),(["main":({"This method returns the current list of rooms that are enabled forchatting.",}),"return":({"the current chatters",}),]),}),"add_exit_type":({({"int",}),({({"string",}),"type",({"mixed",}),"message",({"mixed",}),"obvious",({"int",}),"size",({"mixed",}),"func",}),(["main":({"This method adds an exit type to the current list of available exit types.This is used when the room handler is setup to add all the used exittypes.",}),"see":({"remove_exit_type()",}),"param":({"type the name of the exit type","message the message to display when going through the exit","obvious if the exit is obvious or not","size the size of the exit (used for heigh restrictions)","func the function to call when using the exit",}),"return":({"1 if successfuly added, 0 if not",}),]),}),"query_door_type":({({"mixed",}),({({"string",}),"type",({"string",}),"direc",({"mixed",}),"dest",}),(["main":({"This method returns information about the door type, the door hasextra information associated with it than the standard exit type.This function does a double job of trying to find the correspondingdoor on the other side of the room.",}),"param":({"type the type of the door","direc the direction the door points","dest the destination of the door",}),"return":({"the door type array of information",}),]),}),"get_item":({({"object",}),({}),(["main":({"This method gets a recycled item object from the handler,or clones a new one, if needed.  This is used by rooms.",}),"see":({"recycle_item()",}),"return":({"an item object",}),]),}),"recycle_item":({({"int",}),({({"object",}),"ob",}),(["main":({"This method recycles an item object and is used by rooms.It calls reload_object() on the item and puts it in therecycled_items array.It can then be re-used by using get_item().Only objects whose base_name is ITEM_OBJECT can be recycled.",}),"see":({"get_item()",}),"param":({"ob the item object to recycle",}),"return":({"1 if successfully recycled, 0 if not",}),]),}),"recycle_chatter":({({"int",}),({({"object",}),"ob",}),(["main":({"This method recycles a chatter object and is used by rooms.It calls reload_object() on the chatter, removes it from thechatters array and adds it to the recycled_chatters array.It can then be re-used by using get_chatter().Only objects whose base_name is CHATTER_OBJECT can be recycled.",}),"see":({"get_chatter()",}),"param":({"ob the chatter object to recycle",}),"return":({"1 if successfully recycled, 0 if not",}),]),}),"query_doors":({({"mixed",}),({}),(["main":({"This method returns the current list of doors handled by the roomhandler.",}),"return":({"the current array of doors",}),]),}),"remove_exit_type":({({"int",}),({({"string",}),"type",}),(["main":({"This method remove the named exit from the type list.",}),"see":({"add_exit_type()",}),"param":({"type the name of the exit type to remove",}),"return":({"always returns 1",}),]),}),"query_exit_type":({({"mixed",}),({({"string",}),"type",({"string",}),"dir",}),(["main":({"This method returns the information associated with the exit type.",}),"param":({"type the exit type to query","dir the direction the type information is for",}),"return":({"a huge amount of info as specified above",}),]),}),"get_chatter":({({"object",}),({}),(["main":({"This method gets a recycled chatter from the handler,or clones a new one, if needed.  This is used by rooms.",}),"see":({"recycle_chatter()",}),"return":({"a chatter object",}),]),}),"exit_move":({({"int",}),({({"string",}),"verb",({"string",}),"extra",({"string",}),"special",({"object",}),"thing",}),(["main":({"This is the main code for moving someone.  The move_thing code aboveshould not be called directly.  This code handlers all the followersand any other things that need to be handled.",}),"param":({"verb the movement verb","extra extra information","special special information","thing the thing to move",}),"return":({"1 on success, 0 on failure",}),]),}),"get_door":({({"object",}),({}),(["main":({"This method gets a recycled door from the handler,or clones a new one, if needed.  This is used by rooms.",}),"see":({"recycle_door()",}),"return":({"a door object",}),]),}),"recycle_door":({({"int",}),({({"object",}),"ob",}),(["main":({"This method recycles a door object and is used by rooms.It calls reload_object() on the door, removes it from thedoors array and adds it to the recycled_doors array.It can then be re-used by using get_door().Only objects whose base_name is DOOR_OBJECT can be recycled.",}),"see":({"get_door()",}),"param":({"ob the door object to recycle",}),"return":({"1 if successfully recycled, 0 if not",}),]),}),"check_door":({({"void",}),({({"mixed",}),"args",}),(["main":({"This method checks to see if the door exists or not.It is passed in the room we are going from and the direction theexit faces in the array.<br><pre>({ room_from, direction })</pre><br>This is the function which generates those door xx not found messages.",}),"see":({"query_door_type()",}),"param":({"args the arguements passed into the function",}),]),}),"move_thing":({({"int",}),({({"object",}),"thing",({"string",}),"dir",({"mixed",}),"dest",({"mixed",}),"exit",({"mixed",}),"enter",({"string",}),"move",}),(["main":({"This is the code that actually moves the thing around the place.It handles all the weirdness involved with dragging things and othersuch stuff.",}),"param":({"thing what is being moved","dir the direction we are going","dest the destination room","exit the exit name","enter the enter name","move the string to tell the object when it moves",}),"return":({"1 on success, 0 on failure",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["changed":({"Deutha Who knowsSeverely changed, move the follow code in here from the living object","Sandoz - 09/09/02Added recycling for chatters, doors and items.","Zrutu - 13/10/04Added support for functions in exit / enter mess",}),"main":({"This file contains all the bits needed to handle rooms, plus the code tohandle following when moving.",}),"author":({"Pinkfish",}),"see":({"/std/room/basic_room.c","recycle_chatter()","recycle_door()","recycle_item()","get_chatter()","get_door()","get_item()",}),])
define_docs (["DOORSIZE":([]),"CHATSIZE":([]),])
includes (["/include/player.h":1036911799,"/include/climate.h":986801078,"/include/room.h":1117801855,"/include/playtesters.h":1020949410,])
class_docs ([])
file_name "/handlers/room_handler.c"
last_changed 1097661367
