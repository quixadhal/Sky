#/secure/handlers/autodoc/autodoc_file.c
public_functions (["set_position_multiple":({({"void",}),({({"int",}),"mult",}),(["main":({"This sets fact that the object being referenced is one of many.  Soyou get something more like 'xx is sitting on one of the couches'.",}),"see":({"query_position()","query_position_on()","query_position_multiple()","query_position_type()","set_position()","set_position_multiple()","set_position_type()",}),"param":({"mult 0 if non-multiple, 1 if multiple",}),]),}),"query_always_use_default_position":({({"int",}),({}),(["main":({"This method sets the always the flag to always use the default position.If this is set then rooms cannot override the position message which isdisplayed by the object.",}),"see":({"set_always_use_default_position()","set_default_position()","return_to_default_position()",}),"return":({"the always use default position flag",}),]),}),"set_mmsgin":({({"int",}),({({"string",}),"str",}),(["main":({"The teleport in message.  Sets the message to be seen whena player telerpots into the room.",}),"param":({"str the message to be seen",}),]),}),"query_position_long":({({"string",}),({}),(["main":({"This method returns the string used in the long description of theliving object.",}),"see":({"query_position_type()","query_position_on_short()",}),"return":({"the long description of the position",}),]),}),"query_it_them":({({"mixed",}),({}),(["main":({"This method returns the current array used for calculating 'it' and'them' in the find_match code.",}),"see":({"/secure/simul_efun->find_match()","set_it_them()",}),"return":({"the array of objects matching them",}),]),}),"query_verbose":({({"int",}),({({"string",}),"type",}),(["main":({"This method returns the current verbose mode setting of the player.",}),"param":({"the type of verbosity, by default it will return the normal stuff.",}),"return":({"the verbose mode of the player",}),]),}),"set_destmsg":({({"int",}),({({"string",}),"str",}),(["main":({"The dest message. Used when the cre dests something.",}),"param":({"str the message to be seen",}),]),}),"query_possessive":({({"string",}),({}),(["main":({"This method returns the prossessive string of the living object.A possessive is \"her\", \"his\", \"its\".",}),"return":({"the possessive string",}),]),}),"query_position":({({"string",}),({}),(["main":({"This queries the current position of the object.",}),"see":({"query_position_on()","query_position_multiple()","query_position_type()","set_position()","set_position_on()","set_position_multiple()","set_position_type()",}),"return":({"the current position of the living",}),]),}),"run_away":({({"int",}),({}),(["main":({"This method is called when the creature wimpies.",}),"return":({"1 if the wimpying was successful, 0 if not.",}),]),}),"set_always_use_default_position":({({"void",}),({({"int",}),"flag",}),(["main":({"This method sets the always the flag to always use the default position.If this is set then rooms cannot override the position message which isdisplayed by the object.",}),"see":({"query_always_use_default_position()","set_default_position()","return_to_default_position()",}),"param":({"flag if we should always use the default position",}),]),}),"query_msgout":({({"string",}),({}),(["main":({"This is the method used to query the current message to use whenexiting a room.   A $N in the string will be expanded to thename and a $T will be expanded to the to direction.",}),"see":({"/handlers/room_handler","query_msgin()","set_msgout()",}),"return":({"the message to print when entering a room.",}),]),}),"query_dragging":({({"object",}),({}),([]),}),"remove_follower":({({"int",}),({({"object",}),"ob",}),(["main":({"This method removes a follower from the living object.  A follower willhappily follow around the person in front.  Used in the unfollowand lose commands.",}),"see":({"add_follower()","query_followers()",}),"param":({"ob the object to remove from the follow list",}),"return":({"1 on success, 0 on failure",}),]),}),"set_facing":({({"void",}),({({"mixed",}),"args",}),([]),}),"find_rel":({({"string",}),({({"string",}),"word",({"int",}),"from",}),([]),}),"query_followers":({({"mixed",}),({}),(["main":({"This method returns the current list of followers to the livingobject.",}),"see":({"add_follower()","remove_follower()",}),]),}),"query_pronoun":({({"string",}),({}),(["main":({"This method returns the pronoun string of the living object.A pronoun is \"he\", \"she\", \"it\".",}),"return":({"the pronoun string",}),]),}),"reset_dragging":({({"void",}),({}),([]),}),"add_follower":({({"int",}),({({"object",}),"ob",}),(["main":({"This method adds a follower to the living object.  A follower willhappily follow around the person in front.  Used in the followcommand.",}),"see":({"remove_follower()","query_followers()",}),"param":({"ob the object to follow us",}),"return":({"1 on success, 0 on failure",}),]),}),"query_actual_weight":({({"int",}),({}),(["main":({"This method returns the actual weight of the living object.This is useful when you need to know the real weight of a ghost,as ghosts weight nothing themselves.",}),"return":({"the actual weight of the living",}),]),}),"set_position_type":({({"void",}),({({"string",}),"type",}),(["main":({"This sets way the object is being referenced.  The 'on', 'at', 'beside'or whatever strings.",}),"see":({"query_position()","query_position_on()","query_position_multiple()","query_position_type()","set_position()","set_position_on()","set_position_multiple()",}),"param":({"type the new type string",}),]),}),"test_remove":({({"int",}),({({"object",}),"ob",({"int",}),"flag",({"mixed",}),"dest",}),(["main":({"This method handles the cannot drop flags.  This is placedinto the living object so that things which are marked asbeing unable to be dropped can still be remove from normalcontainers.  This does all sorts of other exciting checksnow.",}),"return":({"1 if the object can be added, 0 if not.",}),]),}),"query_mmsgout":({({"string",}),({}),(["main":({"THis is the message to be used when the person is teleported.",}),"return":({"the out message when they teleport",}),]),}),"exit_command":({({"varargs","int",}),({({"string",}),"word",({"mixed",}),"verb",({"object",}),"thing",}),(["main":({"This method is called whenever someone enters a command.It is here that the exits of the room are checked to seeif the command entered is a move command.",}),"param":({"word the command entered","verb no idea","thing the object moving, not really used",}),"return":({"1 if the command matched an exit and the movewas successful, 0 if not",}),]),}),"become_flummoxed":({({"void",}),({}),([]),}),"query_position_on_short":({({"string",}),({}),(["main":({"This method returns the short description of the objectwe are referencing.",}),"see":({"query_position_on()","set_position_on()","query_position_long()",}),"return":({"the short description of the object, \"\" if none",}),]),}),"test_add":({({"int",}),({({"object",}),"ob",({"int",}),"flag",}),(["main":({"This method handles the cannot get flags.  This is placedinto the living object so that things which are marked asbeing unable to be picked up can still be put into normalcontainers.  The upwards checking of containers stops here.This should make it so that objects marked as unable to bepicked up cannot be put into objects in the playersinventory.",}),"return":({"1 if the object can be added, 0 if not.",}),]),}),"query_position_type":({({"string",}),({}),(["main":({"This returns way the object is being referenced.The 'on', 'at', 'beside'or whatever strings.",}),"see":({"query_position()","query_position_on()","query_position_multiple()","set_position()","set_position_on()","set_position_multiple()","set_position_type()",}),"return":({"the current type string",}),]),}),"query_arcane_shields":({({"string","*",}),({}),(["main":({"This method can be shadowed by all forms of magical andreligious shields so that the shields command will givethe player a nice description.The first element in the array should contain the descriptionas shown to the player, the second element should contain thedescription shown to others.",}),"return":({"Array with description of shield.",}),"example":({"({ \"You have a nice shield.\", \"He has a nice shield.\" })",}),]),}),"return_to_default_position":({({"void",}),({({"int",}),"leaving",}),(["main":({"This method returns the living object to its default position.",}),"see":({"set_default_position()","query_default_position()","set_always_use_default_position()",}),"param":({"leaving this is if we are leaving the room",}),]),}),"set_deity":({({"void",}),({({"string",}),"word",}),(["main":({"This method sets the current deity the living object isworshipping.",}),"see":({"/handlers/diety_handler","query_deity()",}),"param":({"word the new deity",}),]),}),"move_with_look":({({"varargs","int",}),({({"mixed",}),"dest",({"string",}),"messin",({"string",}),"messout",}),([]),}),"room_look":({({"int",}),({}),([]),}),"set_position":({({"void",}),({({"string",}),"name",}),(["main":({"This sets the current position of the object.",}),"see":({"query_position()","query_position_on()","query_position_multiple()","query_position_type()","set_position_on()","set_position_multiple()","set_position_type()",}),"param":({"name the string to use for the position",}),]),}),"query_current_room":({({"object",}),({}),(["main":({"This method returns the current room of the object.  This was neededpreviously to use in things like unique_array, before functionpointers came into existance.",}),"return":({"the environment of the object",}),]),}),"query_destmsg":({({"string",}),({}),(["main":({"This is the message that is returned when they dest something.",}),"return":({"the dest message",}),]),}),"query_al":({({"int",}),({}),(["main":({"This method returns the current alignment of the livingobject.",}),"see":({"set_al()","adjust_al()","adjust_alignment()","align_string()",}),"return":({"the current alignment",}),]),}),"find_abs":({({"string",}),({({"string",}),"word",}),([]),}),"set_dragging":({({"void",}),({({"object",}),"thing",}),([]),}),"set_msgin":({({"int",}),({({"string",}),"str",}),(["main":({"This is the method used to set the current message to use whenentering a room.   A $N in the string will be expanded to thename and a $F will be expanded to the from direction.",}),"see":({"/handlers/room_handler","query_msgin()","set_msgout()",}),"param":({"str the message to print when entering a room",}),]),}),"set_al":({({"void",}),({({"int",}),"number",}),(["main":({"This method sets the current alignment of the livingobject.",}),"see":({"query_al()","adjust_al()","adjust_alignment()","align_string()",}),"param":({"number the new alignment for the object",}),]),}),"query_deity":({({"string",}),({}),(["main":({"This method returns the current deity the living object isworshipping.",}),"see":({"/handlers/diety_handler","set_deity()",}),"return":({"the current deity",}),]),}),"query_mmsgin":({({"string",}),({}),(["main":({"THis is the message to be used when the person is teleported.",}),"return":({"the in message when they teleport",}),]),}),"query_position_on":({({"object",}),({}),(["main":({"This queries the current object being referenced.  This can be anobject or a string.",}),"see":({"query_position()","query_position_multiple()","query_position_type()","set_position()","set_position_on()","set_position_multiple()","set_position_type()",}),"return":({"the current object being referenced",}),]),}),"calc_burden":({({"void",}),({}),(["main":({"This method calculates the current handicap of the livingobject.  The handicap is based on the burden of theperson, the more burdened the higher the handicap.  Thehandicap is 1 point of dexterity for every 25% burdened.",}),"see":({"query_handicap()","query_burden()",}),]),}),"adjust_alignment":({({"int",}),({({"int",}),"number",}),(["main":({"This method adjusts the current alignment of the livingobject.  This is called when an object dies and handles themangling of the change value based on the current alignment andthe alignment of the thing dieing.",}),"see":({"query_al()","adjust_al()","set_al()","align_string()",}),"param":({"number the amount to change the alignment by",}),"return":({"the new alignment",}),]),}),"query_msgin":({({"string",}),({}),(["main":({"This is the method used to query the current message to use whenentering a room.   A $N in the string will be expanded to thename and a $F will be expanded to the from direction.",}),"see":({"/handlers/room_handler","query_msgout()","set_msgin()",}),"return":({"the message to print when entering a room.",}),]),}),"query_position_multiple":({({"int",}),({}),(["main":({"This returns fact that the object being referenced is one of many.  Soyou get something more like 'xx is sitting on one of the couches'.",}),"see":({"query_position_on()","query_position_multiple()","query_position_type()","set_position()","set_position_on()","set_position_multiple()","set_position_type()",}),"return":({"0 if non-multiple, 1 if multiple",}),]),}),"query_handicap":({({"int",}),({}),(["main":({"This method returns the current handicap of the livingobject.",}),"see":({"calc_burden()",}),"return":({"the current handicap.",}),]),}),"query_default_position":({({"string",}),({}),(["main":({"This method sets the default position of the object.  This is used toallow things to default to some other exciting off beat and froopydefault position.  The value returned by this is the command codeused to put the object back into the default position or anarray which contains three or one elements, the first is the stringto use as the position, the second and third (if they exist) arethe string to tell the person when changing and the string to telleveryone else when changing position.",}),"see":({"set_default_position()","return_to_default_position()","set_always_use_default_position()",}),"return":({"the default position",}),]),}),"query_facing":({({"mixed",}),({}),([]),}),"set_position_on":({({"void",}),({({"mixed",}),"ob",}),(["main":({"This sets the current object which is being referenced as being'on', 'beside' or 'at'.",}),"see":({"query_position()","query_position_on()","query_position_multiple()","query_position_type()","set_position()","set_position_multiple()","set_position_type()",}),"param":({"ob the object being referenced",}),]),}),"query_objective":({({"string",}),({}),(["main":({"This method returns the objective string of the living object.An objective is \"her\", \"him\", \"it\".",}),"return":({"the objective string",}),]),}),"set_msgout":({({"int",}),({({"string",}),"str",}),(["main":({"This is the method used to query the current message to use whenexiting a room.   A $N in the string will be expanded to thename and a $T will be expanded to the to direction.",}),"see":({"/handlers/room_handler","query_msgout()","set_msgin()",}),"return":({"the message to print when entering a room.",}),]),}),"set_it_them":({({"void",}),({({"mixed",}),"args",}),(["main":({"This method sets the current array used for calculating 'it' and'them' in the find_match code.",}),"see":({"/secure/simul_efun->find_match()","query_it_them()",}),"param":({"args the new array of objects",}),]),}),"set_verbose":({({"void",}),({({"string",}),"type",({"int",}),"val",}),(["main":({"This method sets the verbosity for a given type.",}),]),}),"reorient_rel":({({"string",}),({({"string",}),"word",}),([]),}),"cannot_walk":({({"int",}),({}),(["main":({"This method returns 1 if the creature is trapped, ie cannot walk.By default, a creature is free to walk, hence the normal returnvalue of 0.  If you shadow this method, including a message aboutwhy the player cannot move move is a good idea.",}),"see":({"no_use_doors, exit_command",}),"return":({"0 means creature is free to move, 1 that it is trapped.",}),]),}),"check_doing_follow":({({"int",}),({({"object",}),"thing",({"string",}),"verb",({"string",}),"special",}),(["main":({"This is a method to check to see if this object can actually followthe person they are following.",}),"param":({"thing the thing following us","verb the direction they are going to","special any special stuff",}),"return":({"1 if we are allowed to go there, 0 otherwise",}),]),}),"no_use_doors":({({"int",}),({}),(["main":({"This method returns 1 if the creature shouldn't be able to useclosed doors.By default, any creature is able to move through closed doorsby opening them, so the default value is 0.If you shadow this method, including a message about why theplayer cannot move in a particular direction, is a good idea.",}),"see":({"cannot_walk, exit_command",}),"return":({"0 means creature is free to move through closed doors,1 that it cannot.",}),]),}),"adjust_al":({({"int",}),({({"int",}),"number",}),(["main":({"This method adjusts the current alignment of the livingobject.",}),"see":({"query_al()","set_al()","adjust_alignment()","align_string()",}),"param":({"number the amount to change the alignment by",}),"return":({"the new alignment",}),]),}),"burden_string":({({"string",}),({}),(["main":({"This method returns the string representation of the currentburden level.",}),"see":({"calc_burden()","query_burden()",}),"return":({"the burden string",}),]),}),"align_string":({({"string",}),({}),(["main":({"This method returns the string associated with the currentalignment of the living object.",}),"see":({"query_al()","adjust_al()","adjust_alignment()","set_al()",}),"return":({"the string associated with the alignment",}),]),}),"query_burden":({({"int",}),({}),(["main":({"This method returns the current burden level of the livingobject.  This is returned as a percentage of the maximumweight that the living can carry.",}),"return":({"the burden level (0-100)",}),]),}),"set_default_position":({({"void",}),({({"mixed",}),"str",}),(["main":({"This sets the default position of the object.  This is used toallow things to default to some other exciting off beat and froopydefault position.  The paramater to this is the command codeused to put the object back into the default position or anarray which contains three or one elements, the first is the stringto use as the position, the second and third (if they exist) arethe string to tell the person when changing and the string to telleveryone else when changing position.  The paramer can also bea function pointer, if it is then it will be evaluated andhave two parameters passed into the function.  The first isthe object returing to the position and the second is the leavingflag.<p>Please note!  After setting the position you will need tomake the object return to the default position to use it.<p>A second note!  A room can also define a query_default_position()function which will be called, if this returns a value (and theoverride flag is not set) then that will be used for the defaultposition.",}),"see":({"query_default_position()","set_always_use_default_position()","/obj/monster()->set_cannot_change_position()","return_to_default_position()",}),"param":({"str the new default position",}),"example":({"set_default_position(\"/cmds/living/kneel\");","set_default_position(({ \"running\" }));","set_default_position(({ \"fishing\",                        \"You start to fish.\\n\",                        the_short() + \" starts to fish.\\n\" }));","npc->set_default_position(({ \"running\" }));npc->return_to_default_position();",}),]),}),"query_verbose_types":({({"string","*",}),({}),(["main":({"This method returns the current verbose/brief types.",}),]),}),"set_mmsgout":({({"int",}),({({"string",}),"str",}),(["main":({"Sets the teleport out message.  If the player teleports out, thisis the message seen.",}),"param":({"str the teleport message",}),]),}),"living_commands":({({"void",}),({}),(["main":({"This method adds any commands needed by the living inherit.",}),]),}),"query_position_short":({({"string",}),({}),(["main":({"This method returns the description used in the inventory listingcode.",}),"see":({"query_position_long()","query_position_on_short()","query_position_type()",}),"return":({"the string used in inventory listings",}),]),}),])
protected_functions ([])
inherits (["/std/living/skills":({}),"/std/living/carrying":({}),"/std/living/respond_cmd":({}),"/std/living/body":({}),"/std/living/holding":({}),"/std/living/stats":({}),"/std/container":({}),"/std/living/health":({}),"/std/living/combat":({}),"/std/living/armour":({}),"/std/living/gender":({}),"/std/living/money":({}),"/std/living/spells":({}),"/std/living/force":({}),])
main_docs (["changed":({"Removed the effects inherit/code, because/std/container already inherits all that.- Sandoz, April 2003.",}),"main":({"The main living inherit.  This inherits all the filesneeded to be in a living object.",}),"author":({"Pinkfish",}),])
define_docs (["VERBOSE_TYPES":([]),])
includes (["/include/position.h":1056994259,"/include/tune.h":1003366871,"/include/drinks.h":962428284,"/include/dirs.h":997617456,"/include/living.h":962428284,])
class_docs ([])
file_name "/std/living/living.c"
last_changed 1121399279
