#/secure/handlers/autodoc/autodoc_file.c
public_functions (["get":({({"int",}),({({"mixed",}),"dest",}),(["main":({"The current value of the get flag.  This function is called by thetest_add() function in the living object.  So it allows you tomove the object into innimate objects, just not into playercharacters.",}),"see":({"set_get()","reset_get()","drop()",}),"return":({"1 if it is set, 0 if it is reset",}),]),}),"dwep":({({"nomask","string",}),({}),(["main":({"Dest with extreme predejuce.  This is the last way to destruct anobject.  Used if all other methods fail.",}),"return":({"a string \"Destructed With Extreme Prejudice\"",}),]),}),"reset_get":({({"void",}),({}),(["main":({"Turns off the get flag.",}),"see":({"move()","set_get()","get()",}),]),}),"set_drop":({({"void",}),({}),(["main":({"Turns on the drop flag.",}),"see":({"move()","reset_drop()","drop()",}),]),}),"reset_drop":({({"void",}),({}),(["main":({"Turns off the drop flag.",}),"see":({"move()","set_drop()","drop()",}),]),}),"set_get":({({"void",}),({}),(["main":({"Turns on the get flag.",}),"see":({"move()","reset_get()","get()",}),]),}),"move":({({"varargs","int",}),({({"mixed",}),"dest",({"string",}),"messin",({"string",}),"messout",}),(["main":({"The basic move method.  The destination can be an object or a string.if it is neither of these then the failure MOVE_EMPTY_DEST isreturned.  If the function test_add() was called on thedestination and it returns 0 then MOVE_NO_GET is returned asa failure.  If the destination is TO thenMOVE_INVALID_DEST is returned as the failure.  If thefunction test_remove is called on the current environment and itreturns 0 then MOVE_NO_DROP is returned as the move failure.<p>The events \"enter\" and \"exit\" are generated as part of themove process.  Both of these events are passed twoarguments.  The exit event is passed the exit messageand the destination.  The enter event is passed theenter message and the place we came from.<p>The function event_move_object() is called (call_other)on the object if the move was successful (MOVE_OK).",}),"see":({"/include/move_failures.h","/secure/simul_efun->event()","event_move_object()",}),"param":({"dest where to move to","messin the message to print when entering","messout the message to print when leaving",}),"example":({"move(find_player(\"pinkfish\"));","move(\"/d/am/am/mendeddrum\");","move (environment(find_player(\"ceres\")),         the_short()+\" flaps in hopelessly.\\n\",         the_short()+\" flaps away hopelessly.\\n\");",}),"return":({"MOVE_OK on success, or a failure reason on failure",}),]),}),"drop":({({"int",}),({({"mixed",}),"dest",}),(["main":({"The current value of the drop flag. This function is called by thetest_remove() function in the living object.  So it allows you tomove the object out of inanimate objects, just not out of theplayers.",}),"see":({"set_drop()","reset_drop()","get()",}),"return":({"1 if it is set, 0 if it is reset",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This class defines the basic move function and support functions.",}),"author":({"Pinkfish",}),])
define_docs (["GET":([]),"DROP":([]),])
includes (["/include/move_failures.h":962428284,])
class_docs ([])
file_name "/std/basic/move.c"
last_changed 1032252520
