#/secure/handlers/autodoc/autodoc_file.c
public_functions (["setup_trap":({({"void",}),({({"int",}),"difficulty",({"string",}),"trigger",({"string",}),"description",({"mixed",}),"message",({"mixed",}),"effect",}),(["main":({"This sets up a basic trap on a lock.  The trap will be triggered whensomeone locks/unlocks/picks the lock (depending on trigger). Iftriggered the message will be displayed and the effect will be addedto the player.",}),"param":({"difficulty skill bonus needed to avoid triggering the trap","trigger \"unlock\", \"pick, \"open\",  for which activities shouldtrigger the trap.","description a description of the trap for someone who looks at  it.","message The message to be displayed to the player. If it's an arraythe first index will be printed to the player the secondto the room.","effect the effect to be added to the trigerer. If the effect is anint the players hps will be reduced by that amount. If it isa string that effect will be added to the player, if it's anarray the first index will be treated as the effect the restas parameters to the effect.",}),"example":({"setup_trap(300, \"pick\",           \"Hidden inside the lock is a small ampule which, if touched by \"           \"an unwary tool would trigger a puff of poisonous gas.\",           ({\"A small cloud of gas puffs out of the safe.\\n\",               \"A small cloud of gas puffs out of the safe.\\n\"}),           ({\"/std/effects/poisons/poison_gas\", 600}));",}),]),}),"query_trap_armed":({({"int",}),({}),(["main":({"Get whether the trap is armed or not.",}),]),}),"query_trap_description":({({"string",}),({}),(["main":({"Get the trap description text.",}),"return":({"string description of the trap.",}),]),}),"set_trap_armed":({({"void",}),({({"int",}),"i",}),(["main":({"Set the trap as armed or disarmed.",}),]),}),"query_trap_effect":({({"mixed",}),({}),(["main":({"Get the trap effects.",}),"return":({"mixed either an int (for the damage) or a mixed variable for  the effect to add to the triggerer.",}),]),}),"query_trap_difficulty":({({"int",}),({}),(["main":({"Find out the difficulty of this trap.",}),"return":({"int difficulty",}),]),}),"query_trap_data":({({"mixed","*",}),({}),(["main":({"Get data on the basic lock trap. Data is returned as a mixed array ofstuff. This is really only used for the autoload. :)",}),"return":({"mixed array of trap data.",}),]),}),"query_trap_trigger":({({"string",}),({}),(["main":({"Get the trigger condition for this trap.",}),"return":({"string the trigger condition.",}),]),}),"query_trap_message":({({"mixed",}),({}),(["main":({"Get the trap trigger messages",}),"return":({"mixed a string or array of messages",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This is a basic trap system for adding traps to container type objects (oranything that uses /std/basic/close_lock.To setup the trap use setup_trap(). Functions are available to find outinformation about a trap on an object.If you wish to create a more advanced trap you can use the set_lock_trap andset_open_trap functions in /std/basic/close_lock.",}),"author":({"ceres",}),"see":({"/std/basic/close_lock","setup_trap",}),])
define_docs (["SKILL":([]),])
includes (["/include/tasks.h":1059677152,])
class_docs ([])
file_name "/std/basic/trap.c"
last_changed 1000719891
