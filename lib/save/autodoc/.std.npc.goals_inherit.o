#/secure/handlers/autodoc/autodoc_file.c
public_functions (["set_plan_data":({({"void",}),({({"string",}),"plan",({"mixed",}),"data",}),(["main":({"This method changes the data associated with the specified plan.  Thisshould only be called from the plan itself, as the plan will not beinformed of this change.",}),"param":({"data the new data for the plan",}),]),}),"query_goals":({({"mapping",}),({}),(["main":({"This method is *only* to be used for debugging.",}),]),}),"query_goal_data":({({"mixed",}),({({"string",}),"goal",}),(["main":({"This method returns the data associated with this goal.",}),"see":({"query_goal_priority()","set_goal_data()",}),"param":({"goal the goal to get the data for",}),"return":({"the data associated with the goal",}),]),}),"remove_goal":({({"void",}),({({"string",}),"goal",}),(["main":({"This method removes the goal from the current goal list.",}),"param":({"goal the goal to remove",}),]),}),"check_current_plan_finished":({({"int",}),({}),(["main":({"This method checks to see if the top plan is finished or not.",}),"param":({"plan the plan to finish",}),"return":({"1 if the plan has been finished, 0 if not",}),]),}),"change_goal_priority":({({"void",}),({({"string",}),"goal",}),(["main":({"This method changes the priority of the specified goal.  It will recallthe query_priority() method on the goal to figure out the new priority.",}),"see":({"add_goal_event()","remove_goal_event()","query_goal_priority()",}),"param":({"goal the goal whose priority to change",}),]),}),"activate_plan":({({"void",}),({({"string",}),"plan",({"string",}),"goal",({"mixed",}),"data",}),(["main":({"This activates the plan on the npc.",}),"param":({"plan the plan to activate","goal the goal which is activating the plan",}),]),}),"add_goal":({({"void",}),({({"string",}),"goal",({"mixed",}),"data",}),(["main":({"This method will add a goal to the NPC.",}),"param":({"goal the goal to add","data the data associated with the goal",}),]),}),"query_events":({({"mapping",}),({}),(["main":({"This method is *only* to be used for debugging.",}),]),}),"add_goal_event":({({"void",}),({({"string",}),"goal",({"string",}),"event",}),(["main":({"This method adds an event for a goal to react to.  This should only bedone from inside the goal initialisation code, and other parts of thegoal.  We will only add things for goals which we know about.",}),"see":({"change_priority()","remove_goal_event()",}),"param":({"goal the goal the event is for","event the event name to react to",}),]),}),"query_goal_plan_data":({({"mixed",}),({({"string",}),"goal",({"string",}),"plan",}),(["main":({"This method returns the data associated with the specified plan.",}),"see":({"set_default_plan_data()",}),"param":({"goal the foal to query the information for","plan the name of the plan to get the data for",}),"return":({"the plans data",}),]),}),"set_goal_data":({({"int",}),({({"string",}),"goal",({"mixed",}),"data",}),(["main":({"This method returns the data associated with this goal.",}),"see":({"query_goal_priority()","query_goal_data()",}),"param":({"goal the goal to get the data for","data the new data for the goal",}),"return":({"1 on success, 0 on failure",}),]),}),"notify_npc_event":({({"varargs","void",}),({({"string",}),"event",({"mixed","*","information",}),"...",}),(["main":({"This method is called when an event needs to be notified about.The event handling routines should try to be short.  They shouldjust modify the priority of something, or add a new goal to thecurrent list.",}),"param":({"event the event to tell us about","information the information associated with the event",}),]),}),"set_goal_plan_data":({({"void",}),({({"string",}),"goal",({"string",}),"plan",({"mixed",}),"data",}),(["main":({"This method sets the default data associated with the specified plan.This should be things like global plan things, the level at which thenpc will run away.  Etc.",}),"see":({"query_default_plan_data()",}),"param":({"goal the goal to check the data for","plan the name of the plan","data the data associated with the plan",}),]),}),"remove_goal_event":({({"void",}),({({"string",}),"goal",({"string",}),"event",}),(["main":({"This method removes the goal event for the goal.",}),"see":({"add_goal_event()","change_priority()",}),"param":({"goal the goal to remove the event for","event the event name to not react to",}),]),}),"query_goal_priority":({({"int",}),({({"string",}),"goal",}),(["main":({"This method returns the priotity of the goal.",}),"see":({"change_goal_priority()",}),"param":({"goal the goal to query the priority of",}),"return":({"the priority of the goal",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This is the goal handler for the npcs.  It will handle all the goalsand ordering them, figuring out which goal to run.",}),"started":({"Thu Jul 30 17:06:19 PDT 1998",}),"author":({"Pinkfish",}),])
define_docs (["PLAN_ARRAY_SIZE":(["main":({"This is the length of the plan array used in the goal inheritfile.",}),]),"PLAN_INFO":(["main":({"The index to the information associated with the plan.",}),]),"PLAN_PLAN":(["main":({"The index to the plan name itself.",}),]),])
includes (["/include/npc/goals.h":962122463,"/std/npc/goal_inherit.h":984361893,])
class_docs (["plan_info":({0,({({"priority",({"int",}),}),({"data",({"mixed",}),}),}),([]),}),"goal_information":({0,({({"data",({"mixed",}),}),({"priority",({"int",}),}),({"events",({"string","*",}),}),}),([]),}),])
file_name "/std/npc/goals_inherit.c"
last_changed 1200761934
