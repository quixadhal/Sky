#/secure/handlers/autodoc/autodoc_file.c
public_functions (["is_member_of":({({"int",}),({({"string",}),"name",({"string",}),"member",}),(["main":({"This method will determine if the specified person is a member of theclub.",}),"param":({"name the name of the club to find the member of","member the member to check for the existance of",}),"return":({"1 if they are a member, 0 if they are not",}),]),}),"query_time_fees_due":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method returns the time at which the club dues are again due.",}),"see":({"check_clubs()","query_club_cost_per_period()",}),"param":({"club_name the name of the club to get the date for",}),]),}),"is_club":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks to see if the specified club exists.",}),"see":({"query_club_name()",}),"param":({"name the name of the club to check for existance",}),"return":({"1 if it is a club, 0 if not",}),]),}),"remove_member":({({"int",}),({({"string",}),"name",({"string",}),"member",}),(["main":({"This method removes a member from the club.",}),"see":({"query_members()","add_member()","remove_member()",}),"param":({"name the name of the club to remove a member from","member the members name to remove",}),"return":({"1 on success, 0 on failure",}),]),}),"set_club_description":({({"int",}),({({"string",}),"club_name",({"string",}),"description",}),(["main":({"This method sets the description of the club.",}),"see":({"query_club_description()","create_club()",}),"param":({"club_name the name of the club to set the description of","description the new description of the club",}),"return":({"1 on success, 0 on failure",}),]),}),"query_club_type":({({"int",}),({({"string",}),"name",}),(["main":({"This method returns the club type of the club.",}),"see":({"change_club_type()","create_club()",}),"param":({"name the name of the club to get the type of",}),"return":({"the type of the club",}),]),}),"query_recruiters":({({"string","*",}),({({"string",}),"name",}),(["main":({"This method returns the recruiters of the club.",}),"see":({"add_recruiter()","remove_recruiter()",}),"param":({"name the club name to get the recruiters of",}),"return":({"the recruiters of the club",}),]),}),"is_family":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks to see if the club type is actually a family.",}),"param":({"name the name of the family to check",}),"return":({"1 if the club is a family",}),]),}),"reset_club_secret":({({"int",}),({({"string",}),"name",}),(["main":({"This method makes a clubs membership open.",}),"see":({"query_club_secret()","set_club_secret()",}),"param":({"name the name of the club to make open",}),"return":({"1 on success, 0 on failure",}),]),}),"add_recruiter":({({"int",}),({({"string",}),"name",({"string",}),"recruiter",}),(["main":({"This method adds a recruiter to the club.  A recruiter can only be added ifthey are already a member.",}),"see":({"remove_recruiter()","query_recruiters()","add_member()",}),"param":({"name the club name to add the recruiter to","recruiter the recruiter of the club to add",}),"return":({"1 on success, 0 on failure",}),]),}),"query_observers":({({"string","*",}),({}),(["main":({"This method returns the current list of observers.",}),"return":({"the current list of observers",}),]),}),"is_recruiter_of":({({"int",}),({({"string",}),"name",({"string",}),"recruiter",}),(["main":({"This method will determine if the specified person is a recruiter of theclub.",}),"see":({"add_recruiter()","remove_recruiter()",}),"param":({"name the name of the club to find the recruiter of","recruiter the person is check for the recruiter",}),"return":({"1 if they are a recruiter, 0 if they are not",}),]),}),"is_personal_club":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks to see if the specified club exists and is anpersonal club.",}),"param":({"name the name of the club to check to see for an personal type",}),"return":({"1 if the club is an personal type",}),]),}),"change_club_type":({({"int",}),({({"string",}),"name",({"int",}),"type",}),(["main":({"This method changes the type of the club.",}),"see":({"create_club()","disband_club()","query_club_type()",}),"param":({"name the name of the club to change","type the new type of the club",}),"return":({"1 on success, 0 on failure",}),]),}),"is_observer":({({"int",}),({({"string",}),"obs",}),(["main":({"This method checks to see if the specified thingy is an observer.",}),"param":({"obs the observer to check",}),"return":({"1 on success, 0 on failure",}),]),}),"normalise_name":({({"string",}),({({"string",}),"name",}),(["main":({"This method normalises the name for lookups so that we don'tget names too confused.  Thanks to Terano for this idea.",}),"param":({"name the name to normalise",}),"return":({"the normalised name",}),]),}),"disband_club":({({"int",}),({({"string",}),"name",}),(["main":({"This method disbands the club.  The club will be totaly zapped andeverything about it efficently munched.",}),"see":({"create_club()","check_extra_infromation()",}),"param":({"name the name of the club to disband",}),"return":({"1 on success, 0 on failure",}),]),}),"query_account_names":({({"string","*",}),({({"string",}),"name",}),(["main":({"This method returns the names of all the accounts in the club.",}),"param":({"club_name the name of the club",}),"return":({"the names of all the accounts",}),]),}),"create_club":({({"int",}),({({"string",}),"name",({"string",}),"founder",({"int",}),"type",}),(["main":({"This method creates a club.  The founder and the recruiter set isinitialy set to the founder.",}),"see":({"disband_club()","change_club_type()",}),"param":({"name the name of the club","founder the founder of the club",}),"return":({"1 was able to create the club, 0 if unable to create the club",}),]),}),"add_member":({({"int",}),({({"string",}),"name",({"string",}),"member",}),(["main":({"This method adds a member to the club.",}),"see":({"add_recruiter()","query_recruiters()","query_members()","remove_member()",}),"param":({"name the name of the club to add the recruiter to","member the member of the club to add",}),"return":({"1 on success, 0 on failure",}),]),}),"is_founder_of":({({"int",}),({({"string",}),"name",({"string",}),"founder",}),(["main":({"This method will determine if the specified person is the founder ofthe club.",}),"see":({"create_club()",}),"param":({"name the name of the club to check the founder of","founder the person to check for being the founder",}),"return":({"1 if they are in the position, 0 if not",}),]),}),"query_club_description":({({"string",}),({({"string",}),"club_name",}),(["main":({"This method returns the description of the club.",}),"see":({"query_club_name()","create_club()","set_club_description()",}),"param":({"club_name the name of the club to get the description of",}),"return":({"the club description, 0 if the club is not found",}),]),}),"remove_recruiter":({({"int",}),({({"string",}),"name",({"string",}),"recruiter",}),(["main":({"This method removes a recruiter from the club.",}),"see":({"add_recruiter()","query_recruiters()","add_member()",}),"param":({"name the name of the club to remove the member from","recruiter the recruiter to remove",}),"return":({"1 on success, 0 on failure",}),]),}),"remove_observer":({({"int",}),({({"string",}),"obs",}),(["main":({"This method removes an observer.",}),"param":({"obs the obeserver to remove",}),"return":({"1 on success, 0 on failure",}),]),}),"remove_money":({({"int",}),({({"string",}),"name",({"int",}),"amount",({"int",}),"type",({"string",}),"person",({"string",}),"account",}),(["main":({"This method removes money from the account.",}),"see":({"pay_money()","query_balance()","query_transactions()",}),"param":({"name the name of the club","amount the amount to change the balance by","type the tyope of the transaction","person the person removeing the money","account the account the money is coming from",}),"return":({"1 if the removal is a success",}),]),}),"create_account":({({"int",}),({({"string",}),"name",({"string",}),"account",}),(["main":({"This method creates an account in the club.",}),"param":({"name the name of the club","account the name of the account",}),]),}),"query_club_secret":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks to see if the club is secret or not.",}),"see":({"set_club_secret()",}),"param":({"name the name of the club to check for secrecy",}),"return":({"1 if the club is secret, 0 if not",}),]),}),"query_insignia_path":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the insignia object associated with the club.",}),"see":({"create_club()",}),"param":({"name the name of the club for the insignia object",}),"return":({"the path of the club insignia object",}),]),}),"is_elected_club":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks to see if the specified club exists and is anelected club.",}),"param":({"name the name of the club to check to see for an elected type",}),"return":({"1 if the club is an elected type",}),]),}),"add_observer":({({"int",}),({({"string",}),"obs",}),(["main":({"Adds an objec to the list to be informed of changes about theclubs.",}),"param":({"obs the name of the object to inform of changes",}),"return":({"1 on success, 0 on failure",}),]),}),"query_balance":({({"int",}),({({"string",}),"name",({"string",}),"account",}),(["main":({"This method returns the balance of the club.",}),"see":({"pay_money()","remove_money()",}),"param":({"name the name of the club","account the name of the account",}),"return":({"the current balance of the club",}),]),}),"query_club_name":({({"string",}),({({"string",}),"club_name",}),(["main":({"This method returns the capitalised and un messed name of the club.",}),"see":({"is_club()",}),"param":({"club_name the name of the club",}),"return":({"the un messed name of the club",}),]),}),"query_clubs":({({"string","*",}),({}),(["main":({"This method returns the names of all the clubs currently in the listof clubs.",}),"see":({"create_club()","disband_club()",}),"return":({"the list of current clubs",}),]),}),"is_creator_club":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method determines if the club is a creator club or not.  Aclub is considered a creator club if the founder is a creator.",}),"param":({"club_name",}),"return":({"1 if is a creator club, 0 if not",}),]),}),"add_money":({({"int",}),({({"string",}),"name",({"int",}),"amount",({"int",}),"type",({"string",}),"person",({"string",}),"account",}),(["main":({"This method will pay a certain amount of money to club.  This will behow long the club is payed until.  The club will cost a certainamount for each member as well as a base cost.",}),"see":({"remove_money()","query_balance()","query_transactions()",}),"param":({"name the name of the club","amount the amount to change the balance by","type the tyope of the transaction","person the person removeing the money","account the account the money is coming from",}),"return":({"the amount of money not able to be placed in the account",}),]),}),"query_members":({({"string","*",}),({({"string",}),"name",}),(["main":({"This method returns the members of the club.",}),"see":({"add_member()","remove_member()",}),"param":({"name the members of the club",}),"return":({"the members of the club",}),]),}),"touch_club":({({"void",}),({({"string",}),"name",}),(["main":({"This method touches the club and resets the timeout date.  This shouldbe done now and then by the club to make sure it does not timeout.",}),"see":({"check_clubs()",}),"param":({"name the name of the club to reset the timeout for",}),]),}),"query_club_cost_per_period":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method determines how much the club will cost to run eachpay period.",}),"see":({"query_time_fees_due()",}),"param":({"club_name the name of the club to get the fees for",}),"return":({"the amount the club will cost in the next pay period",}),]),}),"set_club_secret":({({"int",}),({({"string",}),"name",}),(["main":({"This method makes a clubs membership secret.",}),"see":({"query_club_secret()","reset_club_secret()",}),"param":({"name the name of the club to make secret",}),"return":({"1 on success, 0 on failure",}),]),}),"is_account_of":({({"int",}),({({"string",}),"club_name",({"string",}),"account",}),(["main":({"This method checks to see if the account exists for the club.",}),"param":({"club_name the name of the name","account the name of the account to checlk",}),"return":({"1 if it exists, 0 if it does not",}),]),}),"query_founder":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the founder of the club.",}),"see":({"create_club()",}),"param":({"name the club name to get the founder of",}),"return":({"the founder of the club",}),]),}),])
protected_functions (["send_observer_event":({({"void",}),({({"string",}),"event_name",({"string","*","args",}),"...",}),(["main":({"This method calls a function on all the observers to tell themwhen an event has taken place.",}),"param":({"event_name the name of the event","args the arguments to the event",}),]),}),"set_club_changed":({({"void",}),({({"string",}),"name",}),(["main":({"This method marks the club as being changed.",}),]),}),"save_cache":({({"void",}),({}),(["main":({"This method checks the cache and then saves anything changed to thedisk...",}),]),}),"send_broadcast_message":({({"void",}),({({"string",}),"club",({"string",}),"message",}),(["main":({"This method sends a broadcast to the clubs talker channel.",}),"param":({"club the name of the club to send the message to","mess the message to send",}),]),}),"save_club":({({"void",}),({({"string",}),"name",}),(["main":({"This method saves the data to the disk.",}),]),}),"save_main":({({"void",}),({}),(["main":({"This method loads the data from the disk.",}),]),}),"query_club_info":({({"class","club_info",}),({({"string",}),"name",}),(["main":({"This method either loads the data into the cache or itreads it from the cache.",}),]),}),"create_extra_data":({({"void",}),({({"string",}),"name",}),([]),}),"load_main":({({"void",}),({}),(["main":({"This method loads the data from the disk.",}),]),}),])
inherits ([])
main_docs (["main":({"This is the handler for all things clubby, a club being a group ofplayers.  Each club must have a unique name.  It also handles electionsfor various club positions.",}),"started":({"Sun Sep 27 03:35:42 EDT 1998",}),"author":({"Pinkfish",}),])
define_docs (["SAVE_FILE_DIR":([]),"CLUB_CACHE_SIZE":(["main":({"The basic club information class.",}),"member":({"actual_name the actual name of the club","founder the founder of the club","recruiters the people who can recruit for the club","members the members of the club","type the type of the club","accounts the accounts in the club","last_paid when the balance was last paid","last_touched when the club was last touched","extra_data specific data for each type of club",}),]),"SAVE_FILE_NAME":([]),])
includes (["/include/time.h":1049465667,"/include/broadcaster.h":962756770,"/include/clubs.h":1050407666,])
class_docs (["club_info":({0,({({"actual_name",({"string",}),}),({"founder",({"string",}),}),({"recruiters",({"string","*",}),}),({"members",({"string","*",}),}),({"type",({"int",}),}),({"accounts",({"mapping",}),}),({"last_paid",({"int",}),}),({"last_touched",({"int",}),}),({"extra_data",({"mixed",}),}),({"description",({"string",}),}),}),(["main":({"The basic club information class.",}),"member":({"actual_name the actual name of the club","founder the founder of the club","recruiters the people who can recruit for the club","members the members of the club","type the type of the club","accounts the accounts in the club","last_paid when the balance was last paid","last_touched when the club was last touched","extra_data specific data for each type of club",}),]),}),])
file_name "/handlers/inherit/club_basic.c"
last_changed 1021623197
