#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_story":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the story associated with the player.   This iscreated from all the information about the quests they have donejoined together into a neato story.",}),"see":({"/handlers/quest_handler->query_quest_story()",}),"param":({"name the player name",}),"return":({"the story of the player",}),]),}),"query_player_quest_info":({({"mixed","*",}),({({"string",}),"pl_name",({"string",}),"qu_info",}),(["main":({"This method returns the quest info for a specific quest.This information is used for quests which have several parts to themand information needs to be stored about the player as they attemptto complete it.",}),"param":({"pl_name the player name","qu_info the quest name",}),"return":({"the information associated with the quest",}),]),}),"query_quests":({({"string","*",}),({({"string",}),"name",}),(["main":({"This method returns the set of currently completed quests by theplayer.",}),"param":({"name the name of the player",}),"return":({"the array of completed quests",}),]),}),"get_most_recent_time":({({"int",}),({({"string",}),"name",}),(["main":({"This method gets the most recent time a quest was complete by theplayer.",}),"param":({"name the name of the player",}),"return":({"the time of the most recently completed quest",}),]),}),"query_title":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the players current title.",}),"see":({"/handlers/quest_handler.c",}),"param":({"name the name of the player",}),"return":({"their current title, 0 if no title",}),]),}),"restart":({({"int",}),({({"string",}),"name",}),(["main":({"This method is called when a player refreshes totally or gets deleted.",}),"param":({"name the player name",}),"return":({"0 if they do not exists, 1 if they do",}),]),}),"unset_quest":({({"int",}),({({"string",}),"pl_name",({"string",}),"qu_name",}),(["main":({"This method removes a quest from the players list of completed quests.",}),"see":({"/handlers/quest_handler.c",}),"param":({"pl_name the player name","qu_name the quest name",}),"return":({"0 if they have not done the quest, 1 if they habe",}),]),}),"get_most_recent_quest":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the most recently completed quest by the player.",}),"param":({"name the player name",}),"return":({"the most recently completed quest",}),]),}),"query_quest_time":({({"int",}),({({"string",}),"name",({"string",}),"qu_name",}),(["main":({"This method returns the time at which a quest is completed.",}),"param":({"name the name of the player to get the time for","qu_name the name of the quest",}),"return":({"the time at which it is completed",}),]),}),"set_quest":({({"int",}),({({"string",}),"pl_name",({"string",}),"qu_name",({"int",}),"no_xp",}),(["main":({"This method sets the player as having done the quest and if weshould give them xp for itThis function should be called when a quest is finished.  It will thencall the quest_completed function on the quest handler and do allassorted modifications to the player object etc.  The name should be theplayers name and the quest should be the name of the quest that isstored in the quest handler.<p>The include file <library.h> should be used for calls to thishandler.",}),"param":({"pl_name name of the player","qu_name name of the quest","no_xp do not give out xp",}),"see":({"/handlers/quest_handler->quest_completed()",}),"example":({"// Set the player as completing the womble friend quest, they get// xp for it.LIBRARAY->set_quest(this_player()->query_name(), \"womble friend\", 0);",}),"return":({"0 if the quest is already completed",}),]),}),"set_player_quest_info":({({"void",}),({({"string",}),"pl_name",({"string",}),"qu_info",({"mixed","*",}),"details",}),(["main":({"This method  sets the information related to the players quest.This information is used for quests which have several parts to themand information needs to be stored about the player as they attemptto complete it.",}),"param":({"pl_name the name of the player","qu_info the quest name","details the information associated with the quest.",}),]),}),"query_quest_points":({({"int",}),({({"string",}),"name",}),(["main":({"This method returns the current number of quest points gatheredby the player.",}),"see":({"/handlers/query_handler->query_quest_level()",}),"param":({"name the player",}),"return":({"the current number of quest pointds",}),]),}),"query_all_player_quest_info":({({"mapping",}),({({"string",}),"pl_name",}),(["main":({"This method returns all the quest information for a player.This information is used for quests which have several parts to themand information needs to be stored about the player as they attemptto complete it.  The keys of the mapping are the quest names and thevalues are the information associated with the quest.",}),"param":({"pl_name the name of the player",}),"return":({"the mapping containing all the quest info",}),]),}),"query_quest_done":({({"int",}),({({"string",}),"player",({"string",}),"quest",}),(["main":({"This method tells us if the player has completed the quest.",}),"param":({"player the name of the player","quest the quest name",}),"return":({"1 if the quest has been done, 0 if it has not",}),]),}),"save_them":({({"void",}),({({"object",}),"thing",}),(["main":({"This method causes the player to be saved.",}),"param":({"thing the player to save",}),]),}),])
protected_functions ([])
inherits (["/std/object":({}),])
main_docs (["main":({"The library is a sort of information center.Currently it supports only the recording on stories about players andrecording the quests that they have done.",}),"author":({"Furball",}),"see":({"/include/library.h",}),])
define_docs (["RESTORE_PATH":([]),"SHARED":([]),"UNSHARED":([]),])
includes (["/include/quest_handler.h":962428284,])
class_docs ([])
file_name "/handlers/library.c"
last_changed 1016090685
