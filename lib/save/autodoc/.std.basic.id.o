#/secure/handlers/autodoc/autodoc_file.c
public_functions (["set_plurals":({({"void",}),({({"string","*",}),"str",}),(["main":({"This method sets the compete array of plurals.   This shodnot be used, use add_plural and remove_plural instead.",}),"see":({"add_plural()","remove_plural()","query_plurals()",}),]),}),"query_name":({({"string",}),({}),(["main":({"This method returns the name of the object.",}),"see":({"set_name()","add_alias()","add_adjective()",}),"return":({"the name of the object",}),]),}),"query_cap_name":({({"string",}),({}),(["main":({"This method returns the capitalized name.   It calls the functioncapitalize() on the name",}),"see":({"query_name()","set_name()","efun::capitalize()",}),]),}),"set_aliases":({({"void",}),({({"string","*",}),"str",}),(["main":({"This method sets the entire alias array.   It overrides any current aliasdefinitions and sets the alias arry.   This should be used carefullyif at all.   Use add_alias instead.",}),"param":({"str the new alias array",}),]),}),"set_name":({({"void",}),({({"string",}),"str",}),(["main":({"This method sets the name of the object.   The name is the basic handleused to reference the object.   It should not have any spacesin it.",}),"see":({"query_name()","add_alias()","add_adjective()",}),"param":({"str the name",}),"example":({"set_name(\"rabbit\");",}),]),}),"add_alias":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds an alias to the object.   An alias for the object is thepart used as the main noun for the object. ie in the case of a \"greenbath tub\", \"bathtub\" might be an alias for the object. and \"green\"and \"bath\" would be adjectives. The value set with add_alias is alsoused with present. This means you can make up an alias for an objectthat players cannot normaly access but you canget a handle on with present. For an exmple of this look at the moneyobject.<p>The function takes an array or a string as an argument.   If an arrayis passed in each element of the array is added to the aliasarray, if it is a string then the string elemnt is added to thearray.",}),"see":({"set_name()","remove_alias()","set_aliases()","query_alias()",}),"param":({"str the alias(s) to add",}),"example":({"set_name(\"tub\");set_short(\"green bath tub\");add_alias(\"bathtub\");add_adjective(\"green\");add_adjective(\"bath\");",}),]),}),"query_plurals":({({"string","*",}),({}),(["main":({"This method returns the complete list of plurals for theobject.",}),"return":({"the complete array of plurals",}),]),}),"id_adjective":({({"int",}),({({"string",}),"word",}),(["main":({"This method is similar to the id function, except this will check theadjectives instead of the aliases and the name.",}),"see":({"id()","id_plural()",}),"param":({"word the word to check",}),"return":({"1 if the word matches one of the adjectives, 0 otherwise",}),]),}),"add_adjective":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds an adjective to the object.   The adjectives are used for theobject matching routines.    Fort example, if you have a \"greenbath tun\" then \"green\" and \"bath\" are adjectives.",}),"see":({"add_alias()","remove_adjective()","query_adjectives()","set_adjectives()",}),]),}),"add_plurals":({({"void",}),({({"string","*",}),"str",}),(["main":({"This method adds multiple plurals to the object.",}),"see":({"add_plural()","remove_plural()","query_plurals()",}),"param":({"str the array of plurals to add",}),]),}),"id_plural":({({"int",}),({({"string",}),"str",}),(["main":({"This method is similar to the id function, except this will check theplural names instead of the aliases and the name.",}),"see":({"id()","id_adjective()",}),"param":({"str the name to check",}),"return":({"1 if the name matches one of the plurals, 0 otherwise",}),]),}),"add_plural":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds a plural onto the object.   The plurals will beused in plural name matching by thje find_match simul_efun",}),"see":({"/secure/simul_efun->find_match()","set_plurals()","remove_plural()","query_plurals()","add_plurals()",}),]),}),"query_adjectives":({({"string","*",}),({}),(["main":({"This method returns the current list of adjectives associated withthis object.",}),"return":({"the complete list of adjectives",}),]),}),"query_alias":({({"string","*",}),({}),(["main":({"This method returns the current list of aliases.",}),"see":({"add_alias()","remove_alias()",}),"return":({"the array of aliases (array of strings)",}),]),}),"remove_alias":({({"int",}),({({"string",}),"str",}),(["main":({"This method removes an alias from the object.",}),"param":({"str the alias to remove",}),"see":({"add_alias()","query_alias()",}),"return":({"1 if the alias is found, 0 if not",}),]),}),"set_adjectives":({({"void",}),({({"string","*",}),"str",}),(["main":({"This method sets all the adjectives for the object.   This methodshould not be used, please use add_adjective instead.",}),"param":({"str the array of adjectives",}),"see":({"add_adjective()","remove_adjective()","query_adjectives()",}),]),}),"remove_plural":({({"void",}),({({"string",}),"str",}),(["main":({"This method removes a plural from the object.",}),"see":({"add_plural()","query_plurals()","set_plurals()",}),"param":({"str the plural to remove",}),]),}),"id":({({"int",}),({({"string",}),"str",}),(["main":({"This method is used by the present efun.   It determines if thepassed in string is an alias or the name of the object.",}),"param":({"str the value to check",}),"return":({"1 if the name matches",}),]),}),"remove_adjective":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method will remove an adjective from the object.",}),"param":({"str the adective(s) to remove",}),"see":({"add_alias()","add_adjective()","query_adjectives()",}),]),}),])
protected_functions ([])
inherits (["/std/basic/id_match":({}),])
main_docs (["main":({"This class keepos track of all the aliases, names and adjectiveswhich are used to match the object.",}),"see":({"/global/player->add_command()","/std/basic/desc.c",}),])
define_docs ([])
includes (["/include/parse_command.h":962428284,])
class_docs ([])
file_name "/std/basic/id.c"
last_changed 1005468434
