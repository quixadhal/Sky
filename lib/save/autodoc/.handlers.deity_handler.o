#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_deity_finger":({({"string",}),({({"string",}),"deity",}),(["main":({"This method returns the string used when fingering a deity.",}),"param":({"deity the deity to finger",}),"return":({"the information relating to the deity",}),]),}),"complete_cont":({({"int",}),({({"string",}),"player",({"string",}),"deity",({"int",}),"amount",}),(["main":({"This method will be called by the contemplating room.It will add the specified amount of gps to the playerscontemplating mapping.  If the amount is -1, it willeffectively complete the contemplation for the specifieddeity.",}),"param":({"player the player to update the mapping for","deity the deity the player contemplated","amount the amount of gps the player used,or if it is -1, then this deity will be consideredas 'completed' for the player",}),"return":({"1 if the player has completed the contemplatingof the specified deity, 0 if not",}),]),}),"query_deities":({({"string","*",}),({}),(["main":({"This method returns the names of all deities currently in the handler.",}),"return":({"all the deity names",}),]),}),"delete_ritual":({({"int",}),({({"string",}),"deity",({"string",}),"ritual",}),(["main":({"This method deletes a ritual from the deity.",}),"param":({"deity the name of the deity","ritual the ritual to delete",}),]),}),"query_title":({({"string",}),({({"string",}),"deity",}),(["main":({"This method returns the title for the deity.",}),"param":({"deity the deity to get the title of",}),"return":({"the title of the deity",}),]),}),"set_al_upper":({({"int",}),({({"string",}),"deity",({"int",}),"number",}),(["main":({"This method sets the upper alignment limit for thegiven deity.",}),"param":({"deity the name of the deity",}),"return":({"the upper alignment limit",}),]),}),"valid_worshipper":({({"int",}),({({"string",}),"worshipper",({"string",}),"deity",}),(["main":({"This method checks to see if the worshipper is valid.  This basicallychecks to see if they exist and they are worshipping the current deity.",}),"see":({"\"/handlers/player_handler\"->test_deity()",}),"param":({"worshipper the worshipper to check","deity the deity they should be worshipping according to the handler",}),"return":({"0 if they are not valid, 1 if they are",}),]),}),"set_want_worshippers":({({"void",}),({({"string",}),"deity",({"int",}),"number",}),(["main":({"This method sets if the deity wants worshippers or not.",}),"param":({"deity the name of the deity to change","number the value of the flag",}),]),}),"query_info":({({"string",}),({({"string",}),"deity",}),(["main":({"This method returns information about the deity.  This is usedin the finger information and when querying about joining theclergy.",}),"param":({"deity the name of the deity to get information on",}),"return":({"information about the deity",}),]),}),"query_possessive":({({"string",}),({({"string",}),"deity",}),(["main":({"This method returns the possessive for the deity.",}),"param":({"deity the name of the deity to get the possessive of",}),"see":({"/std/living/gender->query_possessive()",}),"return":({"the possessive of the deity",}),]),}),"query_commands":({({"string","*",}),({({"string",}),"deity",}),(["main":({"This method queries the commands given to worshippers.",}),"param":({"deity the deity to get the commands for",}),"return":({"the commands array",}),]),}),"add_worshipper":({({"int",}),({({"string",}),"deity",({"string",}),"worshipper",}),(["main":({"This method adds a worshipper into the worshippers array.",}),"param":({"deity the name of the deity","worshipper the worshipper to add",}),"return":({"returns 1 if successfully added, 0 if already exists",}),]),}),"query_worshippers":({({"string","*",}),({({"string",}),"deity",}),(["main":({"This method returns the names of all worshippers.",}),"param":({"deity the name of the deity to query",}),"return":({"the worshippers array",}),]),}),"query_worshipper":({({"int",}),({({"string",}),"deity",({"string",}),"worshipper",}),(["main":({"This method checks if a player is the worshipper of the god",}),"param":({"deity the name of the deity","worshipper the worshipper to check",}),"return":({"1 if the player is a worshipper, 0 if not",}),]),}),"set_al_lower":({({"int",}),({({"string",}),"deity",({"int",}),"number",}),(["main":({"This method sets the lower alignment limit for thegiven deity.",}),"param":({"deity the name of the deity",}),"return":({"1 upon success, 0 upon failure",}),]),}),"query_al_middle":({({"int",}),({({"string",}),"deity",}),(["main":({"This method returns the middle alignment for thegiven deity.",}),"param":({"deity the name of the deity to query",}),"return":({"the middle alignment value",}),]),}),"query_objective":({({"string",}),({({"string",}),"deity",}),(["main":({"This method returns the objective for the deity.",}),"param":({"deity_name the name of the deity to get the objective of",}),"see":({"/std/living/gender->query_objective()",}),"return":({"the objective of the deity",}),]),}),"add_command":({({"int",}),({({"string",}),"deity",({"string",}),"command",}),(["main":({"This method adds a command to be given to the worshippers.",}),"param":({"deity the deity to add the command for","command the name of the command",}),"return":({"1 if successful, 0 if not",}),]),}),"query_contemplating":({({"mapping",}),({}),(["main":({"This method will return the whole contemplating array.",}),"return":({"the array of contemplating people",}),]),}),"query_pronoun":({({"string",}),({({"string",}),"deity",}),(["main":({"This method returns the pronoun for the deity.",}),"param":({"deity the name of the deity to get the pronoun of",}),"see":({"/std/living/gender->query_pronoun()",}),"return":({"the pronoun of the deity",}),]),}),"query_gender":({({"int",}),({({"string",}),"deity",}),(["main":({"This method returns the gender of the deity.  The gender is the sameas used elsehwere in the game.  0 for neuter, 1 for male and 2 for female.",}),"param":({"deity the deity name",}),"see":({"/std/living/gender.c",}),"return":({"the gender of the deity",}),]),}),"delete_command":({({"int",}),({({"string",}),"deity",({"string",}),"command",}),(["main":({"This method deletes a command to be given to the worshippers.",}),"param":({"deity the name of the deity","command the name of the command to delete",}),"return":({"1 if success, 0 if not",}),]),}),"refresh_worshipper":({({"void",}),({({"string",}),"worshipper",}),(["main":({"This method deletes the given worshipper by name from alldeities' arrays.  This is called by the refresh handlerwhen the player refreshes or is deleted.",}),"param":({"worshipper the worshipper to refresh",}),"return":({"1 if the operation was successful, 0 if it failed",}),]),}),"query_al_upper":({({"int",}),({({"string",}),"deity",}),(["main":({"This method returns the upper alignment limit for thegiven deity.",}),"param":({"deity the name of the deity to query",}),"return":({"the upper alignment limit",}),]),}),"set_gender":({({"void",}),({({"string",}),"deity",({"int",}),"number",}),(["main":({"This method sets the gender of the deity.  The gender is the sameas used elsehwere in the game.  0 for neuter, 1 for male and 2 for female.",}),"param":({"deity the deity name","number the gender to set the deity to",}),"see":({"/std/living/gender.c",}),]),}),"query_want_worshippers":({({"int",}),({({"string",}),"deity",}),(["main":({"This method tells if the deity wants worshippers or not.",}),"param":({"deity the deity to check",}),"return":({"1 if the deity wants worshippers, 0 if not",}),]),}),"query_finished_contemplating":({({"int",}),({({"string",}),"deity",({"string",}),"player",}),(["main":({"This method queries whether or not the given player hasfinished contemplating the specified deity.",}),"param":({"deity the deity to check","player the player to check",}),"return":({"1 if the player has completed contemplatingthe specified deity, 0 if not",}),]),}),"query_player_cont_data":({({"mapping",}),({({"string",}),"player",}),(["main":({"This method queries the data for the given player.",}),"param":({"player the player to get the contemplating data for",}),"return":({"the contemplating data for the given player",}),]),}),"make_dust":({({"object",}),({({"int",}),"amount",({"string",}),"deity",}),(["main":({"This method creates an amount of holy dust for the specified deity.",}),"param":({"amount the amount of dust to create","deity the deity to create the dust for",}),"return":({"the newly created dust object",}),]),}),"add_ritual":({({"int",}),({({"string",}),"deity",({"string",}),"ritual",}),(["main":({"This method adds a ritual to the set given by the deity.",}),"param":({"deity the name of the deity","ritual the name of the ritual to add",}),"return":({"returns 1 if successful, 0 if not",}),]),}),"delete_worshipper":({({"int",}),({({"string",}),"deity",({"string",}),"worshipper",({"string",}),"reason",}),(["main":({"This method deletes the given worshipper.",}),"param":({"deity the name of the deity","worshipper the worshipper to delete","reason the reason for deletion",}),"return":({"1 if the operation was successful, 0 if it failed",}),]),}),"set_info":({({"void",}),({({"string",}),"deity",({"string",}),"text",}),(["main":({"This method sets information about the deity.  This is usedin the finger information and when querying about joining theclergy.",}),"param":({"deity the name of the deity to set information for","text the new value for the information",}),]),}),"query_al_lower":({({"int",}),({({"string",}),"deity",}),(["main":({"This method returns the lower alignment limit for thegiven deity.",}),"param":({"deity the name of the deity to query",}),"return":({"the lower alignment limit",}),]),}),"align_string":({({"string",}),({({"int",}),"alignment",}),(["main":({"This method gives a string represtentation of thealignment level.",}),"param":({"alignment the alignment to return",}),"return":({"alignment string",}),]),}),"query_deity_colour":({({"string",}),({({"string",}),"deity",}),(["main":({"This method returns the colour for a deity, as used by the holy dustand ritual messages.",}),"return":({"the colour of the deity",}),]),}),"query_deity_data":({({"string",}),({({"string",}),"deity",}),(["main":({"This method returns a string containing all the vital informationon a deity.",}),"param":({"deity the deity to get the data for",}),"return":({"vital info about a deity",}),]),}),"query_rituals":({({"string","*",}),({({"string",}),"deity",}),(["main":({"This method queries the rituals given by this deity.",}),"param":({"deity the deity to get the rituals for",}),"return":({"the rituals array",}),]),}),"set_title":({({"void",}),({({"string",}),"deity",({"string",}),"text",}),(["main":({"This method sets the title for the deity.",}),"param":({"deity the deity to set the title for","text the new title of the deity",}),]),}),"query_valid_al":({({"int",}),({({"string",}),"deity",({"int",}),"number",}),(["main":({"This method determines if the alignment is valid for the deity.",}),"param":({"deity the deity to check","number the alignment to check",}),"return":({"0 if it is valid, 1 if above upper_al, -1 if lower than lower_al",}),]),}),"random_al":({({"int",}),({({"string",}),"deity",}),(["main":({"This method returns a random alignment between the limits for thegiven deity.  This is used by NPCs to set themselves upwith a correct alignment for their deity.",}),"param":({"deity the name of the deity",}),"return":({"a random valid alignment",}),]),}),"query_deity":({({"int",}),({({"string",}),"deity",}),(["main":({"This method tells if the deity exists.",}),"param":({"deity the name of the deity to check",}),"return":({"1 if the deity exists, 0 if not",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["changed":({"Changed to display correct alignment strings in deity finger- Sandoz, 24th May 2001.","Rewrote completely- Sandoz, 20th Sept. 2002.",}),"main":({"Keeps track of all the information about deities.  Like the worshippers,rituals, commands etc.To set up a deity, please use the 'deitytool' command.",}),"author":({"Olorin",}),])
define_docs (["SAVE_FILE(x)":([]),"DEITY_SAVE_DIR":([]),"MAX_AMOUNT":([]),"CHECK_TIME":([]),"SAVE":([]),"DEITY":([]),"TIME":([]),"CHECK":([]),])
includes (["/include/tune.h":1003366871,"/include/deity.h":1032578400,])
class_docs (["deity_data":({0,({({"al_lower",({"int",}),}),({"al_upper",({"int",}),}),({"gender",({"int",}),}),({"recruiting",({"int",}),}),({"info",({"string",}),}),({"title",({"string",}),}),({"name",({"string",}),}),({"worshippers",({"string","*",}),}),({"rituals",({"string","*",}),}),({"commands",({"string","*",}),}),}),([]),}),])
file_name "/handlers/deity_handler.c"
last_changed 1053448521
