#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_snowing":({({"int",}),({({"object",}),"env",}),(["main":({"Find out if its snowing in a given room.",}),"param":({"env the room",}),"return":({"1 or 0 for true or false.",}),]),}),"room_dested":({({"void",}),({}),(["main":({"This method is called by the room object when it is dested.It will delete it from the rooms mapping.",}),]),}),"query_moon_string":({({"string",}),({({"object",}),"env",}),(["main":({"Get the appropriate moon string. This is almost completely from the oldsystem. I don't understand the moon.",}),"param":({"env the room to check",}),"return":({"the moon string.",}),]),}),"temp_string":({({"string",}),({({"int",}),"temp",}),(["main":({"Return a temperature string equating to the temperature passed",}),"param":({"int The temperature in Celcius",}),"return":({"string a temperature string.",}),]),}),"query_raining":({({"int",}),({({"object",}),"env",}),(["main":({"Find out if its raining in a given room.",}),"param":({"env the room",}),"return":({"1 or 0 for true or false.",}),]),}),"weather_notify":({({"int",}),({({"object",}),"which_room",({"int",}),"notifications",}),(["main":({"Add a room to the list of rooms to notify about weather.  Notificationsare an ORed (|) combination of the #defines in /include/climate.hIE: To inform about temperature and rain changes, callweather_notify( room, (NOTIFY_TEMPERATURE | NOTIFY_RAIN) );",}),"param":({"which_room the room to be notified","notifications a bitmap of notifications",}),"return":({"success or failure (1 or 0)",}),]),}),"query_tod":({({"string",}),({}),(["main":({"Return a string for the period of the day",}),"return":({"night, morning, midday, afteroon or evening.",}),]),}),"query_temperature":({({"int",}),({({"object",}),"env",}),(["main":({"Find out the temperature of a given room.",}),"param":({"env the room",}),"return":({"a temperature in Celcius",}),]),}),"query_sunrise":({({"int",}),({({"int",}),"doy",}),(["main":({"Find out when sunrise will be on a given day of the year.",}),"param":({"doy Day of the Discworld common year.",}),"return":({"sunrise time (in seconds past midnite).",}),]),}),"query_windsp":({({"int",}),({({"object",}),"env",}),(["main":({"Find out the wind speed in a given room.",}),"param":({"env the room",}),"return":({"the wind speed in miles per hour.",}),]),}),"query_season":({({"string",}),({}),(["main":({"Return which of the 4 seasons we are in.",}),"return":({"spring, summer, autumn or winter.",}),]),}),"minute_number":({({"int",}),({}),(["main":({"Find out which minute of the day (0 - 1439) it is.",}),"return":({"the minute.",}),]),}),"check_umbrella":({({"int",}),({({"object",}),"ob",}),([]),}),"query_sunset":({({"int",}),({({"int",}),"doy",}),(["main":({"Find out when sunset will be on a given day of the year.",}),"param":({"doy Day of the Discworld common year.",}),"return":({"sunset time (in seconds past midnite).",}),]),}),"query_moon_phase":({({"string",}),({}),(["main":({"Find out which phase of the moon we're currently in.",}),"return":({"a string for the phase of the moon.",}),]),}),"day_number":({({"int",}),({}),(["main":({"Find out which day of the Disc (common) year it is.",}),"return":({"the day of the year.",}),]),}),"query_cloud":({({"int",}),({({"object",}),"env",}),(["main":({"Find out the cloud cover of a given room.",}),"param":({"env the room",}),"return":({"an open ended percentage. Greater than 100 means heavier cover.",}),]),}),"query_darkness":({({"int",}),({({"object",}),"env",}),(["main":({"This method returns percentage of light.It should be dependant on the base amount of light, day or night timeand cloud cover.",}),"param":({"the room",}),"return":({"a percentage",}),]),}),])
protected_functions ([])
inherits (["/std/object":({}),])
main_docs (["main":({"An attempt at a new weather handler for Discworld.Ceres@Discworld 14/4/96Having thought about the way weather works (and Discworlds interestingmeteorology) I decided not to try and implement some model of realworldweather. Instead regional variations in weather are handled byregional climate properties. This system will handle diurnal and seasonalvariations and that's about it. Hopefully that will make it moreunderstandable, usable and efficient.Basic Operation---------------The weather is based on weather 'pattern's. The pattern lasts for severalhours and is calculated from the 'seasonal' norm and the 'variance'. The'current' weather will tend towards the pattern weather. The actual weatherin a room will depend on the current weather, local modifiers(climate property), diurnal variations and variance.Thus update_pattern() is called once every reboot (for the moment) andupdate_weather() is called every 5 minutes (UPDATE_SPEED).Decisions---------Calculation of the general weather has been moved intoupdate_weather. Rather than doing it on a room by room basis everytimesomeone looks! Instead, local climate controls will be added verbatim tothe current global weather. This will improve efficiency massively, but willreduce the overall weather variations.Principles----------Temperature should go down during winter and during the night.Clouds should increase during the winter.Wind should be higher during autumn and winter (I guess).Rain/sleet/snow will depend on cloud density and temperature.If it's windy and lots of cloud density we might get a thunder storm.Cloud cover should lower temperature as should wind.Changed Jun 3 1996 by Grampa to include weather notifications for rooms.Changed to Dediscify it Shaydz 2001",}),])
define_docs (["DIF(x,":([]),"UPDATE_SPEED":([]),"CYCLE_SPEED":([]),"FILE_NAME":([]),"DIY":([]),])
includes (["/include/time.h":1049465667,"/include/climate.h":986801078,])
class_docs ([])
file_name "/handlers/weather.c"
last_changed 1091264336
