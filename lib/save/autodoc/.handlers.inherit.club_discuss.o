#/secure/handlers/autodoc/autodoc_file.c
public_functions (["is_discuss_nominateable":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method checks to see if the discussion item is a votableitem or not.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"1 if it is votable, 0 if not",}),]),}),"nominate_discussion_item":({({"int",}),({({"string",}),"club_name",({"int",}),"id",({"string",}),"nominator",({"string",}),"nominated",}),(["main":({"This message does the nomination thing for those discussion itemswhich accept nominations.",}),"param":({"club_name the name of the club","id the id of the discussion item","nominator the person doing the nomination","nominated the person nominated",}),]),}),"query_discussion_item_quorum_number":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns the number of people needed for quorumin this discussion item.",}),"param":({"club_name the name of the club to check for quorum","id the discussion item id",}),"return":({"the number of people needed for quorum",}),]),}),"query_discussion_item_by_type":({({"class","discussion_idea",}),({({"string",}),"club_name",({"int",}),"type",({"class","discussion_idea",}),"idea",}),(["main":({"This method figures out the discussion item for the club with thegiven type.  It will also continue on a search from a last found item.",}),"see":({"add_discussion_item()",}),"param":({"club_name the name of the club","type the type of the discussion item to find",}),"return":({"the found discussion item",}),]),}),"is_discussion_item_finished":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method checks to see if the discussion item is completed yet.",}),"see":({"vote_for_discussion_item()",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"1 if the discussion item is finished",}),]),}),"query_discussion_item_number_voted":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns the number of people who have voted for thediscussion item.",}),"param":({"club_name the name of the club to check for quorum","id the discussion item id",}),"return":({"the number of people who have voted",}),]),}),"withdraw_discussion_item":({({"int",}),({({"string",}),"club_name",({"int",}),"id",({"string",}),"withdraw",}),(["main":({"This message does the withdraw thing for those discussion itemswhich accept nominations.",}),"param":({"club_name the name of the club","id the id of the discussion item","withdraw the person being withdrawn",}),]),}),"is_no_quorum_discussion_item":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method checks to see if the discussion item has no quorumassociated with it.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"1 if it has no quorum, 0 if it is does",}),]),}),"query_discussion_nomination":({({"mapping",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns the nomination mapping for the discussion itemif it exists.  The nomination mapping is of the format:<br><pre>([   name : ({ nomated_by, nominated_by, ... })   .. ])</pre>",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"the mapping as described above",}),]),}),"is_committee_discussion_item":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method checks to see if the discussion item is a committee onlyitem.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"1 if it is a committee only item, 0 if it is open",}),]),}),"query_all_discussion_items":({({"class","discussion_idea","*",}),({({"string",}),"club_name",}),(["main":({"This method returns all the current discussion items for thisclub.",}),"param":({"club_name the name of the club to query the discussion items for",}),"return":({"the list of current discussion items",}),]),}),"vote_for_discussion_item":({({"int",}),({({"string",}),"club_name",({"int",}),"id",({"string",}),"person",({"string",}),"choice",}),(["main":({"This method sets up the discussion item as being voted by theperson specified.",}),"see":({"add_discussion_item()",}),"param":({"club_name the name of the club","id the id of the discussion item","person the person doing the voting","choice the choices there are to vote on",}),]),}),"query_discussion_item_long_description":({({"string",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns a nice little description of the discussion item.This is a longer description, useful in more places.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"a long description of the item",}),]),}),"is_valid_discussion_item_type":({({"int",}),({({"int",}),"type",}),(["main":({"This method checks to make sure the type of the discussion itemis valid.",}),"param":({"type the type of the discussion item",}),"return":({"1 if it is valid, 0 if not",}),]),}),"query_discussion_item":({({"class","discussion_idea",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method figures out the discussion item for the club with thegiven id.",}),"see":({"add_discussion_item()",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"the found discussion item",}),]),}),"complete_discussion_item":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method completes the discussion item.",}),"see":({"add_discussion_item()",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"1 if successful, 0 if not",}),]),}),"is_discussion_position_valid":({({"int",}),({({"string",}),"club_name",({"string",}),"position",}),(["main":({"This is a special function to be used with the discuss items tomake sure that there is not another discussion item checking thesame name.",}),"param":({"club_name the name of the club to check","position the position to check for",}),"return":({"1 if the position is being discussed as an item",}),]),}),"add_discussion_item":({({"int",}),({({"string",}),"club",({"int",}),"type",({"string",}),"added_by",({"string",}),"name",({"string",}),"info",({"string","*",}),"choices",({"int",}),"time_to_finish",({"mixed",}),"extra_data",}),(["main":({"This method will add a discussion item to the table to be voted on.",}),"param":({"club the club the item is being added to","type the type of the discussion item to be added","added_by who added the discussion item","name the name of the discussion item","choices the choices for the discussion item","time_to_finish the amount of time the election has to run","extra_data any optional data associated with the discussion idea",}),"return":({"1 if successfully added, 0 if not",}),]),}),"query_discussion_choices":({({"string","*",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns all the choices for this discussion item.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"an array of the valid set of choices, empty array on failure",}),]),}),"can_reference_discussion_item":({({"int",}),({({"string",}),"club_name",({"int",}),"id",({"string",}),"person",}),(["main":({"This method checks to see if the specified person can see thediscussion idea.",}),"see":({"vote_for_discussion_item()",}),"param":({"club_name the name of the club","id the id of the discussion idea","person the name of the person",}),]),}),"query_discussion_optional_data":({({"mixed",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns the optional data of the discussion item.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"the optional data in the club",}),]),}),"query_discussion_time_finish":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns the timeout time of the current discussion item.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"the time at which the dicussion item will finish",}),]),}),"setup_by_election":({({"int",}),({({"string",}),"club",({"string",}),"position",({"string",}),"info",}),(["main":({"This method setups up a by-election for the specified position in theclub.",}),"param":({"club the club to make a byelection in","position the position the byelection is for","info the information about the vote",}),"return":({"1 on success, 0 on failure",}),]),}),"query_discussion_item_short_description":({({"string",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns a nice little description of the discussion item.This is a very short description usable in lists and stuff.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"a short description of the item",}),]),}),"has_voted_for_discussion_item":({({"int",}),({({"string",}),"club_name",({"int",}),"id",({"string",}),"person",}),(["main":({"This method checks to see if the specified person has already voted forthis discussion item.",}),"param":({"club_name the name of the club","id the id of the discussion item","person the name of the person to check",}),]),}),"query_discussion_added_by":({({"string",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns the person who added the discussion item.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"the name of the person who added the discussion item",}),]),}),"is_discuss_votable":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method checks to see if the discussion item is a votableitem or not.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"1 if it is votable, 0 if not",}),]),}),"is_discussion_item_quorum":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method checks to see if quorum has been reached or notfor the club.",}),"param":({"club_name the name of the club to check for quorum","id the discussion item id",}),"return":({"1 if quorum is reached, 0 if not",}),]),}),"is_discuss_person_nominated":({({"int",}),({({"string",}),"club_name",({"int",}),"id",({"string",}),"nominator",({"string",}),"nominated",}),(["main":({"This method checks to see if the given nomination has already beendone.",}),"param":({"club_name the name of the club","id the id of the discussion ite,","nominator the person doing the nomination","nominated the person being nominated",}),"return":({"1 if they are already nominated, 0 if not",}),]),}),"query_discussion_time_added":({({"int",}),({({"string",}),"club_name",({"int",}),"id",}),(["main":({"This method returns the timeout time of the current discussion item.",}),"param":({"club_name the name of the club","id the id of the discussion item",}),"return":({"the time at which the dicussion item will finish",}),]),}),"is_valid_discussion_choice":({({"int",}),({({"string",}),"club_name",({"int",}),"id",({"string",}),"choice",}),(["main":({"This checks to see if the specified choice is a real discussion itemchoice.",}),"param":({"club_name the name of the club","id the id of the discussion item","choice the choice to check",}),]),}),])
protected_functions (["send_discuss_message":({({"mixed",}),({({"string",}),"club_name",({"int",}),"message",({"class","discussion_idea",}),"item",({"string",}),"arg1",({"string",}),"arg2",}),(["main":({"This method sends a message to all the discussion items in the cluband then marks the club as changed if any of them return a non-zerovalue.  This is used for events like a member being removed of aposition being changed in name.",}),"param":({"club_name the name of the club","message the message number","arg1 the first arguement","arg2 the second arguement",}),]),}),"remove_discussion_item":({({"int",}),({({"string",}),"club_name",({"class","discussion_idea",}),"item",}),(["main":({"This method removes a discussion item from the club.",}),"param":({"club_name the name of the club to remove the discussion item","item the discusion item to remove",}),"return":({"1 on success, 0 on failure",}),]),}),"archive_discussion_item":({({"int",}),({({"string",}),"club_name",({"string",}),"subject",({"string",}),"item",}),(["main":({"This method is called when a discussion item is finished.  It thenarchives it or whatever else it wishes to do with the item",}),"param":({"club_name the name of the club","item the text string of the finished item",}),]),}),"broadcast_discuss_message":({({"void",}),({({"string",}),"club_name",({"int",}),"message",({"string",}),"arg1",({"string",}),"arg2",}),(["main":({"This method sends a message to all the discussion items in the cluband then marks the club as changed if any of them return a non-zerovalue.  This is used for events like a member being removed of aposition being changed in name.",}),"param":({"club_name the name of the club","message the message number","arg1 the first arguement","arg2 the second arguement",}),]),}),])
inherits (["/handlers/inherit/club_elected":({}),])
main_docs (["main":({"This is the handler for all things clubby, a club being a group ofplayers.  Each club must have a unique name.  It also handles electionsfor various club positions.",}),"started":({"Sun Sep 27 03:35:42 EDT 1998",}),"author":({"Pinkfish",}),])
define_docs (["CLUB_DISCUSS_FUNCTION_OBJECT":([]),"CLUB_DISCUSS_QUORUM_COMMITTEE":([]),"CLUB_DISCUSS_FUNCTION_FUNCTION":([]),"CLUB_DISCUSS_QUORUM_OPEN":([]),])
includes (["/include/time.h":1049465667,"/include/broadcaster.h":962756770,"/include/clubs.h":1050407666,])
class_docs ([])
file_name "/handlers/inherit/club_discuss.c"
last_changed 1031307016
