#/secure/handlers/autodoc/autodoc_file.c
public_functions (["set_group_short":({({"int",}),({({"string",}),"name",({"string",}),"short_desc",}),(["main":({"This sets the short description of a group.",}),"param":({"name the name of the group","short_desc the short of the group",}),"return":({"1 on success, 0 if group doesn't exist",}),]),}),"remove_group":({({"int",}),({({"string",}),"name",}),(["main":({"This function removes a group from the handler and is only usedinternally.  No notification of this is given to players, andno cleanup is done on their part.If you want to force the deletion of a group, use disband_group()instead.",}),"see":({"disband_group()",}),"param":({"name name of the group to be disbanded",}),"return":({"1 on success, 0 if group doesn't exist",}),]),}),"remove_member":({({"int",}),({({"string",}),"name",({"object",}),"person",}),(["main":({"This function allows you to remove a person from a group.",}),"param":({"name the name of the group","person the person you want removed",}),"return":({"1 on success, 0 if group doesn't exist or person isn't a   member",}),]),}),"set_leader":({({"varargs","int",}),({({"string",}),"name",({"object",}),"person",({"object",}),"appointer",}),(["main":({"This function allows you to set a new leader for the group.",}),"param":({"name the name of the group","person the new leader","appointer if this != 0, group is told he set the new leader",}),"return":({"1 on success, 0 if the group doesn't exist",}),]),}),"is_group":({({"int",}),({({"string",}),"group",}),(["main":({"This function checks if such a group exists at the moment.",}),"param":({"group the name of the group",}),"return":({"1 if the group exists, 0 otherwise",}),]),}),"members_of":({({"object","*",}),({({"string",}),"name",}),(["main":({"This function returns all the members of a group.",}),"param":({"name the name of the group",}),"return":({"an object * of the members",}),]),}),"shuffle_new_leader":({({"varargs","object",}),({({"string",}),"group",({"int",}),"way",({"object","*",}),"exclude",}),(["main":({"This function allows you to choose a new leader for the groupin a variety of ways.  It only includes players who areinteractive().",}),"param":({"group the name of the group","way 0 for random (no other ways present atm)","exclude an object array of members to exclude from the start",}),"return":({"an object pointing to the new leader, or 0",}),]),}),"is_invited":({({"int",}),({({"string",}),"name",({"object",}),"person",}),(["main":({"This function allows you to check whether an invitation for aperson is pending in a specific group.",}),"param":({"name the name of the group","person the person to be checked",}),"return":({"1 if such an invitation exists, 0 if not",}),]),}),"short_to_name":({({"string",}),({({"string",}),"short",}),(["main":({"This function concatenates the short of a group to a valid namethat can then be used with create_group().  The function willalso return invalid if a channel with such a name exists in thebroadcaster.",}),"param":({"short the short of the group",}),"return":({"the name of the group, or \"\" if invalid",}),]),}),"remove_invite":({({"int",}),({({"string",}),"name",({"object",}),"person",}),(["main":({"This function allows you to remove an invite of a person froma group.",}),"param":({"name the name of the group","person the person you want to remove",}),"return":({"1 on success, 0 if group doesn't exist or person hasn't been   invited",}),]),}),"is_member":({({"int",}),({({"string",}),"name",({"object",}),"person",}),(["main":({"This function allows you to check whether a person is a memberof a group.",}),"param":({"name the name of the group","person the person you want to check for membership",}),"return":({"1 if he is a member, 0 if he isn't (or the group doesn't exist)",}),]),}),"query_start_time":({({"int",}),({({"string",}),"name",}),(["main":({"This function returns the time when the group was created.",}),"param":({"name the name of the group",}),"return":({"the time when the group was created",}),]),}),"add_member":({({"int",}),({({"string",}),"name",({"object",}),"person",}),(["main":({"This function allows you to add a member to a group.",}),"param":({"name the name of the group","person the person you're adding",}),"return":({"1 on success, 0 if the group doesn't exist or person is   already a member",}),]),}),"invitations_to":({({"object","*",}),({({"string",}),"name",}),(["main":({"This function lists all invitations to a particular group.",}),"param":({"name the name of the group",}),"return":({"objects who have been invited to the group",}),]),}),"query_groups":({({"string","*",}),({}),(["main":({"This returns the names of all groups currently in the database.",}),"return":({"the names of all groups in database",}),]),}),"query_group_short":({({"string",}),({({"string",}),"name",}),(["main":({"This returns the short description of a group.",}),"param":({"name the name of the group",}),"return":({"the short of the group",}),]),}),"broadcast_to_groups":({({"void",}),({({"string","*",}),"name",({"string",}),"message",}),(["main":({"With this function you can broadcaster a message to all orsome of the groups currently active.  It will not includeyour name, so make sure you identify yourself if necessary.If \"name\" is empty or 0, the message will be broadcastedto all groups.",}),"message":({"the message to be broadcasted",}),"param":({"name a string array with names of groups",}),]),}),"add_invite":({({"int",}),({({"string",}),"name",({"object",}),"person",({"int",}),"flag",}),(["main":({"This function allows you to add a person to the invite arrayof a group.  Only invited people are allowed to join a group.If the call succeeds, an internal call_out is started whichruns out after INVITE_TIMEOUT seconds and removes the personfrom the array.",}),"see":({"/include/group_handler.h",}),"param":({"name the name of the group","person the person we're inviting","flag set to 1 if you don't want the auto-removal of the invite",}),"return":({"1 on success, 0 if the group doesn't exist or the person is   already invited",}),]),}),"disband_group":({({"varargs","void",}),({({"string",}),"name",({"mixed",}),"message",}),(["main":({"This function does a clean removal of a group from the handler.If a message is specified, it is broadcasted to the groupbefore all members are removed.",}),"see":({"remove_group()",}),"param":({"name the name of the group to be disbanded","message message to be broadcasted, if any",}),]),}),"notify_group":({({"void",}),({({"string",}),"name",({"object",}),"broadcaster",({"mixed",}),"message",}),(["main":({"This function broadcasts a message to the group's channel usingthe broadcaster handler.  The first argument specifies thegroup's name (not short), which also acts as the channelname.  The second argument is the object doing the broadcasting.The third argument varies.  It can either be a simple string,in which case that string is printed as the message.  It canalso be a two-element string array.  The first element isprinted only to the object specified in the second argument.The second element is printed to everyone else.",}),"param":({"name the name of the group","object person or object doing the broadcasting","message the message to be broadcasted",}),]),}),"leader_of":({({"object",}),({({"string",}),"name",}),(["main":({"This function returns the person who is currentlyleading the group, if any.",}),"param":({"name the name of the group",}),"return":({"the object pointing to the leader, 0 if none",}),]),}),"create_group":({({"int",}),({({"string",}),"name",}),(["main":({"This function allows you to create a new group.  Note that thename of the group shouldn't be just any name.  It should firstbe filtered through short_to_name().  The short, set withset_group_short() can be set to anything.  The \"name\" of agroup is mostly used internally to query and set stuff inthe handler.  The short is visible to players.",}),"see":({"short_to_name()","set_group_short()",}),"param":({"name the name of the new group","founder points to the thing creating the group",}),"return":({"1 on success, 0 if the group already exists",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This is the group handler.  It does all the handling ofplayer-run adventuring groups, but not alone.  It'saccompanied by the group commands, effect and shadow.For paths to these files, consult /include/group_handler.hThis system owes its design first and foremost to the irreplaceableCeres who wrote the original system.  Next come all the valuableCreators who shared their knowledge of LPC.  Last but not leastare the countless playtesters who dedicated their time and workedout all (or most of) the kinks and provided feedback and suggestions.So give 'em all a big hug.",}),"started":({"February 99",}),"author":({"Tape",}),])
define_docs ([])
includes (["/include/command.h":1010295178,"/include/player_handler.h":962428284,"/include/broadcaster.h":962756770,"/include/group_handler.h":962428284,"/secure/include/login_handler.h":962429079,])
class_docs (["group":({0,({({"start_time",({"int",}),}),({"short",({"string",}),}),({"leader_name",({"string",}),}),({"leader",({"object",}),}),({"members",({"object","*",}),}),({"invited",({"object","*",}),}),}),([]),}),])
file_name "/handlers/group_handler.c"
last_changed 1080556642
