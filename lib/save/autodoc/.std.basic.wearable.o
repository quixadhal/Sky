#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_wear_effects":({({"string","*",}),({}),(["main":({"This method returns the list of effects to be added to the wearer whenit is worn.  These effects will automaticly be added when worn andremoved when taken off.",}),"see":({"set_wear_effects()","add_wear_effect()",}),"return":({"the list of effects to be added to the wearer when worn",}),]),}),"add_immune_to":({({"void",}),({({"mixed",}),"args",}),(["main":({"This adds a new type of damage that the object is immune to.The parameter can either be a string or an array of stringsbeing the types of damage to be immune to.",}),"see":({"remove_immune_to()","query_immune_to()",}),"param":({"args the type of damage to be immune to",}),"example":({"inherit \"/std/basic/wearable\";void setup() {   ...   add_immune_to(\"sharp\");   ...} /* setup() */","inherit \"/std/basic/wearable\";void setup() {   ...   add_immune_to(\"sharp\");   ...} /* setup() */",}),]),}),"set_wear_effects":({({"void",}),({({"string","*",}),"effects",}),(["main":({"This method sets the list of effects to be added to the wearer when itis worn.  These effects will automaticly be added when worn andremoved when taken off.",}),"see":({"query_wear_effects()","add_wear_effect()",}),"param":({"effects the array of effects to be added to the wearer when worn",}),]),}),"add_wear_effect":({({"void",}),({({"string",}),"effect",}),(["main":({"This method adds a new wear effect to the current wear effect array.These effects will automaticly be added when worn and removed whentaken off.They will only be removed if the effect has theperson_removing_item() function in it.",}),"see":({"query_wear_effects()","set_wear_effects()","person_removing_item()",}),"param":({"effect the effect to add",}),]),}),"query_wearable":({({"int",}),({}),(["main":({"This method tells us if the object is wearable.In the case of a wearable object it will always return 1.",}),"return":({"always returns 1",}),]),}),"query_wear_remove_func":({({"mixed","*",}),({}),(["main":({"This method returns the current function associated withwearing and removing the item.",}),"see":({"set_wear_remove_func()",}),"return":({"the current function for wearing and removing the clothing",}),]),}),"set_worn_by":({({"int",}),({({"object",}),"thing",}),(["main":({"This method sets the object as being worn by the passed in object.It calls all the various worn functions and sets up or removesall the effects associated with the object.<p>If the object is alreadying being worn the wear_remove_function willbe called with an argument of 0.  The method taken_off will becalled on the object wearing the object for all the effects associatedwith this object.<p>If the object is being set to be worn by someone the the wear_removefunction will be called with an argument being the person who is towear the object.   All of the effects associated with theobject will be added to the wearer.<p>This calls the method 'person_removing_item' on the effect when someone removes the item.  This can be used to make sure the effects aretaken off when the item is removed.",}),"see":({"set_wear_remove_func()","add_wear_effect()",}),"param":({"thing the new person to wear the object (0 for worn by no one)",}),"return":({"1 if successful, 0 on failure",}),]),}),"remove_immune_to":({({"void",}),({({"mixed",}),"args",}),(["main":({"This method removes a type of damage that the weapon is immuneto.",}),"see":({"add_immune_to()","query_immune_to()",}),"param":({"args the type(s) of damage to remove immunity too",}),]),}),"query_immune_to":({({"string","*",}),({}),(["main":({"This returns the list of types of damage that the object is immune to.",}),"see":({"/std/basic/condition.c","add_immune_to()","remove_immune_to()",}),"return":({"the list of damage we are immune to",}),]),}),"set_wear_remove_func":({({"void",}),({({"mixed",}),"file",({"string",}),"func",}),(["main":({"This method sets the current function associated with wearing andremoving the item.  The value of this function should be choosencarefully, using an object reference for the name will work butit will not then be able to restored from the save file.  The samegoes for using function pointers.  It is better to use a realfile name and a string function name.<p>The function will be called with two arguments:If the second argument is 0, then the item is being worn,and the first argument will be the person about to wear the item.If the second argument is 1, then the item is being removed,and the first argument will be the person about to remove the item.<p>NOTE: Do NOT use this_player() in this function, because it is notcorrect sometimes.",}),"see":({"query_wear_remove_func()",}),"param":({"file the file to call the function on","func the function to call",}),"example":({"inherit \"/std/basic/wearable\";void setup() {   ...   set_wear_remove_func( base_name(TO), \"do_fluff\");   ...} /* setup() */void do_fluff( object ob, int removed ) {    if( removed ) {        tell_object( ob, the_short()+\" is being removed.\\n\");    } else {        tell_object( ob, the_short()+\" is being worn.\\n\");    }} /* do_fluff() */",}),]),}),"query_type":({({"mixed",}),({}),(["main":({"This method returns the current type(s) associated with the object.If this method returns a string then there is only one type for thisobject.  If it returns a string then there is more than onetype associated with an object.  An example of something with morethan one type is a skirt, which is a dress and a shirt at thesame time.",}),"see":({"set_type()",}),"return":({"the current type of the item",}),]),}),"set_type":({({"void",}),({({"mixed",}),"word",}),(["main":({"This method sets the type(s) which are associated with theitem.  If the parameter is a string then a single type is associatedwith the item, if the parameter is an array then a list of typesis associated with the object.  If any of these types are notlegal and error message will be produced.",}),"see":({"query_type()",}),"param":({"word the new type(s) to set for the object",}),]),}),"query_worn_by":({({"object",}),({}),(["main":({"This method returns the person who is currently wearing the object.",}),"see":({"set_worn_by()",}),"return":({"the current wearer of the object",}),]),}),])
protected_functions ([])
inherits (["/std/basic/condition":({}),])
main_docs (["main":({"This file contains all the methods needed to make an object wearableby a player or an npc.",}),"author":({"Pinkfish",}),"see":({"/obj/armour.c","/obj/clothing.c",}),])
define_docs ([])
includes (["/include/clothing.h":962428284,])
class_docs ([])
file_name "/std/basic/wearable.c"
last_changed 1059688415
