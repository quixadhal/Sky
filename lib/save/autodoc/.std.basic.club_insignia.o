#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_brief_string":({({"string",}),({}),(["main":({"This method returns the short name for the channel string.",}),"return":({"the short name for the channel",}),]),}),"query_club":({({"string",}),({}),(["main":({"This method returns the club associated with the badge.",}),"see":({"set_club()",}),"return":({"the club associated with the badge",}),]),}),"event_club_join":({({"void",}),({({"object",}),"person",({"string",}),"club_name",}),(["main":({"This is the event generated when the person joins the club.",}),"param":({"person the person doing the joining","club_name the name of the club being joined",}),]),}),"event_channel_message":({({"void",}),({({"object",}),"ob",({"string",}),"channel",({"mixed","*",}),"data",}),(["main":({"The method is called when the channel is triggered.",}),"see":({"club_chat()","do_history()",}),"param":({"ob the person who talked","channel the name of the channel","message the pmessage top print",}),]),}),"query_brief_mode":({({"int",}),({}),(["main":({"This method tells us if the badge is in brief mode or not.",}),"return":({"the current brief mode",}),]),}),"set_club":({({"void",}),({({"string",}),"club",}),(["main":({"This method sets the club associated with the badge.",}),"see":({"query_club()",}),"param":({"club the name of the club",}),]),}),"event_club_changed":({({"void",}),({({"object",}),"person",({"string",}),"club_name",}),(["main":({"This method is called when the club type is changed.  It will add onthe elected club commands, if that is what we have changed too.",}),]),}),"query_channel_off":({({"int",}),({}),(["main":({"This method returns the status of the channel off flag.",}),"see":({"club_chat()","event_channel_message()",}),"return":({"the current value of the channel off flag",}),]),}),])
protected_functions (["add_elected_commands":({({"void",}),({({"object",}),"per",}),(["main":({"This method will add the club commands from the player.",}),]),}),"club_chat":({({"int",}),({({"string",}),"str",({"int",}),"emote",}),(["main":({"The says something wonderful and exciting to all the other club members.",}),"param":({"str the exciting comment I know they will say",}),]),}),"do_recruit":({({"int",}),({({"object","*",}),"obs",({"string",}),"club",}),(["main":({"This is the method to use when recruiting people.",}),"see":({"/handlers/club_handler.c",}),"param":({"obs the people to recruit",}),"return":({"1 on success, 0 on failure",}),]),}),"do_history":({({"int",}),({}),(["main":({"This method prints out the history of the channel.",}),"see":({"club_chat()","event_channel_message()",}),]),}),"do_brief_string":({({"int",}),({({"string",}),"str",}),(["main":({"This method sets the brief message to use for the channel messages.",}),"param":({"str the channel message short",}),"return":({"1 on success, 0 on failure",}),]),}),"do_disbar":({({"int",}),({({"string",}),"name",}),(["main":({"This method allows the founders and presidents/vice presidents to disbarpeople from the club.",}),"param":({"name the name of the person to disbar",}),]),}),"do_resign_position":({({"int",}),({({"string",}),"position",}),(["main":({"This method resigns as a position in the club.",}),"see":({"confirm_resign()",}),"return":({"1 on succes, 0 on failure",}),]),}),"add_club_commands":({({"void",}),({({"object",}),"per",}),(["main":({"This method will add the club commands from the player.",}),]),}),"confirm_disbar":({({"void",}),({({"string",}),"str",({"string",}),"name",}),(["main":({"THis method confirms the disbar request from the player.",}),"see":({"do_disbar()",}),"param":({"str the response string","name the name of the person to disbar",}),]),}),"do_resign":({({"int",}),({}),(["main":({"This method starts the resignation process.",}),"see":({"confirm_resign()",}),"return":({"1 on succes, 0 on failure",}),]),}),"do_brief_mode":({({"int",}),({({"int",}),"mode",}),(["main":({"This method sets the brief mode of the badge.",}),"param":({"mode the brief mode]",}),"return":({"1 on success, 0 on failure",}),]),}),"do_announcement":({({"int",}),({}),(["main":({"This method will print out any announcements associated with the club.",}),"return":({"1 on success",}),]),}),"confirm_resign":({({"void",}),({({"string",}),"str",({"string",}),"position",}),(["main":({"This method checks to make sure they really wish to resign.",}),"see":({"do_resign()",}),"param":({"str the response",}),]),}),"do_channel_off":({({"int",}),({({"int",}),"flag",}),(["main":({"This method handles setting the flag and printing all the happy successmessages.",}),"param":({"flag the new flag",}),]),}),])
inherits (["/std/basic/club_listing":({}),"/std/basic/club_discuss":({}),])
main_docs (["main":({"The club insignia inheritable thingy.",}),"started":({"Sun Oct  4 04:23:52 EDT 1998",}),"author":({"Pinkfish",}),])
define_docs (["SAVE_START":([]),"ELECTION_STATE":([]),"NOMINATION_STATE":([]),])
includes (["/include/time.h":1049465667,"/include/broadcaster.h":962756770,"/include/clubs.h":1050407666,])
class_docs ([])
file_name "/std/basic/club_insignia.c"
last_changed 1200761934
