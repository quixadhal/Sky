#/secure/handlers/autodoc/autodoc_file.c
public_functions (["load_auto_load_to_array":({({"object","*",}),({({"mixed","*",}),"auto_string",({"object",}),"tell_pl",}),(["main":({"This method creates all the objects and sets them up now.  This willnot move any of the objects anywhere...  Relying on the callingcode to handle this.",}),"see":({"create_auto_load()","load_auto_load()",}),"param":({"auto_string the values specifing the objects to auto load","dest the destination to put the objects in","tell who to tell about errors","finished the function to call when the auto loading has completed",}),]),}),"load_auto_load_alt":({({"void",}),({({"mixed","*",}),"auto_string",({"object",}),"dest",({"object",}),"tell_pl",({"function",}),"finished",}),(["main":({"The new method of handling auto loading of objects.  This determinesif the object failed to load and gives the player a recipt if it doesnot.<p>The finished variable should <b>only</b> be set in outerlevel calls to this.  If you set it inside containers when they callthis it will cause errors.  This will only be called from withinthe player object itself.",}),"see":({"create_auto_load()","load_auto_load()",}),"param":({"auto_string the values specifing the objects to auto load","dest the destination to put the objects in","tell who to tell about errors","finished the function to call when the auto loading has completed",}),]),}),"load_auto_load_to_inventory":({({"void",}),({({"mixed","*",}),"auto_string",({"object",}),"dest",({"object",}),"tell_pl",({"function",}),"move_f",}),(["main":({"This method loads all the objects from the array and places theminto the inventory of the specified object.",}),"see":({"create_auto_load()","load_auto_load()",}),"param":({"auto_string the values specifing the objects to auto load","dest the destination to put the objects in","tell who to tell about errors","finished the function to call when the auto loading has completed",}),]),}),"query_auto_loading":({({"int",}),({}),(["main":({"This method tells us if the player is in the inventory regenerationphase still.",}),"return":({"1 if the inventory is being regenerated, 0 otherwise.",}),]),}),"create_auto_load":({({"string","*",}),({({"object","*",}),"obs",({"int",}),"into_array",}),(["main":({"Creates the complete auto load array from the array of objectspassed into this object.  It returns an array of elementsas specified in auto_str_ob.  The arrays from auto_str_ob() areadded together, so every 3 elemnts in the array is a newautoload object.",}),"see":({"auto_str_ob()",}),"param":({"obs the objects to create an autoload string for","into_array place the results directly iunto the auto_load array",}),"return":({"the auto load array",}),]),}),])
protected_functions (["query_auto_load_string":({({"mixed",}),({}),(["main":({"This method retrusn the auto load string which is used toregenerate the players inventory.",}),"see":({"set_auto_load_string()",}),"return":({"the array of the auto load string",}),]),}),"set_auto_load_string":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method sets the current auto load string to the specified value.",}),"see":({"query_auto_load_string()",}),]),}),])
inherits ([])
main_docs (["main":({"Handles the automatic loading and saving of objects into theplayers inventories on log in/out.",}),"author":({"Ember",}),])
define_docs (["CLONER":([]),"AUTO_STR_LENGTH":([]),"AUTO_LOAD_DYNAMIC_ARG":([]),"AUTO_LOAD_DATA":([]),"AUTO_LOAD_TYPE":([]),"AUTO_LOAD_STATIC_ARG":([]),"RECEIPT":([]),"AUTO_LOAD_NAME":([]),])
includes (["/include/move_failures.h":962428284,])
class_docs ([])
file_name "/global/player/auto_load.c"
last_changed 1057829873
