#/secure/handlers/autodoc/autodoc_file.c
public_functions (["save_it":({({"void",}),({}),(["main":({"Saves the current state information to the save file.",}),"see":({"save_it()",}),]),}),"query_book_exists":({({"int",}),({({"int",}),"book_num",}),(["main":({"This tests to see if the given book number exists.",}),"param":({"book_num the number to test.",}),"return":({"1 if it exists, 0 if it does not.",}),]),}),"query_book_owner":({({"string",}),({({"int",}),"book_num",}),(["main":({"This method returns the owner associated with the book of a givennumber.",}),"see":({"query_book_pages()",}),"param":({"book_num the book number to get the pages for",}),"return":({"the owner of the book",}),]),}),"add_book":({({"int",}),({({"object",}),"book",({"int",}),"num",({"string",}),"pl_name",}),(["main":({"Adds a newly minted book into our nice list of stuff.  This returns thebook number for this book.  You can use this to add a book if you alreadyknow its book number, if it does not match to the saved book number thenit will return a new number.  If it does match it will return thesame number.",}),"see":({"check_book_same()",}),"param":({"book the book to add","num the possible book number it already has",}),]),}),"query_banished_book":({({"string",}),({({"int",}),"book_num",}),(["main":({"This method returns the banish string for the book.",}),"see":({"add_banished_book()","query_all_banished_books()",}),"param":({"book_num the book number to check",}),"return":({"the banish reason, or 0 if none",}),]),}),"compare_page":({({"int",}),({({"string",}),"page1",({"string",}),"page2",}),(["main":({"Compares the open pages of two books to see if the text is thesame.  It ignores language and style of writing.  This would alsowork on two pieces of paper.",}),"see":({"check_book_same()","add_book()",}),"param":({"page1 the first book","page2 the second book",}),]),}),"compare_pages":({({"int",}),({({"string","*",}),"pages1",({"string","*",}),"pages2",}),(["main":({"This method will try and figure out the percentage changed between thetwo page arrays.",}),"param":({"pages1 the first page array","pages2 the second page array",}),"return":({"the percentage the same",}),]),}),"query_pages":({({"string","*",}),({({"object",}),"book",}),(["main":({"This method returns the array of useful pages in a book.  It removestorn out pages and pages which are added by specific things in thegame, like the print shop adding a fly leaf.  It just returns the textfor the pages, since this is what we are interested in.",}),"param":({"book the book to get the pages from",}),"return":({"the array of pages",}),]),}),"check_book_same":({({"int",}),({({"object",}),"book",({"int",}),"num",}),(["main":({"Checks to see if the passed in book is the same as the current booknumber that is set on it.  We only look at the text and ignore thetype and language with which it is written.",}),"see":({"compare_pages()","add_book()",}),"param":({"book the book to check","num the book number to check against",}),]),}),"load_it":({({"void",}),({}),(["main":({"Loads the state information from the save file.",}),"see":({"load_it()",}),]),}),"query_all_banished_books":({({"mapping",}),({}),(["main":({"This method returns all the banished books.  The keys are thenumbers which are banished and the values are the reason forthe banishment.",}),"see":({"add_banished_book()","query_banished_book()",}),"return":({"the banished books mapping",}),]),}),"query_book_pages":({({"string","*",}),({({"int",}),"book_num",}),(["main":({"This method returns the pages associated with the book of a givennumber.",}),"see":({"query_book_owner()",}),"param":({"book_num the book number to get the pages for",}),"return":({"the pages for the book",}),]),}),"add_banished_book":({({"int",}),({({"int",}),"book_num",({"string",}),"reason",}),(["main":({"This method banishes a book number for a certain reason.",}),"see":({"query_banished_book()","query_all_banished_books()",}),"param":({"book_num the book number to banish","reason the reason it was banished",}),"return":({"1 on success and 0 on failure.",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This handler object deals with all the books that have been published.It keeps a save file of every book and a current book number.It will allow for easy finding again of preprinted books and for theeasy removal of any books that happen to contain things like questsolutions and stuff.",}),"started":({"Sun Feb  1 20:24:33 CST 1998",}),"author":({"Pinkfish",}),"see":({"/std/book.c","/std/print_shop.c",}),])
define_docs (["PAGES_INDEX":([]),"SAVE_FILE":([]),"OWNER_INDEX":([]),"B_SAVE_DIR":([]),])
includes (["/include/language.h":980398293,"/include/book_handler.h":962428284,])
class_docs ([])
file_name "/handlers/book_handler.c"
last_changed 1000618977
