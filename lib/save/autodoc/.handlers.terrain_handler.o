#/secure/handlers/autodoc/autodoc_file.c
public_functions (["member_cloned_locations":({({"string",}),({({"int","*",}),"co_ords",}),(["main":({"This method checks wether there is a cloned location which matches thegiven coordinates.",}),"see":({"member_fixed_locations()","member_floating_locations()",}),"param":({"co_ords the coordinates to find the room for",}),"return":({"the file name of the room with the given coordinates, or 0 ifit is not found",}),]),}),"query_connection":({({"string",}),({({"string",}),"terrain",({"int","*",}),"co_ords",({"string",}),"direc",}),(["main":({"This method returns the connecting room for the given coordinates anddirection.",}),"see":({"query_connected()",}),"param":({"terrain the terrain name","co_ords the coordinates","direc the direction to find the room for",}),"return":({"the file name of the connecting room or 0 if none was found",}),]),}),"top_floating_location":({({"string",}),({({"int","*",}),"co_ords",}),(["main":({"This method searches the top level floating location for the givencoordinates.",}),"see":({"member_floating_locations()",}),"param":({"co_ords the coordinates to find the top level for",}),"return":({"the file name of the top level room with the given coordinates,or 0 if none was found",}),]),}),"query_co_ord":({({"int","*",}),({({"string",}),"terrain",({"string",}),"file",}),(["main":({"This method returns the coordinates for a given terrain and fixed locationfilename.",}),"param":({"terrain the terrain name","file the file name of the location",}),"return":({"the coordinates",}),]),}),"delete_floating_location":({({"int",}),({({"string",}),"terrain",({"string",}),"file",({"int","*",}),"co_ords",}),(["main":({"This method deletes a floating location for a terrain.",}),"see":({"delete_cloned_location()","delete_fixed_location()",}),"param":({"terrain the terrain name","file the file name","co_ords the coordinates for the location (either a single coordinateor 2 forming a bounding rectangle)",}),"return":({"1 if it succeeds, 0 if it fails (location not present)",}),]),}),"delete_fixed_location":({({"int",}),({({"string",}),"terrain",({"string",}),"file",}),(["main":({"This method deletes a fixed location for a terrain.",}),"see":({"delete_cloned_location()","delete_floating_location()",}),"param":({"terrain the terrain name","file the file name",}),"return":({"1 if it succeeds, 0 if it fails (location not present)",}),]),}),"setup_location":({({"void",}),({({"object",}),"place",({"string",}),"terrain",}),(["main":({"This method is called when a normal room is loaded which is part ofa terrain. The terrain handler needs to know about this to be ableto calculate the exits into the floating portion of the terrain.It also sets the coordinates of the room to the values as saved in theterrain.",}),"see":({"find_location()",}),"param":({"place the room object which is a fixed location in the terrain","terrain the terrain name",}),]),}),"modify_fixed_location":({({"int",}),({({"string",}),"terrain",({"string",}),"file",({"int","*",}),"co_ords",}),(["main":({"This method modifies an existing fixed location for a terrain.",}),"see":({"add_fixed_location()",}),"param":({"terrain the terrain name","file the file name","co_ords the coordinates for the location",}),"return":({"1 if it succeeds, 0 if it fails (wrong coordinates or locationnot found)",}),]),}),"member_fixed_locations":({({"string",}),({({"int","*",}),"co_ords",}),(["main":({"This method checks wether there is a fixed location which matches thegiven coordinates.",}),"see":({"member_cloned_locations()","member_floating_locations()",}),"param":({"co_ords the coordinates to find the room for",}),"return":({"the file name of the room with the given coordinates, or 0 ifit is not found",}),]),}),"get_data_file":({({"int",}),({({"string",}),"word",}),(["main":({"This method loads the data file for a given terrain.",}),"param":({"word the terrain to load the data for",}),"return":({"1 if the terrain exists, 0 if it didn't",}),]),}),"member_floating_locations":({({"mixed","*",}),({({"int","*",}),"co_ords",}),(["main":({"This method checks wether there are floating locations which match thegiven coordinates.",}),"see":({"member_cloned_locations()","member_fixed_locations()",}),"param":({"co_ords the coordinates to find the rooms for",}),"return":({"an array with the file names of the rooms and the levels, orthe empty array if none are found",}),]),}),"find_location":({({"object",}),({({"string",}),"terrain",({"int","*",}),"co_ords",}),(["main":({"This method is the main entry point for the terrain handler. It loadsthe room that is associated with the given terrain and coordinates.",}),"see":({"setup_location()",}),"param":({"terrain the terrain name","co_ords the coordinates to look up",}),"return":({"the room that was found or loaded",}),]),}),"query_cloned_locations":({({"mapping",}),({({"string",}),"terrain",}),(["main":({"This method returns the cloned_locations mapping for a given terrain.",}),"see":({"query_fixed_locations()","query_floating_locations()",}),"param":({"word the terrain name",}),"return":({"the cloned_locations mapping; keys are the file names, values arethe coordinates for the files. There are also keys on x coordinates tofacilitate faster coordinate lookups.",}),]),}),"add_floating_location":({({"int",}),({({"string",}),"terrain",({"string",}),"file",({"int","*",}),"co_ords",({"int",}),"level",}),(["main":({"This method adds a new floating location for a terrain.",}),"see":({"add_fixed_location()",}),"param":({"terrain the terrain name","file the file name","co_ords the coordinates for the location (either a single coordinateor 2 forming a bounding rectangle)","level the level of this location",}),"return":({"1 if it succeeds, 0 if it fails (wrong coordinates or locationalready present)",}),]),}),"query_floating_locations":({({"mixed","*",}),({({"string",}),"word",}),(["main":({"This method returns the floating_locations array for the given terrain.",}),"see":({"query_cloned_locations()","query_fixed_locations()",}),"param":({"word the terrain name",}),"return":({"the floating_locations array; this is an array of arrays where eacharray consists of the file name, an array of 6 coordinates forming abounding box or normal coordinates for the location and the level of thefloating location",}),]),}),"delete_cloned_location":({({"int",}),({({"string",}),"terrain",({"string",}),"file",}),(["main":({"This method deletes a cloned location for a terrain from the cache.It is meant to be called when a cloned location is destructed.",}),"see":({"delete_fixed_location()","delete_floating_location()",}),"param":({"terrain the terrain name","file the file name",}),"return":({"1 if it succeeds, 0 if it fails (location not present)",}),]),}),"query_fixed_locations":({({"mapping",}),({({"string",}),"word",}),(["main":({"This method returns the fixed_locations mapping for the given terrain.",}),"see":({"query_cloned_locations()","query_floating_locations()",}),"param":({"word the terrain name",}),"return":({"the fixed_locations mapping; keys are the file names, values arethe coordinates for the files",}),]),}),"clear_connections":({({"void",}),({({"string",}),"terrain",}),(["main":({"This method clears all connections for a given terrain. This needs tobe done when a terrain was modified.",}),"see":({"clear_cloned_locations()",}),"param":({"terrain the terrain name",}),]),}),"add_fixed_location":({({"int",}),({({"string",}),"terrain",({"string",}),"file",({"int","*",}),"co_ords",}),(["main":({"This method adds a new fixed location for a terrain.",}),"see":({"add_floating_location()","modify_fixed_location()",}),"param":({"terrain the terrain name","file the file name","co_ords the coordinates for the location",}),"return":({"1 if it succeeds, 0 if it fails (wrong coordinates or locationalready present)",}),]),}),"query_connected":({({"int",}),({({"string",}),"terrain",({"int","*",}),"co_ords",}),(["main":({"This method returns wether the given coordinates is connected to anotherroom in the terrain handler system.",}),"see":({"query_connection()",}),"param":({"terrain the terrain name","co_ords the coordinates",}),"return":({"1 if it is found, 0 otherwise",}),]),}),"get_room_size":({({"int",}),({({"string",}),"file",({"int",}),"level",}),(["main":({"This method returns the room size for a given room. It uses a cacheto speed things up.",}),"param":({"file the file name of the room","level the recursion level",}),"return":({"the size of the room",}),]),}),"clear_cloned_locations":({({"void",}),({({"string",}),"terrain",}),(["main":({"This method clears the cloned locations cache for a given terrain.",}),"see":({"clear_connections()",}),"param":({"terrain the terrain name",}),]),}),])
protected_functions ([])
inherits (["/std/object":({}),])
main_docs (["main":({"This is the terrain handler method documentation. For a more generalintroduction to the terrain handler, please see the help for terrains.",}),"author":({"Sin","Turrican","others...",}),"change":({"9 Nov 1997, Sin   added support for inherit statements to   get_room_size(), this fixes a bug in the terrain handler in   regards to the placement of set_room_size() functions.  Added   a limit of 4 inherits, so infinite loops aren't a problem.","25 Nov 1997, Sin   changed the calculate_exits() call so that it   starts at the border of the current room instead of starting   at the center of the current room.  This makes sense because   it already knows the room size for the current room.  :)","29 Nov 1997, Sin   changed query_room_size() to cache results   temporarily and to check the map handler before trying to   parse on its own.",}),"see":({"help::terrains",}),])
define_docs (["BACKUP_TIME_OUT":([]),])
includes (["/include/terrain.h":962428284,"/include/dirs.h":997617456,])
class_docs ([])
file_name "/handlers/terrain_handler.c"
last_changed 1025070264
