#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_potion":({({"object",}),({({"string",}),"s",}),(["main":({"This method clones up a potion object.  It does not setup the reagentin the potion.",}),"param":({"s the potion to create",}),"see":({"clone_reagent()",}),"return":({"the potion object",}),]),}),"query_chant":({({"string",}),({({"string",}),"s",}),(["main":({"This method returns the chant of the potion name.  Theexpand_nickname function will be done on the input name beforelooking it up.",}),"see":({"query_min_level()",}),"param":({"s the name to lookup",}),"return":({"the chant",}),]),}),"clone_reagent":({({"mixed",}),({({"string",}),"s",}),(["main":({"This method creates a reagent object.  It creates the potion object andthen creates the reagent on it.",}),"param":({"potion the potion to create",}),"return":({"the regent object",}),]),}),"query_potions":({({"mapping",}),({}),(["main":({"This method returns the potion mapping.  This the list of knownpotions.",}),"return":({"the potion mapping",}),]),}),"query_paths":({({"mapping",}),({}),(["main":({"This method returns the paths that are searched for potionobjects.",}),"return":({"the mapping of paths",}),]),}),"query_min_level":({({"int",}),({({"string",}),"s",}),(["main":({"This method returns the minimum level of the potion name.  Theexpand_nickname function will be done on the input name beforelooking it up.",}),"see":({"query_chant()",}),"param":({"s the name to lookup",}),"return":({"the minimum level",}),]),}),])
protected_functions ([])
inherits (["/std/object":({}),])
main_docs (["main":({" This class is the potion information handler.<p> This will handle all the information related to potions: the skill required, the failure result, etc. (more to be added as necessary). Each potion will be an object in itself (generally a virtual object). There will be an index file which gives the pathname of the object for each potion \"title\".  This will be loaded into a mapping on creation of the handler.  The actual potion objects will be created as they are referenced (assuming they're in the index) and stored as the value of another mapping.",}),"started":({"??/??/95",}),"author":({"Jeremy",}),])
define_docs (["POTION_DIR":([]),])
includes ([])
class_docs ([])
file_name "/handlers/potion.c"
last_changed 1000618471
