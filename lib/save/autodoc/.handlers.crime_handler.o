#/secure/handlers/autodoc/autodoc_file.c
public_functions (["valid_crime":({({"int",}),({({"int",}),"type",}),(["main":({"This method if the crime type is valid.",}),"param":({"type the crime type to check",}),"return":({"1 if the crime type is valid, 0 if not",}),]),}),"query_crime_string":({({"string",}),({({"string",}),"place_name",({"mixed",}),"player",}),(["main":({"This method returns the types of crimes the person has committedin a nice string format",}),"param":({"place_name the name of the place to get the crime stringfor the player in","player the name or object of the player to check",}),"return":({"the types of crimes the player has committed",}),]),}),"check_arrays":({({"void",}),({}),(["main":({"This method checks to make sure all the criminals still exist.It also removes the invalid criminals.",}),]),}),"query_sorted_criminals":({({"string","*",}),({({"string",}),"place_name",}),(["main":({"This method returns the sorted array of criminals in aspecified area",}),"param":({"place_name the name of the place to get the names for",}),"return":({"the sorted array of criminals",}),]),}),"query_sentence_length":({({"int",}),({({"string",}),"place_name",({"mixed",}),"player",}),(["main":({"This method returns the players sentence length based ontheir criminal ledger in the specified area",}),"param":({"place_name the name of the place to get their sentencelength in","player the name or object of the player to get thesentence length for",}),"return":({"the player's sentence length",}),]),}),"add_criminal":({({"int",}),({({"string",}),"place_name",({"mixed",}),"player",({"int",}),"type",}),(["main":({"This method adds a player into the criminals array",}),"see":({"\"/include/crime.h\"",}),"param":({"place_name the name of the place to add the criminal in","player the name or object of the player to add","type the type of offense.  They have been defined as follows -       VANDALISM  1 - vandalism       THEFT      2 - stealing       SHOPLIFT   3 - shoplifting       SLAUGHTER  4 - killing innocents       RESIST     5 - resisting arrest       GUARDKILL  6 - guard killing",}),"return":({"1 if successfully added, 0 if not",}),]),}),"query_crimes":({({"mapping",}),({({"string",}),"place_name",({"mixed",}),"player",}),(["main":({"This method returns the types of crimes the person has committed",}),"param":({"place_name the name of the place to get the crimes forthe player in","player the name or object of the player to check",}),"return":({"the types of crimes the player has committed",}),]),}),"stats":({({"mixed","*",}),({}),([]),}),"remove_sentences":({({"int",}),({({"string",}),"place_name",({"mixed",}),"player",}),(["main":({"This method nullifies a players' sentence count",}),"param":({"place_name the name of the place to clear the player's count in","player the name or object of the player to remove",}),"return":({"1 if successfully removed, 0 if not",}),]),}),"add_sentence":({({"int",}),({({"string",}),"place_name",({"mixed",}),"player",}),(["main":({"This method raises a player's sentence count in the specified area",}),"param":({"place_name the name of the place to raise the count in","player the name or object of the player to raise the count for",}),"return":({"1 if successfully added, 0 if not",}),]),}),"query_killer":({({"int",}),({({"string",}),"place_name",({"mixed",}),"player",}),(["main":({"This method checks if the player is a guard killer",}),"param":({"place_name the name of the place to check if theplayer is a killer in","player the name or object of the player to check",}),"return":({"1 if they're a guard killer, 0 if not",}),]),}),"valid_place":({({"int",}),({({"string",}),"place_name",}),(["main":({"This method checks if the place is a valid place.",}),"param":({"place_name the place to check",}),"return":({"1 if the place is valid, 0 if not",}),]),}),"query_criminals":({({"string","*",}),({({"string",}),"place_name",}),(["main":({"This method returns all the criminals in the specified place.",}),"param":({"place_name the name of the place to get thecriminals' names for",}),"return":({"all current criminals' names",}),]),}),"query_sentence_count":({({"int",}),({({"string",}),"place_name",({"mixed",}),"player",}),(["main":({"This method returns the sentence count of the player in thespecified area",}),"param":({"place_name the name of the place to get the count for","player the name or object of the player to check",}),"return":({"the types of crimes the player has committed",}),]),}),"refresh_criminal":({({"void",}),({({"string",}),"player",}),(["main":({"This method deletes the given player by name from allplaces' criminal arrays.  This should be called by therefresh handler when the player refreshes or is deleted.",}),"param":({"player the player to delete",}),"return":({"1 if the operation was successful, 0 if it failed",}),]),}),"remove_criminal":({({"int",}),({({"string",}),"place_name",({"mixed",}),"player",}),(["main":({"This method removes a player from the criminals array",}),"param":({"place_name the name of the place to clear the player's crime ledger","player the name or object of the player to remove",}),"return":({"1 if successfully removed, 0 if not",}),]),}),"query_criminal":({({"int",}),({({"string",}),"place_name",({"mixed",}),"player",}),(["main":({"This method checks if the player is a criminal",}),"param":({"place_name the name of the place to check","player the name or object of the player to check",}),"return":({"1 if they're a criminal, 0 if not",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This is the crime handler.Keeps track of criminals.By Sandoz, 28th July 2001.",}),])
define_docs (["CHECK_TIME":([]),"CRIME_SAVE_DIR":([]),])
includes (["/include/crime.h":1117725834,])
class_docs ([])
file_name "/handlers/crime_handler.c"
last_changed 1022638291
