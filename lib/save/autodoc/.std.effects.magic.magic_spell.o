#/secure/handlers/autodoc/autodoc_file.c
public_functions (["query_cast_spell":({({"int",}),({({"object",}),"caster",({"string",}),"arg",({"object","*",}),"_targets",({"object","*",}),"_using",}),(["main":({"Checks to see if the spell can be cast, and if so, casts it.Should never be called directly.",}),]),}),"check_targets":({({"object","*",}),({({"object",}),"caster",({"object","*",}),"targets",}),(["main":({"Checks to see if all targets are valid. Called once perspell stage, before the spell stage takes place. Shouldbe overloaded for any targeted spells.",}),"arg":({"caster The person casting the spell","targets Object array of all current targets",}),"return":({"Object array of all new targets",}),]),}),"check_args":({({"mixed","*",}),({({"object",}),"caster",({"mixed","*",}),"args",}),(["main":({"Checks to see if valid arguments for the spell havebeen entered. Should be overloaded by inheritingobjects to perform proper checking.",}),"arg":({"caster The person casting the spell","args Array of arguments for the spell, accessed through the defines in magic.h",}),"return":({"The new array of arguments, or 0 for failure due to incorrect args",}),]),}),"scale_time":({({"float",}),({({"object",}),"caster",({"mixed","*",}),"args",}),(["main":({"Scaling function. Overload to scale the time it takes to casta spell if you so desire.",}),"arg":({"caster The person casting the spell","args The args for the spell, see magic.h",}),"return":({"Float percentage of normal speed, for default see code.",}),]),}),"query_name":({({"string",}),({}),(["main":({"",}),"return":({"The name of the spell",}),]),}),"adjust_components":({({"mixed","*",}),({({"object",}),"caster",({"int",}),"stage",({"mixed","*",}),"quant",({"mixed","*",}),"args",}),(["main":({"This function is used to adjust the quantities of components consumed bya spell. Overload it to adjust them.",}),"param":({"caster the person casting the spell","stage the stage currently being executed","quant mapping containing the components for that stage","args the args for the spell",}),"return":({"mapping showing the correct components for that stage.",}),]),}),"set_required":({({"void",}),({({"mapping",}),"rrequired",}),(["main":({"This function sets the items required by the spell, and the stages they're required for.NB: Items that are required are not consumed! Use set_consumed for items that willbe consumed by the spell. Furthermore, having items that conflict in both the consumedand required mappings is a bad idea, no guarantees made about behaviour.",}),"param":({"rrequired the entire mapping of items required in the format:([  (int)stage : ([ (string)id of the item : ({ (string)short used for error message, (int)quantity used ]),])EG: ([  1 : ([ \"pinche$s$ of ForestGreenDust\" : ({ \"forest-green dust\", 1 }) ]),  3 : ([ \"metal shield$s$\" : ({ \"metal shield\", 1 }) ]),])",}),]),}),"set_name":({({"void",}),({({"string",}),"nname",}),(["main":({"",}),"arg":({"nname The new name of the spell",}),]),}),"check_else":({({"int",}),({({"object",}),"caster",({"mixed","*",}),"args",}),(["main":({"Checks to see if the spell should fail due to any other reasons.Suppresses error messages, thus custom ones must be providedby inheriting objects. Should be overloaded if needed.",}),"arg":({"caster The person casting the spell","args Array of arguments for the spell, accessed through the defines in magic.h",}),"return":({"0 to halt the spell, 1 to continue",}),]),}),"set_help":({({"void",}),({({"string",}),"_help",}),(["main":({"",}),"arg":({"_help The string help for the spell.",}),]),}),"check_components":({({"int",}),({({"object",}),"caster",({"int",}),"stage",({"mixed","*",}),"args",}),(["main":({"check_components is used internally. Should not be overloaded.To adjust quantities of components dynamically, see adjust_components()",}),]),}),"scale_difficulty":({({"float",}),({({"object",}),"caster",({"mixed","*",}),"args",}),(["main":({"Scaling function. Overload to scale difficulty of stages accordingto any factors you may desire. For example, you could make a spellmore difficult if there are more targets.",}),"arg":({"caster The person casting the spell","args The spell args, see magic.h",}),"return":({"Float percentage of difficulty, default 1.0",}),]),}),"scale_gp_cost":({({"float",}),({({"object",}),"caster",({"mixed","*",}),"args",}),(["main":({"Scaling function. Overload to scale GP cost to cast a spellif so desired.",}),"arg":({"caster The person casting the spell","args The args for the spell, see magic.h",}),"return":({"Float percentage of GP cost, default 1.0",}),]),}),"query_ritual":({({"mixed","*",}),({}),(["main":({"Returns the ritual array.",}),"see":({"set_ritual",}),]),}),"query_gp":({({"int",}),({}),(["main":({"",}),"see":({"set_gp, scale_gp_cost",}),"return":({"The raw gp cost to cast the spell.",}),]),}),"query_time":({({"int",}),({}),(["main":({"",}),"see":({"set_time, scale_time",}),"return":({"The raw time in seconds per spell stage, I think.",}),]),}),"set_ritual":({({"void",}),({({"mixed","*",}),"_ritual",}),(["main":({"Sets the ritual array up. The ritual array is thearray of steps that a spell will take.",}),]),}),"query_spell_type":({({"string",}),({}),(["main":({"",}),"see":({"set_spell_type",}),"return":({"String skill used primarily in spell.",}),]),}),"set_gp":({({"void",}),({({"int",}),"gp",}),(["main":({"",}),"arg":({"gp The raw gp cost to cast the spell.",}),"see":({"query_gp, scale_gp_cost",}),]),}),"set_time":({({"void",}),({({"int",}),"ttime",}),(["main":({"",}),"arg":({"ttime The new raw time in seconds per stage.",}),"see":({"query_time, scale_time",}),]),}),"set_consumed":({({"void",}),({({"mapping",}),"cconsumed",}),(["main":({"This function sets the items consumed by the spell, and the stages they're consumed in.",}),"param":({"cconsumed the entire mapping of items consumed in the format:([  (int)stage : ([ (string)id of the item : ({ (string)short used for error message, (int)quantity used ]),])EG: ([  1 : ({ \"pinche$s$ of ForestGreenDust\", \"forest-green dust\", 1 }),  3 : ({ \"metal shield$s$\", \"metal shield\", 1 }),])",}),]),}),"set_spell_type":({({"void",}),({({"string",}),"n_type",}),(["main":({"",}),"arg":({"n_type String type of spell, eg \"magic.spells.misc\"",}),"see":({"query_spell_type",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["revision":({"10/05/04 Changed the way that consumables work a tad, toget consumables working right. - Shiannar.",}),"main":({"*sob* This is, to my knowledge, the 4th complete or major re-writeof the magic_spell object that I have done. And this time, it'sstarting with nothing due to formatting this machine. *sigh*This one better damn well work RIGHT.",}),"author":({"Shiannar",}),])
define_docs ([])
includes (["/include/obj_parser.h":1049992949,"/include/tasks.h":1059677152,"/include/effect.h":962428284,"/include/magic.h":1042633641,])
class_docs ([])
file_name "/std/effects/magic/magic_spell.c"
last_changed 1121006162
