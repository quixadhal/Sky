#/secure/handlers/autodoc/autodoc_file.c
public_functions (["test_email":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the email of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players email",}),]),}),"special_add_property":({({"void",}),({({"string",}),"player",({"string",}),"prop",({"mixed",}),"value",}),(["main":({"This method updates the cached properties, it's called by/secure/login.",}),]),}),"test_active":({({"varargs","int",}),({({"string",}),"player",({"int",}),"noload",}),(["main":({"This method determines if a player is still active.If you need to perform this on a lot of players please use the noloadparameter. When noload is set to 1 test_active will not attempt to loadthe player file if it isn't currently loaded and will instead just do asimple calculation of the players last login time. This is less accuratebut avoids lagging the mud.",}),"param":({"player the name of the user","noload optional parameter to prevent test_active() loading theplayer file.",}),"return":({"active or inactive (1 or 0)",}),]),}),"test_last":({({"int",}),({({"string",}),"str",}),(["main":({"This method determines the last log on of the playereven if they are not currently on.",}),"param":({"str the name of the user",}),"return":({"the player's last log on",}),]),}),"test_user":({({"int",}),({({"string",}),"str",}),(["main":({"This method figures out if the user exists even if they are not on.",}),"param":({"str the name of the user",}),"return":({"1 if they exist, 0 if they do not",}),]),}),"test_family":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns the player's family name.",}),"param":({"str the name of the user",}),"return":({"the player's family name",}),]),}),"query_plan":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the plan to use in the player's finger,even when they are off line.",}),"param":({"name the name of the player",}),"return":({"the plan or 0, if none",}),]),}),"test_icq":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the ICQ number information of the playereven if they are not currently on.",}),"param":({"str the name of the user",}),"return":({"the players ICQ number as a string",}),]),}),"load_player":({({"int",}),({({"string",}),"name",}),(["main":({"This method will load in the player file.  It will return 0 if the playerfile either does not exist or the input string is incorrect.",}),"param":({"name the name to try and read in",}),"return":({"1 if the player file exists, 0 if not",}),]),}),"test_age":({({"int",}),({({"string",}),"str",}),(["main":({"This method determines the age of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players age",}),]),}),"test_location":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns the player's location.",}),"param":({"str the name of the user",}),"return":({"the player's location",}),]),}),"test_deity":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the deity of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players deity",}),]),}),"test_banished":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks to see if the name is banished of not.",}),"param":({"name the check for banishment.",}),"return":({"1 if it banished, 0 if not",}),]),}),"query_project":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the project to use in the player's finger,even when they are off line.",}),"param":({"name the name of the player",}),"return":({"the project or 0, if none",}),]),}),"test_property":({({"mixed",}),({({"string",}),"name",({"string",}),"str",}),(["main":({"This method returns the current value of the property on theplayer, even if they are not currently on.",}),"param":({"name the player name","str the property to query",}),"return":({"the value of the property",}),]),}),"query_signature":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the signature to use on posts for the playereven when they are off line.",}),"param":({"name the name of the player",}),"return":({"the signature, \"\" if none",}),]),}),"test_start_time":({({"int",}),({({"string",}),"str",}),(["main":({"This method determines the time the player started at.",}),"param":({"str the name of the user",}),"return":({"the player's start time",}),]),}),"test_real_name":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the real name of the player even if they arenot currently on",}),"param":({"str the name of the user",}),"return":({"the players real name",}),]),}),"test_homepage":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the homepage of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players homepage",}),]),}),"test_gender":({({"int",}),({({"string",}),"str",}),(["main":({"This method determines the gender of the player even if they arenot currently on",}),"see":({"/std/living/gender.c",}),"param":({"str the name of the user",}),"return":({"the player's gender",}),]),}),"test_level":({({"int",}),({({"string",}),"str",}),(["main":({"This method determines the level of the player even if they arenot currently on",}),"param":({"str the name of the user",}),"return":({"the players level",}),]),}),"query_finger_info":({({"class","finger_info",}),({({"string",}),"name",}),(["main":({"This method returns all the info needed for a player's finger.If the player is online, the updated values will be gottenstraight from the player object.",}),"param":({"name the player to get the data for",}),"return":({"the player info for the player",}),]),}),"test_birthday":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns the player's birthday date.",}),"param":({"str the name of the user",}),"return":({"the player's birthday",}),]),}),"query_reference":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the reference string to use in the player's refer,even when they are off line.",}),"param":({"name the name of the player",}),"return":({"the reference string or 0, if none",}),]),}),"delete_from_cache":({({"void",}),({({"string",}),"name",}),(["main":({"This method should be called whenever a player logs on, oris refreshed, so that we wouldn't have outdated data in the cache.",}),"param":({"name the name of the player to delete from the cache",}),]),}),])
protected_functions ([])
inherits (["/global/player/family":({}),])
main_docs (["main":({"A hander to allow the testing of values on players when they aren't loggedin.  These methods used to exist in the login object but now they're here.<p>",}),"author":({"Ceres",}),"change":({"Partly rewritten to make it faster, and added support for fingerinfo - Sandoz, 2002.",}),])
define_docs (["MAX_CACHE_SIZE":([]),"CACHE_TIMEOUT":([]),"INACTIVE_LIMIT":([]),])
includes (["/secure/include/finger.h":1021758198,])
class_docs (["player_info":({0,({({"cached",({"int",}),}),({"touched",({"int",}),}),({"gender",({"int",}),}),({"active",({"int",}),}),({"level",({"int",}),}),({"age",({"int",}),}),({"last",({"int",}),}),({"start_time",({"int",}),}),({"password",({"string",}),}),({"real_name",({"string",}),}),({"email",({"string",}),}),({"icq",({"string",}),}),({"homepage",({"string",}),}),({"birthday",({"string",}),}),({"location",({"string",}),}),({"home_dir",({"string",}),}),({"last_on_from",({"string",}),}),({"deity",({"string",}),}),({"family_name",({"string",}),}),({"signature",({"string",}),}),({"project",({"string",}),}),({"plan",({"string",}),}),({"reference",({"string",}),}),({"map_prop",({"mapping",}),}),}),([]),}),])
file_name "/handlers/player_handler.c"
last_changed 1031235654
