#/secure/handlers/autodoc/autodoc_file.c
public_functions (["liaisonp":({({"int",}),({({"mixed",}),"person",}),(["main":({"This method returns whether or not the given player is a liaison.",}),"see":({"adminp, seniorp, creatorp, lordp, playtesterp",}),"param":({"person the player to test",}),"return":({"whether or not the player is a liaison",}),]),}),"file_exists":({({"int",}),({({"string",}),"str",}),(["main":({"This method returns true if the file str exists.",}),"see":({"dir_exists, file_size",}),"param":({"str the file name to test",}),"return":({"1 if the file exists",}),]),}),"playtesterp":({({"varargs","int",}),({({"mixed",}),"person",({"int",}),"nocre",}),(["main":({"This method returns whether or not the given player is a playtester.This will return 1 for creators as well, unless the optional nocreflag is set.",}),"see":({"adminp, lordp, seniorp, creatorp, liaisonp",}),"param":({"person the player to test","optional flag to make it return 0 for creators",}),"return":({"whether or not the player is a playtester",}),]),}),"adminp":({({"int",}),({({"mixed",}),"person",}),(["main":({"This method returns whether or not the given player is an admin.",}),"see":({"lordp, seniorp, creatorp, liaisonp, playtesterp",}),"param":({"person the player to test",}),"return":({"whether or not the player is an admin",}),]),}),"creatorp":({({"int",}),({({"mixed",}),"person",}),(["main":({"This method returns whether or not the given player is a creator.",}),"see":({"adminp, lordp, seniorp, liaisonp, playtesterp",}),"param":({"person the player to test",}),"return":({"whether or not the player is a creator",}),]),}),"seniorp":({({"int",}),({({"mixed",}),"person",}),(["main":({"This method returns whether or not the given player is a senior creator.",}),"see":({"adminp, lordp, creatorp, liaisonp, playtesterp",}),"param":({"person the creator to test",}),"return":({"whether or not the player is a senior creator",}),]),}),"dir_exists":({({"int",}),({({"string",}),"str",}),(["main":({"This method returns true if the directory str exists.",}),"see":({"file_exists, file_size",}),"param":({"str the directory path to test",}),"return":({"1 if the directory exists",}),]),}),"lordp":({({"int",}),({({"mixed",}),"person",}),(["main":({"This method returns whether or not the given player is a lord.",}),"see":({"adminp, seniorp, creatorp, liaisonp, playtesterp",}),"param":({"person the player to test",}),"return":({"whether or not the player is a lord",}),]),}),"rank":({({"int",}),({({"mixed",}),"person",}),(["main":({"This method returns the rank level of the player.",}),"see":({"adminp, lordp, seniorp, creatorp, playtesterp, liaisonp",}),"param":({"person the player to get the rank for",}),"return":({"the rank of the player as defined in rank.h",}),]),}),])
protected_functions ([])
inherits (["/secure/simul_efun/time":({}),"/secure/simul_efun/process_value":({}),"/secure/simul_efun/array":({}),"/secure/simul_efun/debug":({}),"/secure/simul_efun/back_trace":({}),"/secure/simul_efun/inside_shorts":({}),"/secure/simul_efun/query_group":({}),"/secure/simul_efun/query_number":({}),"/secure/simul_efun/pk_check":({}),"/secure/simul_efun/string_to_define":({}),"/secure/simul_efun/sqrt":({}),"/secure/simul_efun/indent":({}),"/secure/simul_efun/find_other_call_out":({}),"/secure/simul_efun/unguarded":({}),"/secure/simul_efun/add_command":({}),"/secure/simul_efun/query_ident":({}),"/secure/simul_efun/strip_colours":({}),"/secure/simul_efun/snoop_simul":({}),"/secure/simul_efun/roll_MdN":({}),"/secure/simul_efun/extract":({}),"/secure/simul_efun/thing_to_string":({}),"/secure/simul_efun/add_action":({}),"/secure/simul_efun/shuffle":({}),"/secure/simul_efun/add_a":({}),"/secure/simul_efun/obj_parser":({}),"/secure/simul_efun/modified_efuns":({}),"/secure/simul_efun/dump_socket_status":({}),])
main_docs (["main":({"The simul_efun object.  This object allows you to create functions whichapear to act like an efun.  An efun is a function which is built intothe driver.  For functions which are on objects you need to specify thethe object name when you call them.ie: \"/handlers/autodoc/autodoc_handler\"->add_file(frog);With a simuluated efun, you would not need to specifiy a file name.  This ishow the functions like match_objects_for_existence() and so on work.",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/secure/include/rank.h":981679203,])
class_docs ([])
file_name "/secure/simul_efun.c"
last_changed 1034342305
