#/secure/handlers/autodoc/autodoc_file.c
public_functions (["move_family_member":({({"int",}),({({"string",}),"curr_family",({"string",}),"person",({"string",}),"dest_family",}),(["main":({"This method moves a person from one family to another family.",}),"see":({"add_member()",}),"param":({"curr_family the current family","person the persons name","dest_family the destination family",}),"return":({"1 if successful moved",}),]),}),"is_relationship":({({"int",}),({({"string",}),"name",({"string",}),"person",({"string",}),"related",({"string",}),"relationship",}),(["main":({"This method checks to see if the specified relationship exists.",}),"param":({"name the family the relationship is in","person the person the relationship is from","related to person they are related to","relationship the type of relationship they have",}),"return":({"1 if the relationship exists, 0 if not",}),]),}),"query_opposite_relationship":({({"string",}),({({"string",}),"relation",}),(["main":({"This method returns the opposite relationship to the specified one.",}),"see":({"add_valid_relationship()","is_valid_interfamily_relationship()","is_valid_join_family_relationship()","is_valid_relationship()",}),"param":({"relation the relation to return the opposite of",}),"return":({"the opposite of the relationship",}),]),}),"remove_relationship":({({"int",}),({({"string",}),"name",({"string",}),"person",({"string",}),"dest_name",({"string",}),"dest",({"string",}),"relationship",}),(["main":({"This method removes a relationship from the club.",}),"param":({"name the name of the family","person the person the relationship is from","dest the person the relationship is to","relationship the relationship they have to you",}),"return":({"1 if succcessful, 0 if not",}),]),}),"is_valid_relationship":({({"int",}),({({"string",}),"str",}),(["main":({"This method checks to make sure the specified relationship is valid.",}),"see":({"query_opposite_relationship()","is_valid_interfamily_relationship()","is_valid_join_family_relationship()","add_valid_relationship()",}),"param":({"relation the relationship to check for validity",}),"return":({"1 if the relationship is valid",}),]),}),"is_valid_join_family_relationship":({({"int",}),({({"string",}),"str",}),(["main":({"This method checks to see if the relation is a valid join family one.",}),"see":({"is_valid_relationship()","is_valid_interfamily_relationship()","add_valid_relationship()","query_opposite_relationship()",}),"param":({"str the relationship to check",}),"return":({"1 if the relation is a valid join family one",}),]),}),"query_relationship_gender":({({"string",}),({({"string",}),"relationship",({"int",}),"female",}),(["main":({"This method returns the genderised version of the relationship.",}),"see":({"query_all_relationships()","query_ungendered_relationship()","add_gender_relationships()","query_all_relationships()",}),"param":({"name relationship the relation to get the gender of","female 0 for male, 1 for female",}),]),}),"query_ungendered_relationship":({({"string",}),({({"string",}),"relationship",}),(["main":({"This returns the real relationship type based on the possiblegenderised relationship.",}),"see":({"add_gender_relationship()","query_all_relationship_types()",}),"param":({"relationship the relationship to get the real relationship for",}),"return":({"the degendered relationship name",}),]),}),"is_valid_interfamily_relationship":({({"int",}),({({"string",}),"str",}),(["main":({"This method checks to see if the relation is a valid interfamily one.",}),"see":({"is_valid_relationship()","is_valid_join_family_relationship()",}),"param":({"str the relationship to check",}),"return":({"1 if the relation is a valid interfamily one",}),]),}),"query_all_valid_relationships":({({"string","*",}),({}),(["main":({"This method returns all the valid relationships.",}),"see":({"add_valid_relationship()","is_valid_interfamily_relationship()","is_valid_join_family_relationship()","is_valid_relationship()","query_opposite_relationship()",}),"return":({"all the current valid relationship types",}),]),}),"query_all_relationships":({({"string","*",}),({}),(["main":({"This method returns all the possible relationships, including thegendered ones.",}),"see":({"query_ungendered_relationship()","add_gender_relationship()",}),"return":({"the array of possible relationships",}),]),}),"query_relationships_to":({({"string","*",}),({({"string",}),"name",({"string",}),"person",({"string",}),"related",}),(["main":({"This method returns how the first player is related to the second player.",}),"param":({"name the family the relationship is in","person the person the relationship is from","related to person they are related to",}),"return":({"the array of relationships they have",}),]),}),"query_relationships":({({"class","relationship_data","*",}),({({"string",}),"name",({"string",}),"person",}),(["main":({"This method returns the relationships the selected person has tothe other people in the family.",}),"param":({"name the name of the family","person the person who to query the relationships for",}),"return":({"the list of all the relationships the person has",}),]),}),"query_club_cost_per_period":({({"int",}),({({"string",}),"club_name",}),(["main":({"This method determines how much the club will cost to run eachpay period.",}),"see":({"query_time_fees_due()",}),"param":({"club_name the name of the club to get the fees for",}),"return":({"the amount the club will cost in the next pay period",}),]),}),"add_relationship":({({"int",}),({({"string",}),"name",({"string",}),"person",({"string",}),"dest_name",({"string",}),"dest",({"string",}),"relationship",}),(["main":({"This method adds a relationship between two members of a family.",}),"param":({"name the name of the family","person the person the relationship is from","dest the person the relationship is to","dest_name the name of the family the other person is in","relationship the relationship they have to you",}),"return":({"1 if succcessful, 0 if not",}),]),}),"add_valid_relationship":({({"void",}),({({"string",}),"relation1",({"string",}),"relation2",({"int",}),"flags",}),(["main":({"This method adds a valid relationship to the current list.",}),"see":({"query_opposite_relationship()","is_valid_interfamily_relationship()","is_valid_join_family_relationship()","is_valid_relationship()",}),"param":({"relation1 the first relationship","relation2 the second relationship",}),]),}),])
protected_functions (["check_family_information":({({"void",}),({({"string",}),"name",({"string",}),"member",({"int",}),"startup",}),(["main":({"This method checks the extra information for the club.  Please notethis does *not* save the information.  You need to do this yourself.",}),"see":({"check_clubs()","remove_member()",}),"param":({"name the name of the club to check",}),]),}),"create_extra_data":({({"void",}),({({"string",}),"name",}),([]),}),])
inherits (["/handlers/inherit/club_personal":({}),])
main_docs (["main":({"This is the handler for all things clubby, a club being a group ofplayers.  Each club must have a unique name.  It also handles electionsfor various club positions.",}),"started":({"Sun Sep 27 03:35:42 EDT 1998",}),"author":({"Pinkfish",}),])
define_docs (["CLUB_JOIN_FAMILY_FLAG":([]),"CLUB_INTERFAMILY_FLAG":(["main":({"The stuff releated to families.",}),"member":({"relationships the relations in this family","never_join the list of people who can never join",}),]),])
includes (["/secure/include/login.h":962429079,"/include/player_handler.h":962428284,"/include/time.h":1049465667,"/include/clubs.h":1050407666,"/secure/include/login_handler.h":962429079,])
class_docs (["family_info":({0,({({"relationships",({"mapping",}),}),({"never_join",({"string","*",}),}),({"tmp1",({"int",}),}),({"tmp2",({"int",}),}),}),(["main":({"The stuff releated to families.",}),"member":({"relationships the relations in this family","never_join the list of people who can never join",}),]),}),"relationship_type_data":({0,({({"opposite",({"string",}),}),({"flags",({"int",}),}),}),(["main":({"The information associated with relationship names.",}),"member":({"opposite the opposite relationship name","flags flags associated with the relationship's",}),]),}),])
file_name "/handlers/inherit/club_family.c"
last_changed 994734676
