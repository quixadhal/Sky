#/secure/handlers/autodoc/autodoc_file.c
public_functions (["choice":({({"mixed",}),({({"mixed",}),"options",}),(["main":({"This method returns a random member of the specified array.",}),"param":({"options the array to return a random member from",}),"return":({"a random member of the specified array",}),]),}),"shout":({({"varargs","void",}),({({"string",}),"words",({"object",}),"avoid",}),(["main":({"This method sends a polite shout to everyone on line.  It checksfor earmuffs and all that sort of stuff.",}),"param":({"words the message to shout","avoid who not to tell the message to",}),]),}),"query_prime":({({"int",}),({({"int",}),"num",}),(["main":({"This method queries whether the input number is a prime.",}),"author":({"Sandoz & Windy",}),"param":({"num the number to test for primeness",}),"return":({"1 if the number is a prime, 0 if not",}),]),}),"mud_name":({({"string",}),({}),(["main":({"This method returns the name of the mud.",}),"return":({"the name of the mud",}),]),}),"strcasecmp":({({"int",}),({({"string",}),"str1",({"string",}),"str2",}),(["main":({"Does a string compare...  But case insensitive...",}),"see":({"efun::strcmp()",}),"param":({"str1 the string to compare","str2 the other string to compare",}),"return":({"0 if they are the same, <0 if they are less than each other, >0 if not",}),]),}),"uniq_array":({({"mixed",}),({({"mixed",}),"arr",}),(["main":({"This method will return an array that contains no duplicates.Written by: Wodan<p>This function will return an array that contains no duplicates.Gotta love them mappings. :)",}),"param":({"arr the array to convert",}),"return":({"an array with no duplicates",}),]),}),"query_shadows":({({"object","*",}),({({"object",}),"ob",}),(["main":({"This method returns all the objects that are shadowing the input object.",}),"author":({"Sandoz",}),"param":({"ob the object to get the shadows list for",}),"return":({"the objects shadowing us, or 0 if none are found",}),]),}),"wizardp":({({"int",}),({({"mixed",}),"arg",}),(["main":({"This method tells us if the object is a wizard.",}),"return":({"is the object a wizard",}),]),}),"verbalize":({({"varargs","string",}),({({"string",}),"verb",({"string",}),"single",}),(["main":({"This method does $V$0=verbs,verb$V$ expansion on a word.It does this by pluralizing the verb used.If the optional single person argument is supplied,then that is used for the single person version of theword, and the verb argument is used for multiple people.",}),"param":({"verb the verb to do the expansion on","single the optional singular argument",}),"example":({"verbalize(\"their\", \"his\") returns $V$0=his,their+\"$V$","verbalize(\"run\") returns $V$0=runs,run+\"$V$",}),"return":({"$V$0=verbs,verb$V$ expanded verb",}),]),}),"tail":({({"varargs","string",}),({({"string",}),"fname",({"int",}),"nlines",}),(["main":({"This will print the last bit of a file.",}),"param":({"fname the file to read",}),"return":({"1 if it succeeded, 0 if it failed",}),]),}),"log_file":({({"varargs","void",}),({({"string",}),"name",({"string",}),"fmt",({"mixed","*","args",}),"...",}),(["main":({"This method writes a message out to a log file.  The log files arenormally in \"/log\".  If a file doesn't start with '/ then \"/log/\" will beprepended to it.This does automatic removal of the log files after they get overa certain length.  The fmt and args parameters are used to print theactual message.<p>If more than one argument is passed to this function, then sprintf willbe used to print out the results.<p>ie: log_file(\"ROGER\", \"%s: frog and %s\\n\", ctime(time()), query_gumboot());",}),"param":({"name the name of the log file","fmt the format string","args the arguments to the sprintf",}),]),}),"distinct_array":({({"mixed",}),({({"mixed",}),"arr",}),(["main":({"This method removes any duplicates from an array while keepingthe order intact, this is more costly than uniq_array, so if theorder isn't important to you, don't use it, use uniq_array instead.",}),"param":({"arr the array to remove duplicates from",}),"return":({"the new array with no duplicates",}),]),}),"replace":({({"varargs","string",}),({({"string",}),"str",({"mixed",}),"bing",({"string",}),"rep",}),(["main":({"Replaces all occurances of a set of strings in the input string.  Replacesan individual or an array of strings with new values.  If the secondargument is an array of strings, then the 1st, 3rd, 5th...  elements willbe the strings to search for and the 2nd, 4th, 6th etc will be the stringsto replace with.  If three arguments are specified then the second is the stringto search for, the third the one to replace.<p>Eg:<br>str = replace(str, ({ \"search\", \"replace\", \"orange\", \"apple\" });<p>That will replace all occurances of \"search\" with \"replace\" and \"orange\"with \"apple\".",}),"param":({"str the string to do the replacement in","bing the search or array argument","rep the replacement string, or null",}),"return":({"the string with all the replacements done",}),]),}),"cat":({({"void",}),({({"string",}),"file",({"int",}),"start_line",({"int",}),"number",}),(["main":({"Write the file out to the screen.  This should  not be used if possible.It is an interface to read_file and other things.  You should perhapslook at using more_string ort more_file.",}),"see":({"/global/more_string->more_string()","/global/more_file->more_file()",}),"param":({"file the file name to cat","start_line the line to start on","number the number of lines to print",}),]),}),"user_event":({({"void",}),({({"mixed",}),"from",({"mixed",}),"first",({"mixed","args",}),"...",}),(["main":({"This method calls an event on all the users online.It does not do any filtering, so it will send messages to people whoare earmuffed and ignoring or lord invisible or whatever.",}),"param":({"from the person it is from","name the name of the event","args the arguments to the event",}),]),}),"query_verb":({({"string",}),({}),(["main":({"This returns the current verb name.  This works if the verb ius usedthrough add_command or through add_action.",}),"return":({"the name of the verb",}),]),}),])
protected_functions ([])
inherits (["/secure/simul_efun/base_name":({}),"/secure/simul_efun/reference_allowed":({}),])
main_docs (["main":({"Contains some simul_efuns.",}),"author":({"Pinkfish",}),])
define_docs (["MUD_NAME":([]),"LOG_NAME(X)":([]),"DELAY_LOG_FLUSH":([]),"MAX_SIZE":([]),])
includes (["/secure/include/config.h":1121841204,"/secure/include/type.h":1200761934,])
class_docs ([])
file_name "/secure/simul_efun/modified_efuns.c"
last_changed 1119260938
