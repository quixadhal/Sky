.DT
query_multiple_short
$MUDNAME$ Creator Help
query_multiple_short

.SH Name
.SP 5 5
query_multiple_short -  Returns a nice string which looks like "Frog, fish and chicken".
.EP

.SH Syntax
.SI 5
varargs string query_multiple_short(mixed args,
string type,
int no_dollars,
int flag)
.EI

.SH Parameters
.SI 5
%^BOLD%^args%^RESET%^ - the array to do the processing on
%^BOLD%^type%^RESET%^ - the type of short to use "a", "the", "one", "poss"
%^BOLD%^no_dollars%^RESET%^ - this forces the output to be a real string
.EI

.SH Returns
.SI 5
the processed string

.EI

.SH Defined in
.SI 5
/secure/simul_efun/obj_parser.c
.EI

.SH Description
.SP 5 5

Returns a nice string which looks like "Frog, fish and chicken".  This
takes in an array of objects and or strings and returns a message
like that shown above.  It also does things like adding the number of
each type at the start of the function.


This function has two main uses: to produce the control codes for a     set of objects and to produce a nice list from a set of strings.     The "type" argument is optional and may be "a", "the", "one" or     "poss", defaulting to "a": it determines which of a_short,     the_short, one_short or poss_short will be used to make the control     code sequence for the objects in "args".  If all of the elements of     "args" are objects, it simply returns the block control code for     the relevant shorts of the objects.  Otherwise, it looks through     the elements one at a time, replacing objects by the result of     calling the relevant short function on them; finally it     concatenates the elements with commas between each pair, except     between the last pair which have " and " between them.  Since the     output will contain processing codes if there are any objects in     "args", it should be passed through convert_message before being     stored. 
.EP

